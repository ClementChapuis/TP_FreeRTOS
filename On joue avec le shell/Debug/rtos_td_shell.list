
rtos_td_shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007888  08007888  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000448c  20000074  08007904  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004500  08007904  00024500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018875  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003954  00000000  00000000  00038919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297fd  00000000  00000000  0003e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d9f  00000000  00000000  000680b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f94f9  00000000  00000000  00081e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b34d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  0017b3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007578 	.word	0x08007578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007578 	.word	0x08007578

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fe84 	bl	8004312 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	0800759c 	.word	0x0800759c
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 febe 	bl	80043aa <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006ac:	f000 ff26 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006c8:	f000 fd6c 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80006cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006e4:	f000 fd5e 	bl	80011a4 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40022000 	.word	0x40022000

080006f8 <fonction>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <fonction+0x3c>)
 800070c:	2128      	movs	r1, #40	; 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fa2a 	bl	8006b68 <sniprintf>
 8000714:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	b289      	uxth	r1, r1
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	080075b8 	.word	0x080075b8

08000738 <clignotement>:

void clignotement(void * pvParameters)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(sem_led, portMAX_DELAY);
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <clignotement+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	4618      	mov	r0, r3
 800074a:	f004 f95f 	bl	8004a0c <xQueueSemaphoreTake>
	while(1)
	{
		if(periode ==0)
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <clignotement+0x44>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d105      	bne.n	8000762 <clignotement+0x2a>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <clignotement+0x48>)
 800075c:	f000 fece 	bl	80014fc <HAL_GPIO_WritePin>
 8000760:	e7f5      	b.n	800074e <clignotement+0x16>
		}else{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000762:	2102      	movs	r1, #2
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <clignotement+0x48>)
 8000766:	f000 fee2 	bl	800152e <HAL_GPIO_TogglePin>
			vTaskDelay(periode);
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <clignotement+0x44>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fcfe 	bl	8005170 <vTaskDelay>
		if(periode ==0)
 8000774:	e7eb      	b.n	800074e <clignotement+0x16>
 8000776:	bf00      	nop
 8000778:	200006b0 	.word	0x200006b0
 800077c:	200006b8 	.word	0x200006b8
 8000780:	40022000 	.word	0x40022000

08000784 <led>:
		}
	}
}

void led(h_shell_t * h_shell, int argc, char ** argv)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	periode = atoi(argv[1]);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3304      	adds	r3, #4
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f9a2 	bl	8006ae0 <atoi>
 800079c:	4603      	mov	r3, r0
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <led+0x3c>)
 80007a0:	6013      	str	r3, [r2, #0]
	if(periode !=0)
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <led+0x3c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <led+0x34>
	{
		xSemaphoreGive(sem_led);
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <led+0x40>)
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	f003 ff8e 	bl	80046d4 <xQueueGenericSend>
	}
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200006b8 	.word	0x200006b8
 80007c4:	200006b0 	.word	0x200006b0

080007c8 <spam>:
		vTaskDelay(100);
	}
}

void spam(h_shell_t * h_shell, int argc, char ** argv)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
	strcpy(msg, argv[1]);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <spam+0x44>)
 80007de:	f006 f9f7 	bl	8006bd0 <strcpy>
	repetition = atoi(argv[2]);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3308      	adds	r3, #8
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 f979 	bl	8006ae0 <atoi>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <spam+0x48>)
 80007f2:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(sem_spam);
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <spam+0x4c>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 ff69 	bl	80046d4 <xQueueGenericSend>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000064c 	.word	0x2000064c
 8000810:	200006bc 	.word	0x200006bc
 8000814:	200006b4 	.word	0x200006b4

08000818 <shell>:

void shell(void * pvParameters)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	shell_init(&h_shell);
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <shell+0x40>)
 8000822:	f005 ffe5 	bl	80067f0 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <shell+0x44>)
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <shell+0x48>)
 800082a:	2166      	movs	r1, #102	; 0x66
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <shell+0x40>)
 800082e:	f006 f821 	bl	8006874 <shell_add>
	shell_add(&h_shell, 'l', led, "Clignotement d'une led");
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <shell+0x4c>)
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <shell+0x50>)
 8000836:	216c      	movs	r1, #108	; 0x6c
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <shell+0x40>)
 800083a:	f006 f81b 	bl	8006874 <shell_add>
	shell_add(&h_shell, 's', spam, "Fonction spam");
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <shell+0x54>)
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <shell+0x58>)
 8000842:	2173      	movs	r1, #115	; 0x73
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <shell+0x40>)
 8000846:	f006 f815 	bl	8006874 <shell_add>
	shell_run(&h_shell);
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <shell+0x40>)
 800084c:	f006 f8be 	bl	80069cc <shell_run>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200002e8 	.word	0x200002e8
 800085c:	080075e0 	.word	0x080075e0
 8000860:	080006f9 	.word	0x080006f9
 8000864:	080075f8 	.word	0x080075f8
 8000868:	08000785 	.word	0x08000785
 800086c:	08007610 	.word	0x08007610
 8000870:	080007c9 	.word	0x080007c9

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  BaseType_t xReturned;
  TaskHandle_t xHandle_shell = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 faf0 	bl	8000e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f871 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f7ff fed3 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800088a:	f000 fa07 	bl	8000c9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  h_shell.drv.receive = drv_uart1_receive;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <main+0xb8>)
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <main+0xbc>)
 8000892:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
  h_shell.drv.transmit = drv_uart1_transmit;
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <main+0xb8>)
 8000898:	4a26      	ldr	r2, [pc, #152]	; (8000934 <main+0xc0>)
 800089a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
  sem = xSemaphoreCreateBinary();
 800089e:	2203      	movs	r2, #3
 80008a0:	2100      	movs	r1, #0
 80008a2:	2001      	movs	r0, #1
 80008a4:	f003 feb4 	bl	8004610 <xQueueGenericCreate>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <main+0xc4>)
 80008ac:	6013      	str	r3, [r2, #0]
  sem_led = xSemaphoreCreateBinary();
 80008ae:	2203      	movs	r2, #3
 80008b0:	2100      	movs	r1, #0
 80008b2:	2001      	movs	r0, #1
 80008b4:	f003 feac 	bl	8004610 <xQueueGenericCreate>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <main+0xc8>)
 80008bc:	6013      	str	r3, [r2, #0]
  sem_spam = xSemaphoreCreateBinary();
 80008be:	2203      	movs	r2, #3
 80008c0:	2100      	movs	r1, #0
 80008c2:	2001      	movs	r0, #1
 80008c4:	f003 fea4 	bl	8004610 <xQueueGenericCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <main+0xcc>)
 80008cc:	6013      	str	r3, [r2, #0]
  xReturned = xTaskCreate(shell, "shell", STACK_SIZE, (void *) DELAY_SHELL, TASK_SHELL_PRIORITY, &xHandle_shell);
 80008ce:	463b      	mov	r3, r7
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008dc:	4919      	ldr	r1, [pc, #100]	; (8000944 <main+0xd0>)
 80008de:	481a      	ldr	r0, [pc, #104]	; (8000948 <main+0xd4>)
 80008e0:	f004 fb0d 	bl	8004efe <xTaskCreate>
 80008e4:	6078      	str	r0, [r7, #4]
  xReturned = xTaskCreate(clignotement, "clignotement", STACK_SIZE, (void *) periode, TASK_CLIGNOTEMENT_PRIORITY, &xHandle_clignotement);
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <main+0xd8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <main+0xdc>)
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	2302      	movs	r3, #2
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	4613      	mov	r3, r2
 80008f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fa:	4916      	ldr	r1, [pc, #88]	; (8000954 <main+0xe0>)
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <main+0xe4>)
 80008fe:	f004 fafe 	bl	8004efe <xTaskCreate>
 8000902:	6078      	str	r0, [r7, #4]
  xReturned = xTaskCreate(spam, "spam", STACK_SIZE, (void *) DELAY_SHELL, TASK_SPAM_PRIORITY, &xHandle_spam);
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0xe8>)
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2303      	movs	r3, #3
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2364      	movs	r3, #100	; 0x64
 800090e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000912:	4913      	ldr	r1, [pc, #76]	; (8000960 <main+0xec>)
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <main+0xf0>)
 8000916:	f004 faf2 	bl	8004efe <xTaskCreate>
 800091a:	6078      	str	r0, [r7, #4]

  vTaskStartScheduler();
 800091c:	f004 fc5e 	bl	80051dc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000920:	f7ff fe62 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000924:	f003 fcee 	bl	8004304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000928:	e7fe      	b.n	8000928 <main+0xb4>
 800092a:	bf00      	nop
 800092c:	200002e8 	.word	0x200002e8
 8000930:	080066bd 	.word	0x080066bd
 8000934:	080066f5 	.word	0x080066f5
 8000938:	200044e8 	.word	0x200044e8
 800093c:	200006b0 	.word	0x200006b0
 8000940:	200006b4 	.word	0x200006b4
 8000944:	08007620 	.word	0x08007620
 8000948:	08000819 	.word	0x08000819
 800094c:	200006b8 	.word	0x200006b8
 8000950:	20000644 	.word	0x20000644
 8000954:	08007628 	.word	0x08007628
 8000958:	08000739 	.word	0x08000739
 800095c:	20000648 	.word	0x20000648
 8000960:	08007638 	.word	0x08007638
 8000964:	080007c9 	.word	0x080007c9

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f006 f8ee 	bl	8006b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <SystemClock_Config+0xd4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <SystemClock_Config+0xd4>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <SystemClock_Config+0xd4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemClock_Config+0xd8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <SystemClock_Config+0xd8>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemClock_Config+0xd8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009d0:	2319      	movs	r3, #25
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80009d4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fe0c 	bl	8001604 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009f2:	f000 f839 	bl	8000a68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f6:	f000 fdb5 	bl	8001564 <HAL_PWREx_EnableOverDrive>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a00:	f000 f832 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2107      	movs	r1, #7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f892 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a2e:	f000 f81b 	bl	8000a68 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a56:	f000 fa11 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40001000 	.word	0x40001000

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fabb 	bl	800102c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <HAL_InitTick+0xe0>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <HAL_InitTick+0xe0>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <HAL_InitTick+0xe0>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aec:	f107 0210 	add.w	r2, r7, #16
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fa0e 	bl	8001f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b06:	f001 f9df 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8000b0a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b0c:	e004      	b.n	8000b18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0e:	f001 f9db 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8000b12:	4603      	mov	r3, r0
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	0c9b      	lsrs	r3, r3, #18
 8000b22:	3b01      	subs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xe8>)
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_InitTick+0xe8>)
 8000b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_InitTick+0xe8>)
 8000b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xe8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_InitTick+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b4c:	4817      	ldr	r0, [pc, #92]	; (8000bac <HAL_InitTick+0xe8>)
 8000b4e:	f001 fe05 	bl	800275c <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11b      	bne.n	8000b98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_InitTick+0xe8>)
 8000b62:	f001 fe5d 	bl	8002820 <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f000 fa75 	bl	8001064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d808      	bhi.n	8000b92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2036      	movs	r0, #54	; 0x36
 8000b86:	f000 fa51 	bl	800102c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xf0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e002      	b.n	8000b98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	200006c0 	.word	0x200006c0
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART1_IRQHandler+0x10>)
 8000bea:	f002 f9ad 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000710 	.word	0x20000710

08000bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM6_DAC_IRQHandler+0x10>)
 8000bfe:	f001 fe87 	bl	8002910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200006c0 	.word	0x200006c0

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f005 ff54 	bl	8006ae8 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20050000 	.word	0x20050000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	2000070c 	.word	0x2000070c
 8000c74:	20004500 	.word	0x20004500

08000c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART1_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ce0:	f002 f81c 	bl	8002d1c <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f7ff febd 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000710 	.word	0x20000710
 8000cf8:	40011000 	.word	0x40011000

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ac      	sub	sp, #176	; 0xb0
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	2284      	movs	r2, #132	; 0x84
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 ff1b 	bl	8006b58 <memset>
  if(uartHandle->Instance==USART1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <HAL_UART_MspInit+0x104>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d164      	bne.n	8000df6 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 f91f 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d44:	f7ff fe90 	bl	8000a68 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6453      	str	r3, [r2, #68]	; 0x44
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_UART_MspInit+0x108>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <HAL_UART_MspInit+0x10c>)
 8000db6:	f000 f9f5 	bl	80011a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <HAL_UART_MspInit+0x110>)
 8000de2:	f000 f9df 	bl	80011a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2025      	movs	r0, #37	; 0x25
 8000dec:	f000 f91e 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df0:	2025      	movs	r0, #37	; 0x25
 8000df2:	f000 f937 	bl	8001064 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000df6:	bf00      	nop
 8000df8:	37b0      	adds	r7, #176	; 0xb0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020000 	.word	0x40020000

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ff1d 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f005 fe59 	bl	8006af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fd17 	bl	8000874 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e54:	08007890 	.word	0x08007890
  ldr r2, =_sbss
 8000e58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e5c:	20004500 	.word	0x20004500

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>

08000e62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f8d5 	bl	8001016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	f7ff fe29 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e72:	f7ff fdff 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000798 	.word	0x20000798

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000798 	.word	0x20000798

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <__NVIC_SetPriorityGrouping+0x40>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x40>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	05fa0000 	.word	0x05fa0000

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff4c 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103e:	f7ff ff61 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	6978      	ldr	r0, [r7, #20]
 800104a:	f7ff ffb1 	bl	8000fb0 <NVIC_EncodePriority>
 800104e:	4602      	mov	r2, r0
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff80 	bl	8000f5c <__NVIC_SetPriority>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff54 	bl	8000f20 <__NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800108e:	f7ff ff09 	bl	8000ea4 <HAL_GetTick>
 8001092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d008      	beq.n	80010b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e052      	b.n	8001158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0216 	bic.w	r2, r2, #22
 80010c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <HAL_DMA_Abort+0x62>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0208 	bic.w	r2, r2, #8
 80010f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001102:	e013      	b.n	800112c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001104:	f7ff fece 	bl	8000ea4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b05      	cmp	r3, #5
 8001110:	d90c      	bls.n	800112c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e015      	b.n	8001158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e4      	bne.n	8001104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113e:	223f      	movs	r2, #63	; 0x3f
 8001140:	409a      	lsls	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d004      	beq.n	800117e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00c      	b.n	8001198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e175      	b.n	80014b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8164 	bne.w	80014aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d005      	beq.n	80011fa <HAL_GPIO_Init+0x56>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d130      	bne.n	800125c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 0201 	and.w	r2, r3, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b03      	cmp	r3, #3
 8001266:	d017      	beq.n	8001298 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d123      	bne.n	80012ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80be 	beq.w	80014aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_GPIO_Init+0x324>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_GPIO_Init+0x324>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001346:	4a61      	ldr	r2, [pc, #388]	; (80014cc <HAL_GPIO_Init+0x328>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_GPIO_Init+0x32c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d037      	beq.n	80013e2 <HAL_GPIO_Init+0x23e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <HAL_GPIO_Init+0x330>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d031      	beq.n	80013de <HAL_GPIO_Init+0x23a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a56      	ldr	r2, [pc, #344]	; (80014d8 <HAL_GPIO_Init+0x334>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d02b      	beq.n	80013da <HAL_GPIO_Init+0x236>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a55      	ldr	r2, [pc, #340]	; (80014dc <HAL_GPIO_Init+0x338>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d025      	beq.n	80013d6 <HAL_GPIO_Init+0x232>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x33c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01f      	beq.n	80013d2 <HAL_GPIO_Init+0x22e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <HAL_GPIO_Init+0x340>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d019      	beq.n	80013ce <HAL_GPIO_Init+0x22a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x344>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x226>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a51      	ldr	r2, [pc, #324]	; (80014ec <HAL_GPIO_Init+0x348>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x222>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x34c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_GPIO_Init+0x350>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x21a>
 80013ba:	2309      	movs	r3, #9
 80013bc:	e012      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013be:	230a      	movs	r3, #10
 80013c0:	e010      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013c2:	2308      	movs	r3, #8
 80013c4:	e00e      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x240>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x328>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_GPIO_Init+0x354>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a34      	ldr	r2, [pc, #208]	; (80014f8 <HAL_GPIO_Init+0x354>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_GPIO_Init+0x354>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_GPIO_Init+0x354>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_GPIO_Init+0x354>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_GPIO_Init+0x354>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae86 	bls.w	80011c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40021c00 	.word	0x40021c00
 80014f0:	40022000 	.word	0x40022000
 80014f4:	40022400 	.word	0x40022400
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001518:	e003      	b.n	8001522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001540:	887a      	ldrh	r2, [r7, #2]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	041a      	lsls	r2, r3, #16
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43d9      	mvns	r1, r3
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	400b      	ands	r3, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_PWREx_EnableOverDrive+0x98>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001592:	f7ff fc87 	bl	8000ea4 <HAL_GetTick>
 8001596:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001598:	e009      	b.n	80015ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800159a:	f7ff fc83 	bl	8000ea4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a8:	d901      	bls.n	80015ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e022      	b.n	80015f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d1ee      	bne.n	800159a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c8:	f7ff fc6c 	bl	8000ea4 <HAL_GetTick>
 80015cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ce:	e009      	b.n	80015e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015d0:	f7ff fc68 	bl	8000ea4 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015de:	d901      	bls.n	80015e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e007      	b.n	80015f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015f0:	d1ee      	bne.n	80015d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e291      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8087 	beq.w	8001736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001628:	4b96      	ldr	r3, [pc, #600]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b04      	cmp	r3, #4
 8001632:	d00c      	beq.n	800164e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001634:	4b93      	ldr	r3, [pc, #588]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d112      	bne.n	8001666 <HAL_RCC_OscConfig+0x62>
 8001640:	4b90      	ldr	r3, [pc, #576]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164c:	d10b      	bne.n	8001666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4b8d      	ldr	r3, [pc, #564]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06c      	beq.n	8001734 <HAL_RCC_OscConfig+0x130>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d168      	bne.n	8001734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e26b      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x7a>
 8001670:	4b84      	ldr	r3, [pc, #528]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a83      	ldr	r2, [pc, #524]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e02e      	b.n	80016dc <HAL_RCC_OscConfig+0xd8>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x9c>
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800168c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7b      	ldr	r2, [pc, #492]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0xd8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0xc0>
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a75      	ldr	r2, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a72      	ldr	r2, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xd8>
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a6b      	ldr	r2, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fbde 	bl	8000ea4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fbda 	bl	8000ea4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e21f      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xe8>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fbca 	bl	8000ea4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fbc6 	bl	8000ea4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e20b      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	4b57      	ldr	r3, [pc, #348]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x110>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d069      	beq.n	8001816 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x190>
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x17a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1df      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	493d      	ldr	r1, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e040      	b.n	8001816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a38      	ldr	r2, [pc, #224]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb7c 	bl	8000ea4 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb78 	bl	8000ea4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1bd      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4929      	ldr	r1, [pc, #164]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb58 	bl	8000ea4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb54 	bl	8000ea4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e199      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d038      	beq.n	8001894 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d019      	beq.n	800185e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800182c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fb35 	bl	8000ea4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fb31 	bl	8000ea4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e176      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x23a>
 800185c:	e01a      	b.n	8001894 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff fb1b 	bl	8000ea4 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff fb17 	bl	8000ea4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d903      	bls.n	8001888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e15c      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
 8001884:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b91      	ldr	r3, [pc, #580]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a4 	beq.w	80019ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a87      	ldr	r2, [pc, #540]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018d6:	4b7f      	ldr	r3, [pc, #508]	; (8001ad4 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7e      	ldr	r2, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fadf 	bl	8000ea4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fadb 	bl	8000ea4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e120      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fc:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x31a>
 8001910:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	e02d      	b.n	800197a <HAL_RCC_OscConfig+0x376>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x33c>
 8001926:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a69      	ldr	r2, [pc, #420]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a66      	ldr	r2, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	e01c      	b.n	800197a <HAL_RCC_OscConfig+0x376>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x35e>
 8001948:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a60      	ldr	r2, [pc, #384]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x376>
 8001962:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a5a      	ldr	r2, [pc, #360]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a57      	ldr	r2, [pc, #348]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d015      	beq.n	80019ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff fa8f 	bl	8000ea4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fa8b 	bl	8000ea4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ce      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ee      	beq.n	800198a <HAL_RCC_OscConfig+0x386>
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fa79 	bl	8000ea4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fa75 	bl	8000ea4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a4 	beq.w	8001b3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d06b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d149      	bne.n	8001a9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fa46 	bl	8000ea4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa42 	bl	8000ea4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e087      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	019b      	lsls	r3, r3, #6
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	3b01      	subs	r3, #1
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fa16 	bl	8000ea4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fa12 	bl	8000ea4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e057      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x478>
 8001a9a:	e04f      	b.n	8001b3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f9fc 	bl	8000ea4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f9f8 	bl	8000ea4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e03d      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_OscConfig+0x4cc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4ac>
 8001ace:	e035      	b.n	8001b3c <HAL_RCC_OscConfig+0x538>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x544>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d028      	beq.n	8001b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d121      	bne.n	8001b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d11a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d111      	bne.n	8001b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d0      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 020f 	bic.w	r2, r3, #15
 8001b7a:	4965      	ldr	r1, [pc, #404]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d040      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d115      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e073      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06b      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4936      	ldr	r1, [pc, #216]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7ff f930 	bl	8000ea4 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f92c 	bl	8000ea4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e053      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d210      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f821 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fee0 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	080076cc 	.word	0x080076cc
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b090      	sub	sp, #64	; 0x40
 8001d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d00d      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x40>
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	f200 80a1 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x34>
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d56:	e09b      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d5c:	e09b      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5e:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d62:	e098      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d028      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	2200      	movs	r2, #0
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	627a      	str	r2, [r7, #36]	; 0x24
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d90:	fb03 f201 	mul.w	r2, r3, r1
 8001d94:	2300      	movs	r3, #0
 8001d96:	fb00 f303 	mul.w	r3, r0, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a43      	ldr	r2, [pc, #268]	; (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da4:	460a      	mov	r2, r1
 8001da6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001daa:	4413      	add	r3, r2
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	2200      	movs	r2, #0
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	61fa      	str	r2, [r7, #28]
 8001db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dbe:	f7fe fa77 	bl	80002b0 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dca:	e053      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	617a      	str	r2, [r7, #20]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dde:	f04f 0b00 	mov.w	fp, #0
 8001de2:	4652      	mov	r2, sl
 8001de4:	465b      	mov	r3, fp
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	0159      	lsls	r1, r3, #5
 8001df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df4:	0150      	lsls	r0, r2, #5
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8001dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e16:	ebb2 0408 	subs.w	r4, r2, r8
 8001e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	00eb      	lsls	r3, r5, #3
 8001e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2c:	00e2      	lsls	r2, r4, #3
 8001e2e:	4614      	mov	r4, r2
 8001e30:	461d      	mov	r5, r3
 8001e32:	eb14 030a 	adds.w	r3, r4, sl
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	eb45 030b 	adc.w	r3, r5, fp
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	028b      	lsls	r3, r1, #10
 8001e4e:	4621      	mov	r1, r4
 8001e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e54:	4621      	mov	r1, r4
 8001e56:	028a      	lsls	r2, r1, #10
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	60fa      	str	r2, [r7, #12]
 8001e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e68:	f7fe fa22 	bl	80002b0 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3740      	adds	r7, #64	; 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	017d7840 	.word	0x017d7840

08001eb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	080076dc 	.word	0x080076dc

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	080076dc 	.word	0x080076dc

08001f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	220f      	movs	r2, #15
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_RCC_GetClockConfig+0x5c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_GetClockConfig+0x5c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_GetClockConfig+0x5c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_RCC_GetClockConfig+0x60>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 020f 	and.w	r2, r3, #15
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	601a      	str	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d012      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fae:	6093      	str	r3, [r2, #8]
 8001fb0:	4b66      	ldr	r3, [pc, #408]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	4964      	ldr	r1, [pc, #400]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d017      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	4959      	ldr	r1, [pc, #356]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002012:	4b4e      	ldr	r3, [pc, #312]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	494a      	ldr	r1, [pc, #296]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002030:	d101      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 808b 	beq.w	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002084:	f7fe ff0e 	bl	8000ea4 <HAL_GetTick>
 8002088:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7fe ff0a 	bl	8000ea4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e357      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d035      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d02e      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d114      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fed2 	bl	8000ea4 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fece 	bl	8000ea4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e319      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002132:	d111      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002142:	400b      	ands	r3, r1
 8002144:	4901      	ldr	r1, [pc, #4]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
 800214a:	e00b      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000
 8002154:	0ffffcff 	.word	0x0ffffcff
 8002158:	4baa      	ldr	r3, [pc, #680]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4aa9      	ldr	r2, [pc, #676]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002162:	6093      	str	r3, [r2, #8]
 8002164:	4ba7      	ldr	r3, [pc, #668]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	49a4      	ldr	r1, [pc, #656]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002172:	4313      	orrs	r3, r2
 8002174:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002182:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002188:	4a9e      	ldr	r2, [pc, #632]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002192:	4b9c      	ldr	r3, [pc, #624]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002194:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	4999      	ldr	r1, [pc, #612]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b0:	4b94      	ldr	r3, [pc, #592]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021be:	4991      	ldr	r1, [pc, #580]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d2:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e0:	4988      	ldr	r1, [pc, #544]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f4:	4b83      	ldr	r3, [pc, #524]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002202:	4980      	ldr	r1, [pc, #512]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002216:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4977      	ldr	r1, [pc, #476]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002238:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	496f      	ldr	r1, [pc, #444]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f023 020c 	bic.w	r2, r3, #12
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	4966      	ldr	r1, [pc, #408]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	495e      	ldr	r1, [pc, #376]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229e:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ac:	4955      	ldr	r1, [pc, #340]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022e2:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4944      	ldr	r1, [pc, #272]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	493c      	ldr	r1, [pc, #240]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	4933      	ldr	r1, [pc, #204]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002356:	492b      	ldr	r1, [pc, #172]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d011      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002378:	4922      	ldr	r1, [pc, #136]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b8:	4912      	ldr	r1, [pc, #72]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023dc:	4909      	ldr	r1, [pc, #36]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d006      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80d9 	beq.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a01      	ldr	r2, [pc, #4]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002404:	40023800 	.word	0x40023800
 8002408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240a:	f7fe fd4b 	bl	8000ea4 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002412:	f7fe fd47 	bl	8000ea4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e194      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002424:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11d      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002444:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002452:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002458:	0e1b      	lsrs	r3, r3, #24
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	019a      	lsls	r2, r3, #6
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	071b      	lsls	r3, r3, #28
 8002478:	4957      	ldr	r1, [pc, #348]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02e      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024aa:	d129      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ac:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c0:	0f1b      	lsrs	r3, r3, #28
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	019a      	lsls	r2, r3, #6
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	431a      	orrs	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	071b      	lsls	r3, r3, #28
 80024e0:	493d      	ldr	r1, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ee:	f023 021f 	bic.w	r2, r3, #31
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	3b01      	subs	r3, #1
 80024f8:	4937      	ldr	r1, [pc, #220]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01d      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002512:	0e1b      	lsrs	r3, r3, #24
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002520:	0f1b      	lsrs	r3, r3, #28
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	019a      	lsls	r2, r3, #6
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	431a      	orrs	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	071b      	lsls	r3, r3, #28
 8002540:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d011      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	019a      	lsls	r2, r3, #6
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	071b      	lsls	r3, r3, #28
 8002570:	4919      	ldr	r1, [pc, #100]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fc8e 	bl	8000ea4 <HAL_GetTick>
 8002588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800258c:	f7fe fc8a 	bl	8000ea4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0d7      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 80cd 	bne.w	800274c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025be:	f7fe fc71 	bl	8000ea4 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c6:	f7fe fc6d 	bl	8000ea4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d903      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0ba      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80025d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e8:	d0ed      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02e      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002612:	4b51      	ldr	r3, [pc, #324]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	0f1b      	lsrs	r3, r3, #28
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	019a      	lsls	r2, r3, #6
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	4944      	ldr	r1, [pc, #272]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800264e:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002654:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	493d      	ldr	r1, [pc, #244]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d022      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267c:	d11d      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	0e1b      	lsrs	r3, r3, #24
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	0f1b      	lsrs	r3, r3, #28
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4929      	ldr	r1, [pc, #164]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4917      	ldr	r1, [pc, #92]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	4911      	ldr	r1, [pc, #68]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002724:	f7fe fbbe 	bl	8000ea4 <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800272c:	f7fe fbba 	bl	8000ea4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e007      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800274a:	d1ef      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e049      	b.n	8002802 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f841 	bl	800280a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 fa00 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e054      	b.n	80028e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d01d      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_TIM_Base_Start_IT+0xdc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_TIM_Base_Start_IT+0xe0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <HAL_TIM_Base_Start_IT+0xe4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x80>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_TIM_Base_Start_IT+0xe8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d115      	bne.n	80028cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_TIM_Base_Start_IT+0xec>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d015      	beq.n	80028de <HAL_TIM_Base_Start_IT+0xbe>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d011      	beq.n	80028de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ca:	e008      	b.n	80028de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40001800 	.word	0x40001800
 800290c:	00010007 	.word	0x00010007

08002910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0202 	mvn.w	r2, #2
 800293c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f905 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8f7 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f908 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0204 	mvn.w	r2, #4
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8db 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8cd 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f8de 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0208 	mvn.w	r2, #8
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2204      	movs	r2, #4
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8b1 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8a3 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8b4 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d122      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0210 	mvn.w	r2, #16
 8002a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f887 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f879 	bl	8002b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f88a 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0201 	mvn.w	r2, #1
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd ffd8 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f91a 	bl	8002cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d10e      	bne.n	8002aee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d107      	bne.n	8002aee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f90d 	bl	8002d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f838 	bl	8002b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0220 	mvn.w	r2, #32
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8cd 	bl	8002ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d00f      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d027      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d023      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d017      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <TIM_Base_SetConfig+0x128>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <TIM_Base_SetConfig+0x12c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00f      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_Base_SetConfig+0x130>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIM_Base_SetConfig+0x134>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <TIM_Base_SetConfig+0x138>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d003      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <TIM_Base_SetConfig+0x13c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00
 8002cc4:	40010400 	.word	0x40010400
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800
 8002cd4:	40001800 	.word	0x40001800
 8002cd8:	40001c00 	.word	0x40001c00
 8002cdc:	40002000 	.word	0x40002000

08002ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd ffdc 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fbe6 	bl	800352c <UART_SetConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fe3e 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fec5 	bl	8003b38 <UART_CheckIdleState>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d171      	bne.n	8002eb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Transmit+0x24>
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e06a      	b.n	8002eb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2221      	movs	r2, #33	; 0x21
 8002dec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dee:	f7fe f859 	bl	8000ea4 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0c:	d108      	bne.n	8002e20 <HAL_UART_Transmit+0x68>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	e003      	b.n	8002e28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e28:	e02c      	b.n	8002e84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 feb6 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e038      	b.n	8002eb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e007      	b.n	8002e72 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1cc      	bne.n	8002e2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fe83 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e005      	b.n	8002eb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	; 0x28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d132      	bne.n	8002f3c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Receive_IT+0x24>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02b      	b.n	8002f3e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	613b      	str	r3, [r7, #16]
   return(result);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	623b      	str	r3, [r7, #32]
 8002f1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69f9      	ldr	r1, [r7, #28]
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e6      	bne.n	8002efa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fefe 	bl	8003d34 <UART_Start_Receive_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ba      	sub	sp, #232	; 0xe8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f76:	4013      	ands	r3, r2
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8297 	beq.w	80034d4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
      }
      return;
 8002fae:	e291      	b.n	80034d4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8117 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fca:	4b85      	ldr	r3, [pc, #532]	; (80031e0 <HAL_UART_IRQHandler+0x298>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 810a 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d011      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
 8003040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800307c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 81fd 	beq.w	80034d8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800311e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003122:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04f      	beq.n	80031ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fec8 	bl	8003ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d141      	bne.n	80031c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800316a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1d9      	bne.n	800313e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <HAL_UART_IRQHandler+0x29c>)
 8003198:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd ffde 	bl	8001160 <HAL_DMA_Abort_IT>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d017      	beq.n	80031da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	e00f      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9a0 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00b      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f99c 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e007      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f998 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80031d8:	e17e      	b.n	80034d8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031da:	bf00      	nop
    return;
 80031dc:	e17c      	b.n	80034d8 <HAL_UART_IRQHandler+0x590>
 80031de:	bf00      	nop
 80031e0:	04000120 	.word	0x04000120
 80031e4:	08003f89 	.word	0x08003f89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 814c 	bne.w	800348a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8145 	beq.w	800348a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 813e 	beq.w	800348a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	f040 80b6 	bne.w	8003392 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003232:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8150 	beq.w	80034dc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003246:	429a      	cmp	r2, r3
 8003248:	f080 8148 	bcs.w	80034dc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	f000 8086 	beq.w	8003370 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800328e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003292:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800329a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1da      	bne.n	8003264 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e1      	bne.n	80032ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800330e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800331c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e3      	bne.n	80032ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003340:	f023 0310 	bic.w	r3, r3, #16
 8003344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003352:	65bb      	str	r3, [r7, #88]	; 0x58
 8003354:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e4      	bne.n	8003330 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fe88 	bl	8001080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003382:	b29b      	uxth	r3, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8c2 	bl	8003514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003390:	e0a4      	b.n	80034dc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8096 	beq.w	80034e0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80033b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8091 	beq.w	80034e0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
 80033e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e4      	bne.n	80033be <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	623b      	str	r3, [r7, #32]
   return(result);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003418:	633a      	str	r2, [r7, #48]	; 0x30
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800341e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e3      	bne.n	80033f4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	60fb      	str	r3, [r7, #12]
   return(result);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f023 0310 	bic.w	r3, r3, #16
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	617b      	str	r3, [r7, #20]
   return(result);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e4      	bne.n	8003440 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f846 	bl	8003514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003488:	e02a      	b.n	80034e0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01c      	beq.n	80034e4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    }
    return;
 80034b2:	e017      	b.n	80034e4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_UART_IRQHandler+0x59e>
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fd71 	bl	8003fb4 <UART_EndTransmit_IT>
    return;
 80034d2:	e008      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034d4:	bf00      	nop
 80034d6:	e006      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80034d8:	bf00      	nop
 80034da:	e004      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80034e4:	bf00      	nop
  }

}
 80034e6:	37e8      	adds	r7, #232	; 0xe8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <UART_SetConfig+0x2c4>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	430b      	orrs	r3, r1
 8003562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a94      	ldr	r2, [pc, #592]	; (80037f4 <UART_SetConfig+0x2c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0xbe>
 80035a8:	4b93      	ldr	r3, [pc, #588]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d816      	bhi.n	80035e4 <UART_SetConfig+0xb8>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x90>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035d3 	.word	0x080035d3
 80035c8:	080035df 	.word	0x080035df
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e150      	b.n	8003874 <UART_SetConfig+0x348>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e14d      	b.n	8003874 <UART_SetConfig+0x348>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e14a      	b.n	8003874 <UART_SetConfig+0x348>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e147      	b.n	8003874 <UART_SetConfig+0x348>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e144      	b.n	8003874 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a83      	ldr	r2, [pc, #524]	; (80037fc <UART_SetConfig+0x2d0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d132      	bne.n	800365a <UART_SetConfig+0x12e>
 80035f4:	4b80      	ldr	r3, [pc, #512]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d828      	bhi.n	8003654 <UART_SetConfig+0x128>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0xdc>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003655 	.word	0x08003655
 8003610:	08003655 	.word	0x08003655
 8003614:	08003655 	.word	0x08003655
 8003618:	08003649 	.word	0x08003649
 800361c:	08003655 	.word	0x08003655
 8003620:	08003655 	.word	0x08003655
 8003624:	08003655 	.word	0x08003655
 8003628:	08003643 	.word	0x08003643
 800362c:	08003655 	.word	0x08003655
 8003630:	08003655 	.word	0x08003655
 8003634:	08003655 	.word	0x08003655
 8003638:	0800364f 	.word	0x0800364f
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e118      	b.n	8003874 <UART_SetConfig+0x348>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e115      	b.n	8003874 <UART_SetConfig+0x348>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e112      	b.n	8003874 <UART_SetConfig+0x348>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e10f      	b.n	8003874 <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e10c      	b.n	8003874 <UART_SetConfig+0x348>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a68      	ldr	r2, [pc, #416]	; (8003800 <UART_SetConfig+0x2d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0x17a>
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800366e:	2b30      	cmp	r3, #48	; 0x30
 8003670:	d013      	beq.n	800369a <UART_SetConfig+0x16e>
 8003672:	2b30      	cmp	r3, #48	; 0x30
 8003674:	d814      	bhi.n	80036a0 <UART_SetConfig+0x174>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x162>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d810      	bhi.n	80036a0 <UART_SetConfig+0x174>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <UART_SetConfig+0x15c>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d006      	beq.n	8003694 <UART_SetConfig+0x168>
 8003686:	e00b      	b.n	80036a0 <UART_SetConfig+0x174>
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e0f2      	b.n	8003874 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e0ef      	b.n	8003874 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e0ec      	b.n	8003874 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0e9      	b.n	8003874 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0e6      	b.n	8003874 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a56      	ldr	r2, [pc, #344]	; (8003804 <UART_SetConfig+0x2d8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d120      	bne.n	80036f2 <UART_SetConfig+0x1c6>
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ba:	2bc0      	cmp	r3, #192	; 0xc0
 80036bc:	d013      	beq.n	80036e6 <UART_SetConfig+0x1ba>
 80036be:	2bc0      	cmp	r3, #192	; 0xc0
 80036c0:	d814      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d009      	beq.n	80036da <UART_SetConfig+0x1ae>
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d810      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1a8>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d006      	beq.n	80036e0 <UART_SetConfig+0x1b4>
 80036d2:	e00b      	b.n	80036ec <UART_SetConfig+0x1c0>
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e0cc      	b.n	8003874 <UART_SetConfig+0x348>
 80036da:	2302      	movs	r3, #2
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e0c9      	b.n	8003874 <UART_SetConfig+0x348>
 80036e0:	2304      	movs	r3, #4
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0c6      	b.n	8003874 <UART_SetConfig+0x348>
 80036e6:	2308      	movs	r3, #8
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0c3      	b.n	8003874 <UART_SetConfig+0x348>
 80036ec:	2310      	movs	r3, #16
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0c0      	b.n	8003874 <UART_SetConfig+0x348>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	; (8003808 <UART_SetConfig+0x2dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d125      	bne.n	8003748 <UART_SetConfig+0x21c>
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370a:	d017      	beq.n	800373c <UART_SetConfig+0x210>
 800370c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003710:	d817      	bhi.n	8003742 <UART_SetConfig+0x216>
 8003712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003716:	d00b      	beq.n	8003730 <UART_SetConfig+0x204>
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d811      	bhi.n	8003742 <UART_SetConfig+0x216>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <UART_SetConfig+0x1fe>
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d006      	beq.n	8003736 <UART_SetConfig+0x20a>
 8003728:	e00b      	b.n	8003742 <UART_SetConfig+0x216>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e0a1      	b.n	8003874 <UART_SetConfig+0x348>
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e09e      	b.n	8003874 <UART_SetConfig+0x348>
 8003736:	2304      	movs	r3, #4
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e09b      	b.n	8003874 <UART_SetConfig+0x348>
 800373c:	2308      	movs	r3, #8
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e098      	b.n	8003874 <UART_SetConfig+0x348>
 8003742:	2310      	movs	r3, #16
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e095      	b.n	8003874 <UART_SetConfig+0x348>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <UART_SetConfig+0x2e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d125      	bne.n	800379e <UART_SetConfig+0x272>
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003760:	d017      	beq.n	8003792 <UART_SetConfig+0x266>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376c:	d00b      	beq.n	8003786 <UART_SetConfig+0x25a>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d811      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x254>
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x260>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x26c>
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e076      	b.n	8003874 <UART_SetConfig+0x348>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e073      	b.n	8003874 <UART_SetConfig+0x348>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e070      	b.n	8003874 <UART_SetConfig+0x348>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e06d      	b.n	8003874 <UART_SetConfig+0x348>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e06a      	b.n	8003874 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <UART_SetConfig+0x2e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d138      	bne.n	800381a <UART_SetConfig+0x2ee>
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b6:	d017      	beq.n	80037e8 <UART_SetConfig+0x2bc>
 80037b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037bc:	d82a      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d00b      	beq.n	80037dc <UART_SetConfig+0x2b0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d824      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <UART_SetConfig+0x2aa>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d006      	beq.n	80037e2 <UART_SetConfig+0x2b6>
 80037d4:	e01e      	b.n	8003814 <UART_SetConfig+0x2e8>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e04b      	b.n	8003874 <UART_SetConfig+0x348>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e048      	b.n	8003874 <UART_SetConfig+0x348>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e045      	b.n	8003874 <UART_SetConfig+0x348>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e042      	b.n	8003874 <UART_SetConfig+0x348>
 80037ee:	bf00      	nop
 80037f0:	efff69f3 	.word	0xefff69f3
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	40011400 	.word	0x40011400
 8003810:	40007800 	.word	0x40007800
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e02c      	b.n	8003874 <UART_SetConfig+0x348>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <UART_SetConfig+0x4bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d125      	bne.n	8003870 <UART_SetConfig+0x344>
 8003824:	4b71      	ldr	r3, [pc, #452]	; (80039ec <UART_SetConfig+0x4c0>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003832:	d017      	beq.n	8003864 <UART_SetConfig+0x338>
 8003834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003838:	d817      	bhi.n	800386a <UART_SetConfig+0x33e>
 800383a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383e:	d00b      	beq.n	8003858 <UART_SetConfig+0x32c>
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d811      	bhi.n	800386a <UART_SetConfig+0x33e>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <UART_SetConfig+0x326>
 800384a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384e:	d006      	beq.n	800385e <UART_SetConfig+0x332>
 8003850:	e00b      	b.n	800386a <UART_SetConfig+0x33e>
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e00d      	b.n	8003874 <UART_SetConfig+0x348>
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e00a      	b.n	8003874 <UART_SetConfig+0x348>
 800385e:	2304      	movs	r3, #4
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e007      	b.n	8003874 <UART_SetConfig+0x348>
 8003864:	2308      	movs	r3, #8
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x348>
 800386a:	2310      	movs	r3, #16
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e001      	b.n	8003874 <UART_SetConfig+0x348>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d15b      	bne.n	8003936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x3aa>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x360>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fb0a 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fb1a 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fa2d 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d074      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d916      	bls.n	8003930 <UART_SetConfig+0x404>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d212      	bcs.n	8003930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	4313      	orrs	r3, r2
 8003924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	89fa      	ldrh	r2, [r7, #14]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e04f      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	77bb      	strb	r3, [r7, #30]
 8003934:	e04c      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x462>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x418>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe faae 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7fe fabe 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <UART_SetConfig+0x4c4>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe f9d1 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d909      	bls.n	80039cc <UART_SetConfig+0x4a0>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d205      	bcs.n	80039cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40007c00 	.word	0x40007c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b48:	f7fd f9ac 	bl	8000ea4 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10e      	bne.n	8003b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f81b 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e011      	b.n	8003b9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b09c      	sub	sp, #112	; 0x70
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	e0a7      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	f000 80a3 	beq.w	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd f96f 	bl	8000ea4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13f      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e068      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d050      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d148      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e6      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cd2:	623a      	str	r2, [r7, #32]
 8003cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	69f9      	ldr	r1, [r7, #28]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e010      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f43f af48 	beq.w	8003bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3770      	adds	r7, #112	; 0x70
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b097      	sub	sp, #92	; 0x5c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d10e      	bne.n	8003d86 <UART_Start_Receive_IT+0x52>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <UART_Start_Receive_IT+0x48>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d7a:	e02d      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d84:	e028      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <UART_Start_Receive_IT+0x76>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <UART_Start_Receive_IT+0x6c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22ff      	movs	r2, #255	; 0xff
 8003d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d9e:	e01b      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	227f      	movs	r2, #127	; 0x7f
 8003da4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003da8:	e016      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db2:	d10d      	bne.n	8003dd0 <UART_Start_Receive_IT+0x9c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <UART_Start_Receive_IT+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	227f      	movs	r2, #127	; 0x7f
 8003dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dc4:	e008      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	223f      	movs	r2, #63	; 0x3f
 8003dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dce:	e003      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e08:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d107      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <UART_Start_Receive_IT+0x184>)
 8003e32:	669a      	str	r2, [r3, #104]	; 0x68
 8003e34:	e002      	b.n	8003e3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <UART_Start_Receive_IT+0x188>)
 8003e3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d019      	beq.n	8003e78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
 8003e64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_Start_Receive_IT+0x110>
 8003e76:	e018      	b.n	8003eaa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	375c      	adds	r7, #92	; 0x5c
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	0800416f 	.word	0x0800416f
 8003ebc:	08004009 	.word	0x08004009

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	; 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f7c:	bf00      	nop
 8003f7e:	3754      	adds	r7, #84	; 0x54
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff faaa 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fa76 	bl	80034ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004000:	bf00      	nop
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b096      	sub	sp, #88	; 0x58
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004016:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004020:	2b22      	cmp	r3, #34	; 0x22
 8004022:	f040 8098 	bne.w	8004156 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004030:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004034:	b2d9      	uxtb	r1, r3
 8004036:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800403a:	b2da      	uxtb	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	400a      	ands	r2, r1
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d17b      	bne.n	8004166 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
 800408e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	623b      	str	r3, [r7, #32]
   return(result);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c0:	633a      	str	r2, [r7, #48]	; 0x30
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d12e      	bne.n	800414e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	60fb      	str	r3, [r7, #12]
   return(result);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0310 	bic.w	r3, r3, #16
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	617b      	str	r3, [r7, #20]
   return(result);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e6      	bne.n	80040f6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d103      	bne.n	800413e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2210      	movs	r2, #16
 800413c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff f9e4 	bl	8003514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800414c:	e00b      	b.n	8004166 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f002 fae4 	bl	800671c <HAL_UART_RxCpltCallback>
}
 8004154:	e007      	b.n	8004166 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	619a      	str	r2, [r3, #24]
}
 8004166:	bf00      	nop
 8004168:	3758      	adds	r7, #88	; 0x58
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b096      	sub	sp, #88	; 0x58
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800417c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	f040 8098 	bne.w	80042bc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800419c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80041a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041a4:	4013      	ands	r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d17b      	bne.n	80042cc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
 80041f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	61fb      	str	r3, [r7, #28]
   return(result);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	64bb      	str	r3, [r7, #72]	; 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12e      	bne.n	80042b4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	60bb      	str	r3, [r7, #8]
   return(result);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	613b      	str	r3, [r7, #16]
   return(result);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e6      	bne.n	800425c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d103      	bne.n	80042a4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2210      	movs	r2, #16
 80042a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff f931 	bl	8003514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042b2:	e00b      	b.n	80042cc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f002 fa31 	bl	800671c <HAL_UART_RxCpltCallback>
}
 80042ba:	e007      	b.n	80042cc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	619a      	str	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	3758      	adds	r7, #88	; 0x58
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e6:	2b84      	cmp	r3, #132	; 0x84
 80042e8:	d005      	beq.n	80042f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	3303      	adds	r3, #3
 80042f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004308:	f000 ff68 	bl	80051dc <vTaskStartScheduler>
  
  return osOK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	bd80      	pop	{r7, pc}

08004312 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004314:	b089      	sub	sp, #36	; 0x24
 8004316:	af04      	add	r7, sp, #16
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <osThreadCreate+0x54>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01c      	beq.n	8004366 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685c      	ldr	r4, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681d      	ldr	r5, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691e      	ldr	r6, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffc8 	bl	80042d4 <makeFreeRtosPriority>
 8004344:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800434e:	9202      	str	r2, [sp, #8]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	9100      	str	r1, [sp, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4632      	mov	r2, r6
 8004358:	4629      	mov	r1, r5
 800435a:	4620      	mov	r0, r4
 800435c:	f000 fd6c 	bl	8004e38 <xTaskCreateStatic>
 8004360:	4603      	mov	r3, r0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e01c      	b.n	80043a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685c      	ldr	r4, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004372:	b29e      	uxth	r6, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ffaa 	bl	80042d4 <makeFreeRtosPriority>
 8004380:	4602      	mov	r2, r0
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	9200      	str	r2, [sp, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	4632      	mov	r2, r6
 800438e:	4629      	mov	r1, r5
 8004390:	4620      	mov	r0, r4
 8004392:	f000 fdb4 	bl	8004efe <xTaskCreate>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <osDelay+0x16>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e000      	b.n	80043c2 <osDelay+0x18>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fed4 	bl	8005170 <vTaskDelay>
  
  return osOK;
 80043c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f103 0208 	add.w	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 0208 	add.w	r2, r3, #8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 0208 	add.w	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d103      	bne.n	8004494 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e00c      	b.n	80044ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3308      	adds	r3, #8
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e002      	b.n	80044a2 <vListInsert+0x2e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d2f6      	bcs.n	800449c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	601a      	str	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6852      	ldr	r2, [r2, #4]
 8004506:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d103      	bne.n	800451a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10c      	bne.n	800456a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	b672      	cpsid	i
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	b662      	cpsie	i
 8004564:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800456a:	f001 fd97 	bl	800609c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	3b01      	subs	r3, #1
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d114      	bne.n	80045ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3310      	adds	r3, #16
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 f853 	bl	8005678 <xTaskRemoveFromEventList>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d012      	beq.n	80045fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <xQueueGenericReset+0xd0>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	e009      	b.n	80045fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3310      	adds	r3, #16
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff feef 	bl	80043d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff feea 	bl	80043d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045fe:	f001 fd81 	bl	8006104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10c      	bne.n	800463e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	b672      	cpsid	i
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	b662      	cpsie	i
 8004638:	613b      	str	r3, [r7, #16]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e004      	b.n	8004654 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3348      	adds	r3, #72	; 0x48
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fe4b 	bl	80062f4 <pvPortMalloc>
 800465e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d011      	beq.n	800468a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3348      	adds	r3, #72	; 0x48
 800466e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004678:	79fa      	ldrb	r2, [r7, #7]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f805 	bl	8004694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800468a:	69bb      	ldr	r3, [r7, #24]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046c2:	2101      	movs	r1, #1
 80046c4:	69b8      	ldr	r0, [r7, #24]
 80046c6:	f7ff ff39 	bl	800453c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	; 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10c      	bne.n	800470a <xQueueGenericSend+0x36>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	b672      	cpsid	i
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	b662      	cpsie	i
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <xQueueGenericSend+0x44>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <xQueueGenericSend+0x48>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <xQueueGenericSend+0x4a>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <xQueueGenericSend+0x68>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	b672      	cpsid	i
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	b662      	cpsie	i
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x76>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <xQueueGenericSend+0x7a>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSend+0x7c>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <xQueueGenericSend+0x9a>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	b672      	cpsid	i
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	b662      	cpsie	i
 8004768:	623b      	str	r3, [r7, #32]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476e:	f001 f947 	bl	8005a00 <xTaskGetSchedulerState>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <xQueueGenericSend+0xaa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <xQueueGenericSend+0xae>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <xQueueGenericSend+0xb0>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10c      	bne.n	80047a2 <xQueueGenericSend+0xce>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	b672      	cpsid	i
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	b662      	cpsie	i
 800479c:	61fb      	str	r3, [r7, #28]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047a2:	f001 fc7b 	bl	800609c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <xQueueGenericSend+0xe4>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d129      	bne.n	800480c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047be:	f000 fa51 	bl	8004c64 <prvCopyDataToQueue>
 80047c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	3324      	adds	r3, #36	; 0x24
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 ff51 	bl	8005678 <xTaskRemoveFromEventList>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d013      	beq.n	8004804 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047dc:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <xQueueGenericSend+0x208>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	e00a      	b.n	8004804 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <xQueueGenericSend+0x208>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004804:	f001 fc7e 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 8004808:	2301      	movs	r3, #1
 800480a:	e063      	b.n	80048d4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004812:	f001 fc77 	bl	8006104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004816:	2300      	movs	r3, #0
 8004818:	e05c      	b.n	80048d4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ff8b 	bl	8005740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800482e:	f001 fc69 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004832:	f000 fd37 	bl	80052a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004836:	f001 fc31 	bl	800609c <vPortEnterCritical>
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004840:	b25b      	sxtb	r3, r3
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d103      	bne.n	8004850 <xQueueGenericSend+0x17c>
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004856:	b25b      	sxtb	r3, r3
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d103      	bne.n	8004866 <xQueueGenericSend+0x192>
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004866:	f001 fc4d 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800486a:	1d3a      	adds	r2, r7, #4
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff7a 	bl	800576c <xTaskCheckForTimeOut>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d124      	bne.n	80048c8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800487e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004880:	f000 fac2 	bl	8004e08 <prvIsQueueFull>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	3310      	adds	r3, #16
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f000 feca 	bl	800562c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489a:	f000 fa4d 	bl	8004d38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800489e:	f000 fd0f 	bl	80052c0 <xTaskResumeAll>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f af7c 	bne.w	80047a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <xQueueGenericSend+0x208>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	e772      	b.n	80047a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048be:	f000 fa3b 	bl	8004d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048c2:	f000 fcfd 	bl	80052c0 <xTaskResumeAll>
 80048c6:	e76c      	b.n	80047a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ca:	f000 fa35 	bl	8004d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ce:	f000 fcf7 	bl	80052c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3738      	adds	r7, #56	; 0x38
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	; 0x38
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10c      	bne.n	800490e <xQueueGiveFromISR+0x2e>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	b672      	cpsid	i
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	b662      	cpsie	i
 8004908:	623b      	str	r3, [r7, #32]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <xQueueGiveFromISR+0x50>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	b672      	cpsid	i
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	b662      	cpsie	i
 800492a:	61fb      	str	r3, [r7, #28]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <xQueueGiveFromISR+0x60>
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <xQueueGiveFromISR+0x64>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <xQueueGiveFromISR+0x66>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10c      	bne.n	8004964 <xQueueGiveFromISR+0x84>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	b672      	cpsid	i
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	b662      	cpsie	i
 800495e:	61bb      	str	r3, [r7, #24]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004964:	f001 fc82 	bl	800626c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004968:	f3ef 8211 	mrs	r2, BASEPRI
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	b672      	cpsid	i
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	b662      	cpsie	i
 8004980:	617a      	str	r2, [r7, #20]
 8004982:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004984:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004994:	429a      	cmp	r2, r3
 8004996:	d22b      	bcs.n	80049f0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d112      	bne.n	80049da <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe59 	bl	8005678 <xTaskRemoveFromEventList>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e007      	b.n	80049ea <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049de:	3301      	adds	r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	b25a      	sxtb	r2, r3
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ea:	2301      	movs	r3, #1
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e001      	b.n	80049f4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3738      	adds	r7, #56	; 0x38
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	b672      	cpsid	i
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	b662      	cpsie	i
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	b672      	cpsid	i
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	b662      	cpsie	i
 8004a5e:	61fb      	str	r3, [r7, #28]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a64:	f000 ffcc 	bl	8005a00 <xTaskGetSchedulerState>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <xQueueSemaphoreTake+0x68>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <xQueueSemaphoreTake+0x6c>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <xQueueSemaphoreTake+0x6e>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	b672      	cpsid	i
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	b662      	cpsie	i
 8004a92:	61bb      	str	r3, [r7, #24]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a98:	f001 fb00 	bl	800609c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d024      	beq.n	8004af2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	1e5a      	subs	r2, r3, #1
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ab8:	f001 f968 	bl	8005d8c <pvTaskIncrementMutexHeldCount>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00f      	beq.n	8004aea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	3310      	adds	r3, #16
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fdd2 	bl	8005678 <xTaskRemoveFromEventList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ada:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <xQueueSemaphoreTake+0x224>)
 8004adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aea:	f001 fb0b 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e099      	b.n	8004c26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d113      	bne.n	8004b20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	b672      	cpsid	i
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	b662      	cpsie	i
 8004b12:	617b      	str	r3, [r7, #20]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b18:	f001 faf4 	bl	8006104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e082      	b.n	8004c26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b26:	f107 030c 	add.w	r3, r7, #12
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fe08 	bl	8005740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b34:	f001 fae6 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b38:	f000 fbb4 	bl	80052a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b3c:	f001 faae 	bl	800609c <vPortEnterCritical>
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d103      	bne.n	8004b56 <xQueueSemaphoreTake+0x14a>
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d103      	bne.n	8004b6c <xQueueSemaphoreTake+0x160>
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6c:	f001 faca 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b70:	463a      	mov	r2, r7
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fdf7 	bl	800576c <xTaskCheckForTimeOut>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d132      	bne.n	8004bea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b86:	f000 f929 	bl	8004ddc <prvIsQueueEmpty>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d026      	beq.n	8004bde <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004b98:	f001 fa80 	bl	800609c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 ff4b 	bl	8005a3c <xTaskPriorityInherit>
 8004ba6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ba8:	f001 faac 	bl	8006104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fd39 	bl	800562c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bbc:	f000 f8bc 	bl	8004d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc0:	f000 fb7e 	bl	80052c0 <xTaskResumeAll>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af66 	bne.w	8004a98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004bcc:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <xQueueSemaphoreTake+0x224>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	e75c      	b.n	8004a98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004be0:	f000 f8aa 	bl	8004d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004be4:	f000 fb6c 	bl	80052c0 <xTaskResumeAll>
 8004be8:	e756      	b.n	8004a98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bec:	f000 f8a4 	bl	8004d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bf0:	f000 fb66 	bl	80052c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf6:	f000 f8f1 	bl	8004ddc <prvIsQueueEmpty>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f43f af4b 	beq.w	8004a98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004c08:	f001 fa48 	bl	800609c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c0e:	f000 f811 	bl	8004c34 <prvGetDisinheritPriorityAfterTimeout>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f818 	bl	8005c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c20:	f001 fa70 	bl	8006104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3738      	adds	r7, #56	; 0x38
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e001      	b.n	8004c56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c56:	68fb      	ldr	r3, [r7, #12]
	}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d14d      	bne.n	8004d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 ff54 	bl	8005b3c <xTaskPriorityDisinherit>
 8004c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	e043      	b.n	8004d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d119      	bne.n	8004cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6858      	ldr	r0, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	461a      	mov	r2, r3
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	f001 ff44 	bl	8006b3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	441a      	add	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d32b      	bcc.n	8004d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	e026      	b.n	8004d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68d8      	ldr	r0, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	f001 ff2a 	bl	8006b3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	441a      	add	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d207      	bcs.n	8004d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d105      	bne.n	8004d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d2e:	697b      	ldr	r3, [r7, #20]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d40:	f001 f9ac 	bl	800609c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d4c:	e011      	b.n	8004d72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d012      	beq.n	8004d7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3324      	adds	r3, #36	; 0x24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fc8c 	bl	8005678 <xTaskRemoveFromEventList>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d66:	f000 fd67 	bl	8005838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dce9      	bgt.n	8004d4e <prvUnlockQueue+0x16>
 8004d7a:	e000      	b.n	8004d7e <prvUnlockQueue+0x46>
					break;
 8004d7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	22ff      	movs	r2, #255	; 0xff
 8004d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d86:	f001 f9bd 	bl	8006104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d8a:	f001 f987 	bl	800609c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d96:	e011      	b.n	8004dbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3310      	adds	r3, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fc67 	bl	8005678 <xTaskRemoveFromEventList>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004db0:	f000 fd42 	bl	8005838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db4:	7bbb      	ldrb	r3, [r7, #14]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dce9      	bgt.n	8004d98 <prvUnlockQueue+0x60>
 8004dc4:	e000      	b.n	8004dc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	22ff      	movs	r2, #255	; 0xff
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dd0:	f001 f998 	bl	8006104 <vPortExitCritical>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de4:	f001 f95a 	bl	800609c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e001      	b.n	8004dfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f001 f983 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e10:	f001 f944 	bl	800609c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d102      	bne.n	8004e26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e001      	b.n	8004e2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e2a:	f001 f96b 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	b672      	cpsid	i
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	b662      	cpsie	i
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10c      	bne.n	8004e86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	b672      	cpsid	i
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	b662      	cpsie	i
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e86:	2354      	movs	r3, #84	; 0x54
 8004e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b54      	cmp	r3, #84	; 0x54
 8004e8e:	d00c      	beq.n	8004eaa <xTaskCreateStatic+0x72>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	b672      	cpsid	i
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	b662      	cpsie	i
 8004ea4:	61bb      	str	r3, [r7, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <xTaskCreateStatic+0xb8>
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f850 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eea:	f000 f8d7 	bl	800509c <prvAddNewTaskToReadyList>
 8004eee:	e001      	b.n	8004ef4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef4:	697b      	ldr	r3, [r7, #20]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b08c      	sub	sp, #48	; 0x30
 8004f02:	af04      	add	r7, sp, #16
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f9ee 	bl	80062f4 <pvPortMalloc>
 8004f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f20:	2054      	movs	r0, #84	; 0x54
 8004f22:	f001 f9e7 	bl	80062f4 <pvPortMalloc>
 8004f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
 8004f34:	e005      	b.n	8004f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f001 faa6 	bl	8006488 <vPortFree>
 8004f3c:	e001      	b.n	8004f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f80e 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6c:	69f8      	ldr	r0, [r7, #28]
 8004f6e:	f000 f895 	bl	800509c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e002      	b.n	8004f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fa0:	440b      	add	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	b672      	cpsid	i
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	b662      	cpsie	i
 8004fce:	617b      	str	r3, [r7, #20]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01f      	beq.n	800501a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e012      	b.n	8005006 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	7819      	ldrb	r1, [r3, #0]
 8004fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	3334      	adds	r3, #52	; 0x34
 8004ff0:	460a      	mov	r2, r1
 8004ff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b0f      	cmp	r3, #15
 800500a:	d9e9      	bls.n	8004fe0 <prvInitialiseNewTask+0x58>
 800500c:	e000      	b.n	8005010 <prvInitialiseNewTask+0x88>
			{
				break;
 800500e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005018:	e003      	b.n	8005022 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	2b06      	cmp	r3, #6
 8005026:	d901      	bls.n	800502c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005028:	2306      	movs	r3, #6
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	3304      	adds	r3, #4
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff f9e5 	bl	8004412 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	3318      	adds	r3, #24
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f9e0 	bl	8004412 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	f1c3 0207 	rsb	r2, r3, #7
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	69b8      	ldr	r0, [r7, #24]
 800507c:	f000 ff00 	bl	8005e80 <pxPortInitialiseStack>
 8005080:	4602      	mov	r2, r0
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005092:	bf00      	nop
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050a4:	f000 fffa 	bl	800609c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <prvAddNewTaskToReadyList+0xb8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4a29      	ldr	r2, [pc, #164]	; (8005154 <prvAddNewTaskToReadyList+0xb8>)
 80050b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <prvAddNewTaskToReadyList+0xbc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ba:	4a27      	ldr	r2, [pc, #156]	; (8005158 <prvAddNewTaskToReadyList+0xbc>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050c0:	4b24      	ldr	r3, [pc, #144]	; (8005154 <prvAddNewTaskToReadyList+0xb8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d110      	bne.n	80050ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050c8:	f000 fbda 	bl	8005880 <prvInitialiseTaskLists>
 80050cc:	e00d      	b.n	80050ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050ce:	4b23      	ldr	r3, [pc, #140]	; (800515c <prvAddNewTaskToReadyList+0xc0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <prvAddNewTaskToReadyList+0xbc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d802      	bhi.n	80050ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050e4:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <prvAddNewTaskToReadyList+0xbc>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <prvAddNewTaskToReadyList+0xc4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <prvAddNewTaskToReadyList+0xc4>)
 80050f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	2201      	movs	r2, #1
 80050fa:	409a      	lsls	r2, r3
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <prvAddNewTaskToReadyList+0xc8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4313      	orrs	r3, r2
 8005102:	4a18      	ldr	r2, [pc, #96]	; (8005164 <prvAddNewTaskToReadyList+0xc8>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvAddNewTaskToReadyList+0xcc>)
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7ff f985 	bl	800442c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005122:	f000 ffef 	bl	8006104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <prvAddNewTaskToReadyList+0xc0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvAddNewTaskToReadyList+0xbc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	429a      	cmp	r2, r3
 800513a:	d207      	bcs.n	800514c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <prvAddNewTaskToReadyList+0xd0>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000089c 	.word	0x2000089c
 8005158:	2000079c 	.word	0x2000079c
 800515c:	200008a8 	.word	0x200008a8
 8005160:	200008b8 	.word	0x200008b8
 8005164:	200008a4 	.word	0x200008a4
 8005168:	200007a0 	.word	0x200007a0
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d019      	beq.n	80051b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <vTaskDelay+0x64>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <vTaskDelay+0x34>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	b672      	cpsid	i
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	b662      	cpsie	i
 800519e:	60bb      	str	r3, [r7, #8]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80051a4:	f000 f87e 	bl	80052a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051a8:	2100      	movs	r1, #0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fe02 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051b0:	f000 f886 	bl	80052c0 <xTaskResumeAll>
 80051b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <vTaskDelay+0x68>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	200008c4 	.word	0x200008c4
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ea:	463a      	mov	r2, r7
 80051ec:	1d39      	adds	r1, r7, #4
 80051ee:	f107 0308 	add.w	r3, r7, #8
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb f9de 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	9202      	str	r2, [sp, #8]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	2300      	movs	r3, #0
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	460a      	mov	r2, r1
 800520a:	4920      	ldr	r1, [pc, #128]	; (800528c <vTaskStartScheduler+0xb0>)
 800520c:	4820      	ldr	r0, [pc, #128]	; (8005290 <vTaskStartScheduler+0xb4>)
 800520e:	f7ff fe13 	bl	8004e38 <xTaskCreateStatic>
 8005212:	4603      	mov	r3, r0
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <vTaskStartScheduler+0xb8>)
 8005216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <vTaskStartScheduler+0xb8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e001      	b.n	800522a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d118      	bne.n	8005262 <vTaskStartScheduler+0x86>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	b672      	cpsid	i
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	b662      	cpsie	i
 8005244:	613b      	str	r3, [r7, #16]
}
 8005246:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <vTaskStartScheduler+0xbc>)
 800524a:	f04f 32ff 	mov.w	r2, #4294967295
 800524e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <vTaskStartScheduler+0xc0>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <vTaskStartScheduler+0xc4>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800525c:	f000 fea0 	bl	8005fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005260:	e010      	b.n	8005284 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d10c      	bne.n	8005284 <vTaskStartScheduler+0xa8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	b672      	cpsid	i
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	b662      	cpsie	i
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <vTaskStartScheduler+0xa6>
}
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	08007640 	.word	0x08007640
 8005290:	08005851 	.word	0x08005851
 8005294:	200008c0 	.word	0x200008c0
 8005298:	200008bc 	.word	0x200008bc
 800529c:	200008a8 	.word	0x200008a8
 80052a0:	200008a0 	.word	0x200008a0

080052a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <vTaskSuspendAll+0x18>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	4a03      	ldr	r2, [pc, #12]	; (80052bc <vTaskSuspendAll+0x18>)
 80052b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80052b2:	bf00      	nop
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	200008c4 	.word	0x200008c4

080052c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ce:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <xTaskResumeAll+0x118>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <xTaskResumeAll+0x30>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	b672      	cpsid	i
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	b662      	cpsie	i
 80052ea:	603b      	str	r3, [r7, #0]
}
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052f0:	f000 fed4 	bl	800609c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <xTaskResumeAll+0x118>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	4a37      	ldr	r2, [pc, #220]	; (80053d8 <xTaskResumeAll+0x118>)
 80052fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <xTaskResumeAll+0x118>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d161      	bne.n	80053ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005306:	4b35      	ldr	r3, [pc, #212]	; (80053dc <xTaskResumeAll+0x11c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d05d      	beq.n	80053ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800530e:	e02e      	b.n	800536e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005310:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <xTaskResumeAll+0x120>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3318      	adds	r3, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff f8e2 	bl	80044e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff f8dd 	bl	80044e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	2201      	movs	r2, #1
 8005332:	409a      	lsls	r2, r3
 8005334:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <xTaskResumeAll+0x124>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4313      	orrs	r3, r2
 800533a:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <xTaskResumeAll+0x124>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <xTaskResumeAll+0x128>)
 800534c:	441a      	add	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7ff f869 	bl	800442c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <xTaskResumeAll+0x12c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <xTaskResumeAll+0x130>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800536e:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <xTaskResumeAll+0x120>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1cc      	bne.n	8005310 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800537c:	f000 fb20 	bl	80059c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005380:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <xTaskResumeAll+0x134>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800538c:	f000 f836 	bl	80053fc <xTaskIncrementTick>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <xTaskResumeAll+0x130>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f1      	bne.n	800538c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <xTaskResumeAll+0x134>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <xTaskResumeAll+0x130>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <xTaskResumeAll+0x138>)
 80053bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053ca:	f000 fe9b 	bl	8006104 <vPortExitCritical>

	return xAlreadyYielded;
 80053ce:	68bb      	ldr	r3, [r7, #8]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200008c4 	.word	0x200008c4
 80053dc:	2000089c 	.word	0x2000089c
 80053e0:	2000085c 	.word	0x2000085c
 80053e4:	200008a4 	.word	0x200008a4
 80053e8:	200007a0 	.word	0x200007a0
 80053ec:	2000079c 	.word	0x2000079c
 80053f0:	200008b0 	.word	0x200008b0
 80053f4:	200008ac 	.word	0x200008ac
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005406:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <xTaskIncrementTick+0x148>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 808a 	bne.w	8005524 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005410:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <xTaskIncrementTick+0x14c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005418:	4a4b      	ldr	r2, [pc, #300]	; (8005548 <xTaskIncrementTick+0x14c>)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d122      	bne.n	800546a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005424:	4b49      	ldr	r3, [pc, #292]	; (800554c <xTaskIncrementTick+0x150>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <xTaskIncrementTick+0x4c>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	b672      	cpsid	i
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	b662      	cpsie	i
 8005442:	603b      	str	r3, [r7, #0]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xTaskIncrementTick+0x4a>
 8005448:	4b40      	ldr	r3, [pc, #256]	; (800554c <xTaskIncrementTick+0x150>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <xTaskIncrementTick+0x154>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3e      	ldr	r2, [pc, #248]	; (800554c <xTaskIncrementTick+0x150>)
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4a3e      	ldr	r2, [pc, #248]	; (8005550 <xTaskIncrementTick+0x154>)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <xTaskIncrementTick+0x158>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <xTaskIncrementTick+0x158>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	f000 faab 	bl	80059c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800546a:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <xTaskIncrementTick+0x15c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	429a      	cmp	r2, r3
 8005472:	d348      	bcc.n	8005506 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005474:	4b35      	ldr	r3, [pc, #212]	; (800554c <xTaskIncrementTick+0x150>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <xTaskIncrementTick+0x15c>)
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	601a      	str	r2, [r3, #0]
					break;
 8005486:	e03e      	b.n	8005506 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005488:	4b30      	ldr	r3, [pc, #192]	; (800554c <xTaskIncrementTick+0x150>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d203      	bcs.n	80054a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054a0:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <xTaskIncrementTick+0x15c>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054a6:	e02e      	b.n	8005506 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff f81a 	bl	80044e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3318      	adds	r3, #24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff f811 	bl	80044e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	2201      	movs	r2, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <xTaskIncrementTick+0x160>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <xTaskIncrementTick+0x160>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <xTaskIncrementTick+0x164>)
 80054e4:	441a      	add	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe ff9d 	bl	800442c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <xTaskIncrementTick+0x168>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3b9      	bcc.n	8005474 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005504:	e7b6      	b.n	8005474 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <xTaskIncrementTick+0x168>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4914      	ldr	r1, [pc, #80]	; (8005560 <xTaskIncrementTick+0x164>)
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d907      	bls.n	800552e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e004      	b.n	800552e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005524:	4b10      	ldr	r3, [pc, #64]	; (8005568 <xTaskIncrementTick+0x16c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a0f      	ldr	r2, [pc, #60]	; (8005568 <xTaskIncrementTick+0x16c>)
 800552c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <xTaskIncrementTick+0x170>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800553a:	697b      	ldr	r3, [r7, #20]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200008c4 	.word	0x200008c4
 8005548:	200008a0 	.word	0x200008a0
 800554c:	20000854 	.word	0x20000854
 8005550:	20000858 	.word	0x20000858
 8005554:	200008b4 	.word	0x200008b4
 8005558:	200008bc 	.word	0x200008bc
 800555c:	200008a4 	.word	0x200008a4
 8005560:	200007a0 	.word	0x200007a0
 8005564:	2000079c 	.word	0x2000079c
 8005568:	200008ac 	.word	0x200008ac
 800556c:	200008b0 	.word	0x200008b0

08005570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005576:	4b28      	ldr	r3, [pc, #160]	; (8005618 <vTaskSwitchContext+0xa8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800557e:	4b27      	ldr	r3, [pc, #156]	; (800561c <vTaskSwitchContext+0xac>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005584:	e041      	b.n	800560a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <vTaskSwitchContext+0xac>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <vTaskSwitchContext+0xb0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	fab3 f383 	clz	r3, r3
 8005598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	f1c3 031f 	rsb	r3, r3, #31
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	4920      	ldr	r1, [pc, #128]	; (8005624 <vTaskSwitchContext+0xb4>)
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10c      	bne.n	80055d0 <vTaskSwitchContext+0x60>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	b672      	cpsid	i
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	b662      	cpsie	i
 80055ca:	607b      	str	r3, [r7, #4]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <vTaskSwitchContext+0x5e>
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <vTaskSwitchContext+0xb4>)
 80055dc:	4413      	add	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3308      	adds	r3, #8
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d104      	bne.n	8005600 <vTaskSwitchContext+0x90>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <vTaskSwitchContext+0xb8>)
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	200008c4 	.word	0x200008c4
 800561c:	200008b0 	.word	0x200008b0
 8005620:	200008a4 	.word	0x200008a4
 8005624:	200007a0 	.word	0x200007a0
 8005628:	2000079c 	.word	0x2000079c

0800562c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <vTaskPlaceOnEventList+0x48>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3318      	adds	r3, #24
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fe ff08 	bl	8004474 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005664:	2101      	movs	r1, #1
 8005666:	6838      	ldr	r0, [r7, #0]
 8005668:	f000 fba4 	bl	8005db4 <prvAddCurrentTaskToDelayedList>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	2000079c 	.word	0x2000079c

08005678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	60fb      	str	r3, [r7, #12]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3318      	adds	r3, #24
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe ff1a 	bl	80044e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <xTaskRemoveFromEventList+0xb0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11c      	bne.n	80056f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3304      	adds	r3, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe ff11 	bl	80044e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	2201      	movs	r2, #1
 80056ca:	409a      	lsls	r2, r3
 80056cc:	4b17      	ldr	r3, [pc, #92]	; (800572c <xTaskRemoveFromEventList+0xb4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	4a16      	ldr	r2, [pc, #88]	; (800572c <xTaskRemoveFromEventList+0xb4>)
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <xTaskRemoveFromEventList+0xb8>)
 80056e4:	441a      	add	r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe fe9d 	bl	800442c <vListInsertEnd>
 80056f2:	e005      	b.n	8005700 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4619      	mov	r1, r3
 80056fa:	480e      	ldr	r0, [pc, #56]	; (8005734 <xTaskRemoveFromEventList+0xbc>)
 80056fc:	f7fe fe96 	bl	800442c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <xTaskRemoveFromEventList+0xc0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	429a      	cmp	r2, r3
 800570c:	d905      	bls.n	800571a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <xTaskRemoveFromEventList+0xc4>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e001      	b.n	800571e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200008c4 	.word	0x200008c4
 800572c:	200008a4 	.word	0x200008a4
 8005730:	200007a0 	.word	0x200007a0
 8005734:	2000085c 	.word	0x2000085c
 8005738:	2000079c 	.word	0x2000079c
 800573c:	200008b0 	.word	0x200008b0

08005740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <vTaskInternalSetTimeOutState+0x24>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <vTaskInternalSetTimeOutState+0x28>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	605a      	str	r2, [r3, #4]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	200008b4 	.word	0x200008b4
 8005768:	200008a0 	.word	0x200008a0

0800576c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10c      	bne.n	80057b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	b672      	cpsid	i
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	b662      	cpsie	i
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80057b6:	f000 fc71 	bl	800609c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ba:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <xTaskCheckForTimeOut+0xc4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d102      	bne.n	80057da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e023      	b.n	8005822 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <xTaskCheckForTimeOut+0xc8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d007      	beq.n	80057f6 <xTaskCheckForTimeOut+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d302      	bcc.n	80057f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e015      	b.n	8005822 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d20b      	bcs.n	8005818 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff97 	bl	8005740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e004      	b.n	8005822 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005822:	f000 fc6f 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8005826:	69fb      	ldr	r3, [r7, #28]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200008a0 	.word	0x200008a0
 8005834:	200008b4 	.word	0x200008b4

08005838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <vTaskMissedYield+0x14>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
}
 8005842:	bf00      	nop
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	200008b0 	.word	0x200008b0

08005850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005858:	f000 f852 	bl	8005900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <prvIdleTask+0x28>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d9f9      	bls.n	8005858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <prvIdleTask+0x2c>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005874:	e7f0      	b.n	8005858 <prvIdleTask+0x8>
 8005876:	bf00      	nop
 8005878:	200007a0 	.word	0x200007a0
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	e00c      	b.n	80058a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <prvInitialiseTaskLists+0x60>)
 8005898:	4413      	add	r3, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd99 	bl	80043d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3301      	adds	r3, #1
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d9ef      	bls.n	800588c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058ac:	480d      	ldr	r0, [pc, #52]	; (80058e4 <prvInitialiseTaskLists+0x64>)
 80058ae:	f7fe fd90 	bl	80043d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058b2:	480d      	ldr	r0, [pc, #52]	; (80058e8 <prvInitialiseTaskLists+0x68>)
 80058b4:	f7fe fd8d 	bl	80043d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058b8:	480c      	ldr	r0, [pc, #48]	; (80058ec <prvInitialiseTaskLists+0x6c>)
 80058ba:	f7fe fd8a 	bl	80043d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058be:	480c      	ldr	r0, [pc, #48]	; (80058f0 <prvInitialiseTaskLists+0x70>)
 80058c0:	f7fe fd87 	bl	80043d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058c4:	480b      	ldr	r0, [pc, #44]	; (80058f4 <prvInitialiseTaskLists+0x74>)
 80058c6:	f7fe fd84 	bl	80043d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <prvInitialiseTaskLists+0x78>)
 80058cc:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <prvInitialiseTaskLists+0x64>)
 80058ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <prvInitialiseTaskLists+0x7c>)
 80058d2:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <prvInitialiseTaskLists+0x68>)
 80058d4:	601a      	str	r2, [r3, #0]
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	200007a0 	.word	0x200007a0
 80058e4:	2000082c 	.word	0x2000082c
 80058e8:	20000840 	.word	0x20000840
 80058ec:	2000085c 	.word	0x2000085c
 80058f0:	20000870 	.word	0x20000870
 80058f4:	20000888 	.word	0x20000888
 80058f8:	20000854 	.word	0x20000854
 80058fc:	20000858 	.word	0x20000858

08005900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005906:	e019      	b.n	800593c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005908:	f000 fbc8 	bl	800609c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <prvCheckTasksWaitingTermination+0x50>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fde4 	bl	80044e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <prvCheckTasksWaitingTermination+0x54>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3b01      	subs	r3, #1
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <prvCheckTasksWaitingTermination+0x54>)
 8005926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <prvCheckTasksWaitingTermination+0x58>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3b01      	subs	r3, #1
 800592e:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <prvCheckTasksWaitingTermination+0x58>)
 8005930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005932:	f000 fbe7 	bl	8006104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f810 	bl	800595c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <prvCheckTasksWaitingTermination+0x58>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e1      	bne.n	8005908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000870 	.word	0x20000870
 8005954:	2000089c 	.word	0x2000089c
 8005958:	20000884 	.word	0x20000884

0800595c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fd88 	bl	8006488 <vPortFree>
				vPortFree( pxTCB );
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd85 	bl	8006488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800597e:	e01a      	b.n	80059b6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005986:	2b01      	cmp	r3, #1
 8005988:	d103      	bne.n	8005992 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fd7c 	bl	8006488 <vPortFree>
	}
 8005990:	e011      	b.n	80059b6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005998:	2b02      	cmp	r3, #2
 800599a:	d00c      	beq.n	80059b6 <prvDeleteTCB+0x5a>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	b672      	cpsid	i
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	b662      	cpsie	i
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <prvDeleteTCB+0x58>
	}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059d8:	e008      	b.n	80059ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000854 	.word	0x20000854
 80059fc:	200008bc 	.word	0x200008bc

08005a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <xTaskGetSchedulerState+0x34>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e008      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <xTaskGetSchedulerState+0x38>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e001      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a26:	687b      	ldr	r3, [r7, #4]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	200008a8 	.word	0x200008a8
 8005a38:	200008c4 	.word	0x200008c4

08005a3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d069      	beq.n	8005b26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <xTaskPriorityInherit+0xf4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d259      	bcs.n	8005b14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	db06      	blt.n	8005a76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a68:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <xTaskPriorityInherit+0xf4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f1c3 0207 	rsb	r2, r3, #7
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <xTaskPriorityInherit+0xf8>)
 8005a88:	4413      	add	r3, r2
 8005a8a:	4299      	cmp	r1, r3
 8005a8c:	d13a      	bne.n	8005b04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fd27 	bl	80044e6 <uxListRemove>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d115      	bne.n	8005aca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4924      	ldr	r1, [pc, #144]	; (8005b34 <xTaskPriorityInherit+0xf8>)
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xTaskPriorityInherit+0x8e>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <xTaskPriorityInherit+0xfc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <xTaskPriorityInherit+0xfc>)
 8005ac8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005aca:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <xTaskPriorityInherit+0xf4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <xTaskPriorityInherit+0xfc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <xTaskPriorityInherit+0xfc>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <xTaskPriorityInherit+0xf8>)
 8005af4:	441a      	add	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f7fe fc95 	bl	800442c <vListInsertEnd>
 8005b02:	e004      	b.n	8005b0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <xTaskPriorityInherit+0xf4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e008      	b.n	8005b26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <xTaskPriorityInherit+0xf4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d201      	bcs.n	8005b26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b22:	2301      	movs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b26:	68fb      	ldr	r3, [r7, #12]
	}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	2000079c 	.word	0x2000079c
 8005b34:	200007a0 	.word	0x200007a0
 8005b38:	200008a4 	.word	0x200008a4

08005b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d072      	beq.n	8005c38 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b52:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <xTaskPriorityDisinherit+0x108>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d00c      	beq.n	8005b76 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	b672      	cpsid	i
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	b662      	cpsie	i
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10c      	bne.n	8005b98 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	b672      	cpsid	i
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	b662      	cpsie	i
 8005b92:	60bb      	str	r3, [r7, #8]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d044      	beq.n	8005c38 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d140      	bne.n	8005c38 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fc93 	bl	80044e6 <uxListRemove>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d115      	bne.n	8005bf2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	491f      	ldr	r1, [pc, #124]	; (8005c48 <xTaskPriorityDisinherit+0x10c>)
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xTaskPriorityDisinherit+0xb6>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	2201      	movs	r2, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43da      	mvns	r2, r3
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <xTaskPriorityDisinherit+0x110>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4013      	ands	r3, r2
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <xTaskPriorityDisinherit+0x110>)
 8005bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	f1c3 0207 	rsb	r2, r3, #7
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <xTaskPriorityDisinherit+0x110>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <xTaskPriorityDisinherit+0x110>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <xTaskPriorityDisinherit+0x10c>)
 8005c26:	441a      	add	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fbfc 	bl	800442c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c38:	697b      	ldr	r3, [r7, #20]
	}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000079c 	.word	0x2000079c
 8005c48:	200007a0 	.word	0x200007a0
 8005c4c:	200008a4 	.word	0x200008a4

08005c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8087 	beq.w	8005d78 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	b672      	cpsid	i
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	b662      	cpsie	i
 8005c86:	60fb      	str	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d902      	bls.n	8005c9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e002      	b.n	8005ca2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d065      	beq.n	8005d78 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d160      	bne.n	8005d78 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cb6:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d10c      	bne.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	b672      	cpsid	i
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	b662      	cpsie	i
 8005cd4:	60bb      	str	r3, [r7, #8]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db04      	blt.n	8005cf8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f1c3 0207 	rsb	r2, r3, #7
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6959      	ldr	r1, [r3, #20]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	d134      	bne.n	8005d78 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fbe7 	bl	80044e6 <uxListRemove>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d115      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	4918      	ldr	r1, [pc, #96]	; (8005d84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	2201      	movs	r2, #1
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4013      	ands	r3, r2
 8005d46:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005d48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	2201      	movs	r2, #1
 8005d50:	409a      	lsls	r2, r3
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a06      	ldr	r2, [pc, #24]	; (8005d84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe fb5a 	bl	800442c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d78:	bf00      	nop
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	2000079c 	.word	0x2000079c
 8005d84:	200007a0 	.word	0x200007a0
 8005d88:	200008a4 	.word	0x200008a4

08005d8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9e:	3201      	adds	r2, #1
 8005da0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005da2:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005da4:	681b      	ldr	r3, [r3, #0]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	2000079c 	.word	0x2000079c

08005db4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc4:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fb8b 	bl	80044e6 <uxListRemove>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2201      	movs	r2, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43da      	mvns	r2, r3
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4013      	ands	r3, r2
 8005dea:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d10a      	bne.n	8005e0c <prvAddCurrentTaskToDelayedList+0x58>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	481a      	ldr	r0, [pc, #104]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e06:	f7fe fb11 	bl	800442c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e0a:	e026      	b.n	8005e5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4413      	add	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d209      	bcs.n	8005e38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fe fb1f 	bl	8004474 <vListInsert>
}
 8005e36:	e010      	b.n	8005e5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4619      	mov	r1, r3
 8005e44:	4610      	mov	r0, r2
 8005e46:	f7fe fb15 	bl	8004474 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d202      	bcs.n	8005e5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e54:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200008a0 	.word	0x200008a0
 8005e68:	2000079c 	.word	0x2000079c
 8005e6c:	200008a4 	.word	0x200008a4
 8005e70:	20000888 	.word	0x20000888
 8005e74:	20000858 	.word	0x20000858
 8005e78:	20000854 	.word	0x20000854
 8005e7c:	200008bc 	.word	0x200008bc

08005e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b04      	subs	r3, #4
 8005e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3b04      	subs	r3, #4
 8005e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005eb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <pxPortInitialiseStack+0x64>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b14      	subs	r3, #20
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f06f 0202 	mvn.w	r2, #2
 8005ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b20      	subs	r3, #32
 8005ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	08005ee9 	.word	0x08005ee9

08005ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <prvTaskExitError+0x5c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d00c      	beq.n	8005f16 <prvTaskExitError+0x2e>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	b672      	cpsid	i
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	b662      	cpsie	i
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <prvTaskExitError+0x2c>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	b672      	cpsid	i
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	b662      	cpsie	i
 8005f2a:	60bb      	str	r3, [r7, #8]
}
 8005f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f2e:	bf00      	nop
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0fc      	beq.n	8005f30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	2000000c 	.word	0x2000000c
	...

08005f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <pxCurrentTCBConst2>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	6808      	ldr	r0, [r1, #0]
 8005f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	f380 8809 	msr	PSP, r0
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8811 	msr	BASEPRI, r0
 8005f6a:	4770      	bx	lr
 8005f6c:	f3af 8000 	nop.w

08005f70 <pxCurrentTCBConst2>:
 8005f70:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop

08005f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f78:	4808      	ldr	r0, [pc, #32]	; (8005f9c <prvPortStartFirstTask+0x24>)
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	6800      	ldr	r0, [r0, #0]
 8005f7e:	f380 8808 	msr	MSP, r0
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8814 	msr	CONTROL, r0
 8005f8a:	b662      	cpsie	i
 8005f8c:	b661      	cpsie	f
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	df00      	svc	0
 8005f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f9a:	bf00      	nop
 8005f9c:	e000ed08 	.word	0xe000ed08

08005fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fa6:	4b37      	ldr	r3, [pc, #220]	; (8006084 <xPortStartScheduler+0xe4>)
 8005fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <xPortStartScheduler+0xe8>)
 8005fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <xPortStartScheduler+0xec>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd4:	e009      	b.n	8005fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005fd6:	4b2d      	ldr	r3, [pc, #180]	; (800608c <xPortStartScheduler+0xec>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <xPortStartScheduler+0xec>)
 8005fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d0ef      	beq.n	8005fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <xPortStartScheduler+0xec>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1c3 0307 	rsb	r3, r3, #7
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d00c      	beq.n	800601c <xPortStartScheduler+0x7c>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	b672      	cpsid	i
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	b662      	cpsie	i
 8006016:	60bb      	str	r3, [r7, #8]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <xPortStartScheduler+0xec>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	4a1a      	ldr	r2, [pc, #104]	; (800608c <xPortStartScheduler+0xec>)
 8006024:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006026:	4b19      	ldr	r3, [pc, #100]	; (800608c <xPortStartScheduler+0xec>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602e:	4a17      	ldr	r2, [pc, #92]	; (800608c <xPortStartScheduler+0xec>)
 8006030:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800603a:	4b15      	ldr	r3, [pc, #84]	; (8006090 <xPortStartScheduler+0xf0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <xPortStartScheduler+0xf0>)
 8006040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006044:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006046:	4b12      	ldr	r3, [pc, #72]	; (8006090 <xPortStartScheduler+0xf0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <xPortStartScheduler+0xf0>)
 800604c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006050:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006052:	f000 f8dd 	bl	8006210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <xPortStartScheduler+0xf4>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800605c:	f000 f8fc 	bl	8006258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <xPortStartScheduler+0xf8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0c      	ldr	r2, [pc, #48]	; (8006098 <xPortStartScheduler+0xf8>)
 8006066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800606a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800606c:	f7ff ff84 	bl	8005f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006070:	f7ff fa7e 	bl	8005570 <vTaskSwitchContext>
	prvTaskExitError();
 8006074:	f7ff ff38 	bl	8005ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	e000e400 	.word	0xe000e400
 8006088:	200008c8 	.word	0x200008c8
 800608c:	200008cc 	.word	0x200008cc
 8006090:	e000ed20 	.word	0xe000ed20
 8006094:	2000000c 	.word	0x2000000c
 8006098:	e000ef34 	.word	0xe000ef34

0800609c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	b672      	cpsid	i
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	b662      	cpsie	i
 80060b6:	607b      	str	r3, [r7, #4]
}
 80060b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <vPortEnterCritical+0x60>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <vPortEnterCritical+0x60>)
 80060c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060c4:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <vPortEnterCritical+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d111      	bne.n	80060f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <vPortEnterCritical+0x64>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <vPortEnterCritical+0x54>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <vPortEnterCritical+0x52>
	}
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	2000000c 	.word	0x2000000c
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <vPortExitCritical+0x54>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10c      	bne.n	800612c <vPortExitCritical+0x28>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	b672      	cpsid	i
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	b662      	cpsie	i
 8006126:	607b      	str	r3, [r7, #4]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <vPortExitCritical+0x54>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	4a09      	ldr	r2, [pc, #36]	; (8006158 <vPortExitCritical+0x54>)
 8006134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <vPortExitCritical+0x54>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <vPortExitCritical+0x46>
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f383 8811 	msr	BASEPRI, r3
}
 8006148:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	2000000c 	.word	0x2000000c
 800615c:	00000000 	.word	0x00000000

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006184:	b672      	cpsid	i
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	b662      	cpsie	i
 8006194:	f7ff f9ec 	bl	8005570 <vTaskSwitchContext>
 8006198:	f04f 0000 	mov.w	r0, #0
 800619c:	f380 8811 	msr	BASEPRI, r0
 80061a0:	bc09      	pop	{r0, r3}
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	f01e 0f10 	tst.w	lr, #16
 80061ae:	bf08      	it	eq
 80061b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b4:	f380 8809 	msr	PSP, r0
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop

080061c0 <pxCurrentTCBConst>:
 80061c0:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	b672      	cpsid	i
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	b662      	cpsie	i
 80061e2:	607b      	str	r3, [r7, #4]
}
 80061e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061e6:	f7ff f909 	bl	80053fc <xTaskIncrementTick>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <SysTick_Handler+0x44>)
 80061f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f383 8811 	msr	BASEPRI, r3
}
 8006202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <vPortSetupTimerInterrupt+0x34>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <vPortSetupTimerInterrupt+0x38>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <vPortSetupTimerInterrupt+0x3c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0a      	ldr	r2, [pc, #40]	; (8006250 <vPortSetupTimerInterrupt+0x40>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	099b      	lsrs	r3, r3, #6
 800622c:	4a09      	ldr	r2, [pc, #36]	; (8006254 <vPortSetupTimerInterrupt+0x44>)
 800622e:	3b01      	subs	r3, #1
 8006230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006232:	4b04      	ldr	r3, [pc, #16]	; (8006244 <vPortSetupTimerInterrupt+0x34>)
 8006234:	2207      	movs	r2, #7
 8006236:	601a      	str	r2, [r3, #0]
}
 8006238:	bf00      	nop
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	e000e010 	.word	0xe000e010
 8006248:	e000e018 	.word	0xe000e018
 800624c:	20000000 	.word	0x20000000
 8006250:	10624dd3 	.word	0x10624dd3
 8006254:	e000e014 	.word	0xe000e014

08006258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006258:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006268 <vPortEnableVFP+0x10>
 800625c:	6801      	ldr	r1, [r0, #0]
 800625e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006262:	6001      	str	r1, [r0, #0]
 8006264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006266:	bf00      	nop
 8006268:	e000ed88 	.word	0xe000ed88

0800626c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006272:	f3ef 8305 	mrs	r3, IPSR
 8006276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	d916      	bls.n	80062ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800627e:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <vPortValidateInterruptPriority+0x78>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <vPortValidateInterruptPriority+0x7c>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	7afa      	ldrb	r2, [r7, #11]
 800628e:	429a      	cmp	r2, r3
 8006290:	d20c      	bcs.n	80062ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	b672      	cpsid	i
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	b662      	cpsie	i
 80062a6:	607b      	str	r3, [r7, #4]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <vPortValidateInterruptPriority+0x80>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <vPortValidateInterruptPriority+0x84>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d90c      	bls.n	80062d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	b672      	cpsid	i
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	b662      	cpsie	i
 80062d0:	603b      	str	r3, [r7, #0]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <vPortValidateInterruptPriority+0x68>
	}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	e000e3f0 	.word	0xe000e3f0
 80062e8:	200008c8 	.word	0x200008c8
 80062ec:	e000ed0c 	.word	0xe000ed0c
 80062f0:	200008cc 	.word	0x200008cc

080062f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006300:	f7fe ffd0 	bl	80052a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006304:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <pvPortMalloc+0x180>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800630c:	f000 f91a 	bl	8006544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006310:	4b59      	ldr	r3, [pc, #356]	; (8006478 <pvPortMalloc+0x184>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 8092 	bne.w	8006442 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01f      	beq.n	8006364 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006324:	2208      	movs	r2, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	3308      	adds	r3, #8
 800633e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <pvPortMalloc+0x70>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06b      	beq.n	8006442 <pvPortMalloc+0x14e>
 800636a:	4b44      	ldr	r3, [pc, #272]	; (800647c <pvPortMalloc+0x188>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d866      	bhi.n	8006442 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <pvPortMalloc+0x18c>)
 8006376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006378:	4b41      	ldr	r3, [pc, #260]	; (8006480 <pvPortMalloc+0x18c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637e:	e004      	b.n	800638a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <pvPortMalloc+0xa8>
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f1      	bne.n	8006380 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <pvPortMalloc+0x180>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d04d      	beq.n	8006442 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2208      	movs	r2, #8
 80063ac:	4413      	add	r3, r2
 80063ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	2308      	movs	r3, #8
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d921      	bls.n	800640c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <pvPortMalloc+0x100>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	b672      	cpsid	i
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	b662      	cpsie	i
 80063ee:	613b      	str	r3, [r7, #16]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006406:	69b8      	ldr	r0, [r7, #24]
 8006408:	f000 f8fe 	bl	8006608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800640c:	4b1b      	ldr	r3, [pc, #108]	; (800647c <pvPortMalloc+0x188>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <pvPortMalloc+0x188>)
 8006418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800641a:	4b18      	ldr	r3, [pc, #96]	; (800647c <pvPortMalloc+0x188>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <pvPortMalloc+0x190>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d203      	bcs.n	800642e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <pvPortMalloc+0x188>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <pvPortMalloc+0x190>)
 800642c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <pvPortMalloc+0x184>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	431a      	orrs	r2, r3
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006442:	f7fe ff3d 	bl	80052c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <pvPortMalloc+0x176>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	b672      	cpsid	i
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	b662      	cpsie	i
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <pvPortMalloc+0x174>
	return pvReturn;
 800646a:	69fb      	ldr	r3, [r7, #28]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3728      	adds	r7, #40	; 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	200044d8 	.word	0x200044d8
 8006478:	200044e4 	.word	0x200044e4
 800647c:	200044dc 	.word	0x200044dc
 8006480:	200044d0 	.word	0x200044d0
 8006484:	200044e0 	.word	0x200044e0

08006488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04c      	beq.n	8006534 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800649a:	2308      	movs	r3, #8
 800649c:	425b      	negs	r3, r3
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b23      	ldr	r3, [pc, #140]	; (800653c <vPortFree+0xb4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10c      	bne.n	80064d0 <vPortFree+0x48>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	b672      	cpsid	i
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	b662      	cpsie	i
 80064ca:	60fb      	str	r3, [r7, #12]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <vPortFree+0x6a>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	b672      	cpsid	i
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	b662      	cpsie	i
 80064ec:	60bb      	str	r3, [r7, #8]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <vPortFree+0xb4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d019      	beq.n	8006534 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d115      	bne.n	8006534 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <vPortFree+0xb4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006518:	f7fe fec4 	bl	80052a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <vPortFree+0xb8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4413      	add	r3, r2
 8006526:	4a06      	ldr	r2, [pc, #24]	; (8006540 <vPortFree+0xb8>)
 8006528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f86c 	bl	8006608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006530:	f7fe fec6 	bl	80052c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006534:	bf00      	nop
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	200044e4 	.word	0x200044e4
 8006540:	200044dc 	.word	0x200044dc

08006544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800654a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800654e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006550:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <prvHeapInit+0xac>)
 8006552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3307      	adds	r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <prvHeapInit+0xac>)
 8006574:	4413      	add	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800657c:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <prvHeapInit+0xb0>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006582:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <prvHeapInit+0xb0>)
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006590:	2208      	movs	r2, #8
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <prvHeapInit+0xb4>)
 80065a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <prvHeapInit+0xb4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <prvHeapInit+0xb4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <prvHeapInit+0xb4>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <prvHeapInit+0xb8>)
 80065d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <prvHeapInit+0xbc>)
 80065da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <prvHeapInit+0xc0>)
 80065de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	200008d0 	.word	0x200008d0
 80065f4:	200044d0 	.word	0x200044d0
 80065f8:	200044d8 	.word	0x200044d8
 80065fc:	200044e0 	.word	0x200044e0
 8006600:	200044dc 	.word	0x200044dc
 8006604:	200044e4 	.word	0x200044e4

08006608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <prvInsertBlockIntoFreeList+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e002      	b.n	800661c <prvInsertBlockIntoFreeList+0x14>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d8f7      	bhi.n	8006616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d108      	bne.n	800664a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d118      	bne.n	8006690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d00d      	beq.n	8006686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	441a      	add	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e008      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e003      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d002      	beq.n	80066a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	200044d0 	.word	0x200044d0
 80066b8:	200044d8 	.word	0x200044d8

080066bc <drv_uart1_receive>:
#include "cmsis_os.h"

SemaphoreHandle_t sem;

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]


	HAL_UART_Receive_IT(&huart1, (uint8_t*)(pData), size);
 80066c8:	887b      	ldrh	r3, [r7, #2]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4807      	ldr	r0, [pc, #28]	; (80066ec <drv_uart1_receive+0x30>)
 80066d0:	f7fc fbf5 	bl	8002ebe <HAL_UART_Receive_IT>
	xSemaphoreTake(sem, portMAX_DELAY);
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <drv_uart1_receive+0x34>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f04f 31ff 	mov.w	r1, #4294967295
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe f995 	bl	8004a0c <xQueueSemaphoreTake>


	return 0;	// Life's too short for error management
 80066e2:	2300      	movs	r3, #0

}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000710 	.word	0x20000710
 80066f0:	200044e8 	.word	0x200044e8

080066f4 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8006700:	887a      	ldrh	r2, [r7, #2]
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4803      	ldr	r0, [pc, #12]	; (8006718 <drv_uart1_transmit+0x24>)
 800670a:	f7fc fb55 	bl	8002db8 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000710 	.word	0x20000710

0800671c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a0e      	ldr	r2, [pc, #56]	; (8006760 <HAL_UART_RxCpltCallback+0x44>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d114      	bne.n	8006756 <HAL_UART_RxCpltCallback+0x3a>
	{
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <HAL_UART_RxCpltCallback+0x48>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(sem, &xHigherPriorityTaskWoken);
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <HAL_UART_RxCpltCallback+0x4c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	490b      	ldr	r1, [pc, #44]	; (8006764 <HAL_UART_RxCpltCallback+0x48>)
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe f8d1 	bl	80048e0 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <HAL_UART_RxCpltCallback+0x48>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_UART_RxCpltCallback+0x3a>
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <HAL_UART_RxCpltCallback+0x50>)
 8006748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
	}
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000710 	.word	0x20000710
 8006764:	200044ec 	.word	0x200044ec
 8006768:	200044e8 	.word	0x200044e8
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b089      	sub	sp, #36	; 0x24
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e029      	b.n	80067d6 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4613      	mov	r3, r2
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3304      	adds	r3, #4
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	461c      	mov	r4, r3
 800679c:	68f9      	ldr	r1, [r7, #12]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4613      	mov	r3, r2
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	330c      	adds	r3, #12
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4623      	mov	r3, r4
 80067b2:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <sh_help+0x7c>)
 80067b4:	2128      	movs	r1, #40	; 0x28
 80067b6:	f000 f9d7 	bl	8006b68 <sniprintf>
 80067ba:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80067c8:	6939      	ldr	r1, [r7, #16]
 80067ca:	b289      	uxth	r1, r1
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	3301      	adds	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	429a      	cmp	r2, r3
 80067de:	dbd0      	blt.n	8006782 <sh_help+0x12>
	}

	return 0;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd90      	pop	{r4, r7, pc}
 80067ea:	bf00      	nop
 80067ec:	08007648 	.word	0x08007648

080067f0 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	int size = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8006808:	4a16      	ldr	r2, [pc, #88]	; (8006864 <shell_init+0x74>)
 800680a:	2128      	movs	r1, #40	; 0x28
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f9ab 	bl	8006b68 <sniprintf>
 8006812:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	b289      	uxth	r1, r1
 8006824:	4610      	mov	r0, r2
 8006826:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800682e:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <shell_init+0x78>)
 8006830:	2128      	movs	r1, #40	; 0x28
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f998 	bl	8006b68 <sniprintf>
 8006838:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	b289      	uxth	r1, r1
 800684a:	4610      	mov	r0, r2
 800684c:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <shell_init+0x7c>)
 8006850:	4a07      	ldr	r2, [pc, #28]	; (8006870 <shell_init+0x80>)
 8006852:	2168      	movs	r1, #104	; 0x68
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f80d 	bl	8006874 <shell_add>
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	08007654 	.word	0x08007654
 8006868:	0800767c 	.word	0x0800767c
 800686c:	080076a0 	.word	0x080076a0
 8006870:	08006771 	.word	0x08006771

08006874 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	460b      	mov	r3, r1
 8006882:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b3f      	cmp	r3, #63	; 0x3f
 800688a:	dc27      	bgt.n	80068dc <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3304      	adds	r3, #4
 800689e:	7afa      	ldrb	r2, [r7, #11]
 80068a0:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	4613      	mov	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	3308      	adds	r3, #8
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	330c      	adds	r3, #12
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]
		return 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	e001      	b.n	80068e0 <shell_add+0x6c>
	}

	return -1;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b090      	sub	sp, #64	; 0x40
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80068fe:	2300      	movs	r3, #0
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006902:	e041      	b.n	8006988 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006908:	4613      	mov	r3, r2
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3304      	adds	r3, #4
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800691a:	429a      	cmp	r2, r3
 800691c:	d131      	bne.n	8006982 <shell_exec+0x96>
			argc = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	e013      	b.n	8006954 <shell_exec+0x68>
				if(*p == ' ') {
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b20      	cmp	r3, #32
 8006932:	d10c      	bne.n	800694e <shell_exec+0x62>
					*p = '\0';
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006942:	3201      	adds	r2, #1
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	3340      	adds	r3, #64	; 0x40
 8006948:	443b      	add	r3, r7
 800694a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	3301      	adds	r3, #1
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
 8006954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <shell_exec+0x76>
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	2b07      	cmp	r3, #7
 8006960:	dde4      	ble.n	800692c <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3308      	adds	r3, #8
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f107 020c 	add.w	r2, r7, #12
 8006978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	e01d      	b.n	80069be <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	3301      	adds	r3, #1
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800698e:	429a      	cmp	r2, r3
 8006990:	dbb8      	blt.n	8006904 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8006998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800699c:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <shell_exec+0xdc>)
 800699e:	2128      	movs	r1, #40	; 0x28
 80069a0:	f000 f8e2 	bl	8006b68 <sniprintf>
 80069a4:	62f8      	str	r0, [r7, #44]	; 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80069b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b4:	b289      	uxth	r1, r1
 80069b6:	4610      	mov	r0, r2
 80069b8:	4798      	blx	r3
	return -1;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3740      	adds	r7, #64	; 0x40
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	080076a8 	.word	0x080076a8

080069cc <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80069e2:	2102      	movs	r1, #2
 80069e4:	483a      	ldr	r0, [pc, #232]	; (8006ad0 <shell_run+0x104>)
 80069e6:	4798      	blx	r3
		reading = 1;
 80069e8:	2301      	movs	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]

		while(reading) {
 80069ec:	e064      	b.n	8006ab8 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80069f4:	f107 020b 	add.w	r2, r7, #11
 80069f8:	2101      	movs	r1, #1
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
			int size;

			switch (c) {
 80069fe:	7afb      	ldrb	r3, [r7, #11]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d036      	beq.n	8006a72 <shell_run+0xa6>
 8006a04:	2b0d      	cmp	r3, #13
 8006a06:	d141      	bne.n	8006a8c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8006a0e:	4a31      	ldr	r2, [pc, #196]	; (8006ad4 <shell_run+0x108>)
 8006a10:	2128      	movs	r1, #40	; 0x28
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f8a8 	bl	8006b68 <sniprintf>
 8006a18:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	b289      	uxth	r1, r1
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	613a      	str	r2, [r7, #16]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4413      	add	r3, r2
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8006a4a:	4a23      	ldr	r2, [pc, #140]	; (8006ad8 <shell_run+0x10c>)
 8006a4c:	2128      	movs	r1, #40	; 0x28
 8006a4e:	f000 f88b 	bl	8006b68 <sniprintf>
 8006a52:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	b289      	uxth	r1, r1
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
				reading = 0;        //exit read loop
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]
				break;
 8006a70:	e022      	b.n	8006ab8 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd1e      	ble.n	8006ab6 <shell_run+0xea>
					pos--;          //remove it in buffer
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006a84:	2103      	movs	r1, #3
 8006a86:	4815      	ldr	r0, [pc, #84]	; (8006adc <shell_run+0x110>)
 8006a88:	4798      	blx	r3
				}
				break;
 8006a8a:	e014      	b.n	8006ab6 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b27      	cmp	r3, #39	; 0x27
 8006a90:	dc12      	bgt.n	8006ab8 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006a98:	f107 020b 	add.w	r2, r7, #11
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	613a      	str	r2, [r7, #16]
 8006aa8:	7af9      	ldrb	r1, [r7, #11]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	460a      	mov	r2, r1
 8006ab0:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8006ab4:	e000      	b.n	8006ab8 <shell_run+0xec>
				break;
 8006ab6:	bf00      	nop
		while(reading) {
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d197      	bne.n	80069ee <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ff10 	bl	80068ec <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8006acc:	e786      	b.n	80069dc <shell_run+0x10>
 8006ace:	bf00      	nop
 8006ad0:	080076e8 	.word	0x080076e8
 8006ad4:	080076c0 	.word	0x080076c0
 8006ad8:	080076c4 	.word	0x080076c4
 8006adc:	080076e4 	.word	0x080076e4

08006ae0 <atoi>:
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f000 b8fe 	b.w	8006ce4 <strtol>

08006ae8 <__errno>:
 8006ae8:	4b01      	ldr	r3, [pc, #4]	; (8006af0 <__errno+0x8>)
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	20000010 	.word	0x20000010

08006af4 <__libc_init_array>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	4d0d      	ldr	r5, [pc, #52]	; (8006b2c <__libc_init_array+0x38>)
 8006af8:	4c0d      	ldr	r4, [pc, #52]	; (8006b30 <__libc_init_array+0x3c>)
 8006afa:	1b64      	subs	r4, r4, r5
 8006afc:	10a4      	asrs	r4, r4, #2
 8006afe:	2600      	movs	r6, #0
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	d109      	bne.n	8006b18 <__libc_init_array+0x24>
 8006b04:	4d0b      	ldr	r5, [pc, #44]	; (8006b34 <__libc_init_array+0x40>)
 8006b06:	4c0c      	ldr	r4, [pc, #48]	; (8006b38 <__libc_init_array+0x44>)
 8006b08:	f000 fd36 	bl	8007578 <_init>
 8006b0c:	1b64      	subs	r4, r4, r5
 8006b0e:	10a4      	asrs	r4, r4, #2
 8006b10:	2600      	movs	r6, #0
 8006b12:	42a6      	cmp	r6, r4
 8006b14:	d105      	bne.n	8006b22 <__libc_init_array+0x2e>
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1c:	4798      	blx	r3
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7ee      	b.n	8006b00 <__libc_init_array+0xc>
 8006b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b26:	4798      	blx	r3
 8006b28:	3601      	adds	r6, #1
 8006b2a:	e7f2      	b.n	8006b12 <__libc_init_array+0x1e>
 8006b2c:	08007888 	.word	0x08007888
 8006b30:	08007888 	.word	0x08007888
 8006b34:	08007888 	.word	0x08007888
 8006b38:	0800788c 	.word	0x0800788c

08006b3c <memcpy>:
 8006b3c:	440a      	add	r2, r1
 8006b3e:	4291      	cmp	r1, r2
 8006b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b44:	d100      	bne.n	8006b48 <memcpy+0xc>
 8006b46:	4770      	bx	lr
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b52:	4291      	cmp	r1, r2
 8006b54:	d1f9      	bne.n	8006b4a <memcpy+0xe>
 8006b56:	bd10      	pop	{r4, pc}

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <sniprintf>:
 8006b68:	b40c      	push	{r2, r3}
 8006b6a:	b530      	push	{r4, r5, lr}
 8006b6c:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <sniprintf+0x64>)
 8006b6e:	1e0c      	subs	r4, r1, #0
 8006b70:	681d      	ldr	r5, [r3, #0]
 8006b72:	b09d      	sub	sp, #116	; 0x74
 8006b74:	da08      	bge.n	8006b88 <sniprintf+0x20>
 8006b76:	238b      	movs	r3, #139	; 0x8b
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7e:	b01d      	add	sp, #116	; 0x74
 8006b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b84:	b002      	add	sp, #8
 8006b86:	4770      	bx	lr
 8006b88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b90:	bf14      	ite	ne
 8006b92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b96:	4623      	moveq	r3, r4
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	9307      	str	r3, [sp, #28]
 8006b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ba0:	9002      	str	r0, [sp, #8]
 8006ba2:	9006      	str	r0, [sp, #24]
 8006ba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006baa:	ab21      	add	r3, sp, #132	; 0x84
 8006bac:	a902      	add	r1, sp, #8
 8006bae:	4628      	mov	r0, r5
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f000 f993 	bl	8006edc <_svfiprintf_r>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	bfbc      	itt	lt
 8006bba:	238b      	movlt	r3, #139	; 0x8b
 8006bbc:	602b      	strlt	r3, [r5, #0]
 8006bbe:	2c00      	cmp	r4, #0
 8006bc0:	d0dd      	beq.n	8006b7e <sniprintf+0x16>
 8006bc2:	9b02      	ldr	r3, [sp, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e7d9      	b.n	8006b7e <sniprintf+0x16>
 8006bca:	bf00      	nop
 8006bcc:	20000010 	.word	0x20000010

08006bd0 <strcpy>:
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bd6:	f803 2b01 	strb.w	r2, [r3], #1
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	d1f9      	bne.n	8006bd2 <strcpy+0x2>
 8006bde:	4770      	bx	lr

08006be0 <_strtol_l.constprop.0>:
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be6:	d001      	beq.n	8006bec <_strtol_l.constprop.0+0xc>
 8006be8:	2b24      	cmp	r3, #36	; 0x24
 8006bea:	d906      	bls.n	8006bfa <_strtol_l.constprop.0+0x1a>
 8006bec:	f7ff ff7c 	bl	8006ae8 <__errno>
 8006bf0:	2316      	movs	r3, #22
 8006bf2:	6003      	str	r3, [r0, #0]
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ce0 <_strtol_l.constprop.0+0x100>
 8006bfe:	460d      	mov	r5, r1
 8006c00:	462e      	mov	r6, r5
 8006c02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c06:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c0a:	f017 0708 	ands.w	r7, r7, #8
 8006c0e:	d1f7      	bne.n	8006c00 <_strtol_l.constprop.0+0x20>
 8006c10:	2c2d      	cmp	r4, #45	; 0x2d
 8006c12:	d132      	bne.n	8006c7a <_strtol_l.constprop.0+0x9a>
 8006c14:	782c      	ldrb	r4, [r5, #0]
 8006c16:	2701      	movs	r7, #1
 8006c18:	1cb5      	adds	r5, r6, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d05b      	beq.n	8006cd6 <_strtol_l.constprop.0+0xf6>
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d109      	bne.n	8006c36 <_strtol_l.constprop.0+0x56>
 8006c22:	2c30      	cmp	r4, #48	; 0x30
 8006c24:	d107      	bne.n	8006c36 <_strtol_l.constprop.0+0x56>
 8006c26:	782c      	ldrb	r4, [r5, #0]
 8006c28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c2c:	2c58      	cmp	r4, #88	; 0x58
 8006c2e:	d14d      	bne.n	8006ccc <_strtol_l.constprop.0+0xec>
 8006c30:	786c      	ldrb	r4, [r5, #1]
 8006c32:	2310      	movs	r3, #16
 8006c34:	3502      	adds	r5, #2
 8006c36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c3e:	f04f 0c00 	mov.w	ip, #0
 8006c42:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c46:	4666      	mov	r6, ip
 8006c48:	fb03 8a19 	mls	sl, r3, r9, r8
 8006c4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006c50:	f1be 0f09 	cmp.w	lr, #9
 8006c54:	d816      	bhi.n	8006c84 <_strtol_l.constprop.0+0xa4>
 8006c56:	4674      	mov	r4, lr
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	dd24      	ble.n	8006ca6 <_strtol_l.constprop.0+0xc6>
 8006c5c:	f1bc 0f00 	cmp.w	ip, #0
 8006c60:	db1e      	blt.n	8006ca0 <_strtol_l.constprop.0+0xc0>
 8006c62:	45b1      	cmp	r9, r6
 8006c64:	d31c      	bcc.n	8006ca0 <_strtol_l.constprop.0+0xc0>
 8006c66:	d101      	bne.n	8006c6c <_strtol_l.constprop.0+0x8c>
 8006c68:	45a2      	cmp	sl, r4
 8006c6a:	db19      	blt.n	8006ca0 <_strtol_l.constprop.0+0xc0>
 8006c6c:	fb06 4603 	mla	r6, r6, r3, r4
 8006c70:	f04f 0c01 	mov.w	ip, #1
 8006c74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c78:	e7e8      	b.n	8006c4c <_strtol_l.constprop.0+0x6c>
 8006c7a:	2c2b      	cmp	r4, #43	; 0x2b
 8006c7c:	bf04      	itt	eq
 8006c7e:	782c      	ldrbeq	r4, [r5, #0]
 8006c80:	1cb5      	addeq	r5, r6, #2
 8006c82:	e7ca      	b.n	8006c1a <_strtol_l.constprop.0+0x3a>
 8006c84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c88:	f1be 0f19 	cmp.w	lr, #25
 8006c8c:	d801      	bhi.n	8006c92 <_strtol_l.constprop.0+0xb2>
 8006c8e:	3c37      	subs	r4, #55	; 0x37
 8006c90:	e7e2      	b.n	8006c58 <_strtol_l.constprop.0+0x78>
 8006c92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c96:	f1be 0f19 	cmp.w	lr, #25
 8006c9a:	d804      	bhi.n	8006ca6 <_strtol_l.constprop.0+0xc6>
 8006c9c:	3c57      	subs	r4, #87	; 0x57
 8006c9e:	e7db      	b.n	8006c58 <_strtol_l.constprop.0+0x78>
 8006ca0:	f04f 3cff 	mov.w	ip, #4294967295
 8006ca4:	e7e6      	b.n	8006c74 <_strtol_l.constprop.0+0x94>
 8006ca6:	f1bc 0f00 	cmp.w	ip, #0
 8006caa:	da05      	bge.n	8006cb8 <_strtol_l.constprop.0+0xd8>
 8006cac:	2322      	movs	r3, #34	; 0x22
 8006cae:	6003      	str	r3, [r0, #0]
 8006cb0:	4646      	mov	r6, r8
 8006cb2:	b942      	cbnz	r2, 8006cc6 <_strtol_l.constprop.0+0xe6>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	e79e      	b.n	8006bf6 <_strtol_l.constprop.0+0x16>
 8006cb8:	b107      	cbz	r7, 8006cbc <_strtol_l.constprop.0+0xdc>
 8006cba:	4276      	negs	r6, r6
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d0f9      	beq.n	8006cb4 <_strtol_l.constprop.0+0xd4>
 8006cc0:	f1bc 0f00 	cmp.w	ip, #0
 8006cc4:	d000      	beq.n	8006cc8 <_strtol_l.constprop.0+0xe8>
 8006cc6:	1e69      	subs	r1, r5, #1
 8006cc8:	6011      	str	r1, [r2, #0]
 8006cca:	e7f3      	b.n	8006cb4 <_strtol_l.constprop.0+0xd4>
 8006ccc:	2430      	movs	r4, #48	; 0x30
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1b1      	bne.n	8006c36 <_strtol_l.constprop.0+0x56>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	e7af      	b.n	8006c36 <_strtol_l.constprop.0+0x56>
 8006cd6:	2c30      	cmp	r4, #48	; 0x30
 8006cd8:	d0a5      	beq.n	8006c26 <_strtol_l.constprop.0+0x46>
 8006cda:	230a      	movs	r3, #10
 8006cdc:	e7ab      	b.n	8006c36 <_strtol_l.constprop.0+0x56>
 8006cde:	bf00      	nop
 8006ce0:	080076ec 	.word	0x080076ec

08006ce4 <strtol>:
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4802      	ldr	r0, [pc, #8]	; (8006cf4 <strtol+0x10>)
 8006cec:	6800      	ldr	r0, [r0, #0]
 8006cee:	f7ff bf77 	b.w	8006be0 <_strtol_l.constprop.0>
 8006cf2:	bf00      	nop
 8006cf4:	20000010 	.word	0x20000010

08006cf8 <__retarget_lock_acquire_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_release_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <sbrk_aligned>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4e0e      	ldr	r6, [pc, #56]	; (8006d38 <sbrk_aligned+0x3c>)
 8006d00:	460c      	mov	r4, r1
 8006d02:	6831      	ldr	r1, [r6, #0]
 8006d04:	4605      	mov	r5, r0
 8006d06:	b911      	cbnz	r1, 8006d0e <sbrk_aligned+0x12>
 8006d08:	f000 fb7c 	bl	8007404 <_sbrk_r>
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fb77 	bl	8007404 <_sbrk_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d00a      	beq.n	8006d30 <sbrk_aligned+0x34>
 8006d1a:	1cc4      	adds	r4, r0, #3
 8006d1c:	f024 0403 	bic.w	r4, r4, #3
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d007      	beq.n	8006d34 <sbrk_aligned+0x38>
 8006d24:	1a21      	subs	r1, r4, r0
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fb6c 	bl	8007404 <_sbrk_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d101      	bne.n	8006d34 <sbrk_aligned+0x38>
 8006d30:	f04f 34ff 	mov.w	r4, #4294967295
 8006d34:	4620      	mov	r0, r4
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	200044f8 	.word	0x200044f8

08006d3c <_malloc_r>:
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	1ccd      	adds	r5, r1, #3
 8006d42:	f025 0503 	bic.w	r5, r5, #3
 8006d46:	3508      	adds	r5, #8
 8006d48:	2d0c      	cmp	r5, #12
 8006d4a:	bf38      	it	cc
 8006d4c:	250c      	movcc	r5, #12
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	4607      	mov	r7, r0
 8006d52:	db01      	blt.n	8006d58 <_malloc_r+0x1c>
 8006d54:	42a9      	cmp	r1, r5
 8006d56:	d905      	bls.n	8006d64 <_malloc_r+0x28>
 8006d58:	230c      	movs	r3, #12
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d64:	4e2e      	ldr	r6, [pc, #184]	; (8006e20 <_malloc_r+0xe4>)
 8006d66:	f000 fb77 	bl	8007458 <__malloc_lock>
 8006d6a:	6833      	ldr	r3, [r6, #0]
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	bb34      	cbnz	r4, 8006dbe <_malloc_r+0x82>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ffc2 	bl	8006cfc <sbrk_aligned>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	d14d      	bne.n	8006e1a <_malloc_r+0xde>
 8006d7e:	6834      	ldr	r4, [r6, #0]
 8006d80:	4626      	mov	r6, r4
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d140      	bne.n	8006e08 <_malloc_r+0xcc>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	eb04 0803 	add.w	r8, r4, r3
 8006d90:	f000 fb38 	bl	8007404 <_sbrk_r>
 8006d94:	4580      	cmp	r8, r0
 8006d96:	d13a      	bne.n	8006e0e <_malloc_r+0xd2>
 8006d98:	6821      	ldr	r1, [r4, #0]
 8006d9a:	3503      	adds	r5, #3
 8006d9c:	1a6d      	subs	r5, r5, r1
 8006d9e:	f025 0503 	bic.w	r5, r5, #3
 8006da2:	3508      	adds	r5, #8
 8006da4:	2d0c      	cmp	r5, #12
 8006da6:	bf38      	it	cc
 8006da8:	250c      	movcc	r5, #12
 8006daa:	4629      	mov	r1, r5
 8006dac:	4638      	mov	r0, r7
 8006dae:	f7ff ffa5 	bl	8006cfc <sbrk_aligned>
 8006db2:	3001      	adds	r0, #1
 8006db4:	d02b      	beq.n	8006e0e <_malloc_r+0xd2>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	442b      	add	r3, r5
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	e00e      	b.n	8006ddc <_malloc_r+0xa0>
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	1b52      	subs	r2, r2, r5
 8006dc2:	d41e      	bmi.n	8006e02 <_malloc_r+0xc6>
 8006dc4:	2a0b      	cmp	r2, #11
 8006dc6:	d916      	bls.n	8006df6 <_malloc_r+0xba>
 8006dc8:	1961      	adds	r1, r4, r5
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	6025      	str	r5, [r4, #0]
 8006dce:	bf18      	it	ne
 8006dd0:	6059      	strne	r1, [r3, #4]
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	bf08      	it	eq
 8006dd6:	6031      	streq	r1, [r6, #0]
 8006dd8:	5162      	str	r2, [r4, r5]
 8006dda:	604b      	str	r3, [r1, #4]
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f104 060b 	add.w	r6, r4, #11
 8006de2:	f000 fb3f 	bl	8007464 <__malloc_unlock>
 8006de6:	f026 0607 	bic.w	r6, r6, #7
 8006dea:	1d23      	adds	r3, r4, #4
 8006dec:	1af2      	subs	r2, r6, r3
 8006dee:	d0b6      	beq.n	8006d5e <_malloc_r+0x22>
 8006df0:	1b9b      	subs	r3, r3, r6
 8006df2:	50a3      	str	r3, [r4, r2]
 8006df4:	e7b3      	b.n	8006d5e <_malloc_r+0x22>
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	bf0c      	ite	eq
 8006dfc:	6032      	streq	r2, [r6, #0]
 8006dfe:	605a      	strne	r2, [r3, #4]
 8006e00:	e7ec      	b.n	8006ddc <_malloc_r+0xa0>
 8006e02:	4623      	mov	r3, r4
 8006e04:	6864      	ldr	r4, [r4, #4]
 8006e06:	e7b2      	b.n	8006d6e <_malloc_r+0x32>
 8006e08:	4634      	mov	r4, r6
 8006e0a:	6876      	ldr	r6, [r6, #4]
 8006e0c:	e7b9      	b.n	8006d82 <_malloc_r+0x46>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	4638      	mov	r0, r7
 8006e14:	f000 fb26 	bl	8007464 <__malloc_unlock>
 8006e18:	e7a1      	b.n	8006d5e <_malloc_r+0x22>
 8006e1a:	6025      	str	r5, [r4, #0]
 8006e1c:	e7de      	b.n	8006ddc <_malloc_r+0xa0>
 8006e1e:	bf00      	nop
 8006e20:	200044f4 	.word	0x200044f4

08006e24 <__ssputs_r>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	688e      	ldr	r6, [r1, #8]
 8006e2a:	429e      	cmp	r6, r3
 8006e2c:	4682      	mov	sl, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	4690      	mov	r8, r2
 8006e32:	461f      	mov	r7, r3
 8006e34:	d838      	bhi.n	8006ea8 <__ssputs_r+0x84>
 8006e36:	898a      	ldrh	r2, [r1, #12]
 8006e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e3c:	d032      	beq.n	8006ea4 <__ssputs_r+0x80>
 8006e3e:	6825      	ldr	r5, [r4, #0]
 8006e40:	6909      	ldr	r1, [r1, #16]
 8006e42:	eba5 0901 	sub.w	r9, r5, r1
 8006e46:	6965      	ldr	r5, [r4, #20]
 8006e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e50:	3301      	adds	r3, #1
 8006e52:	444b      	add	r3, r9
 8006e54:	106d      	asrs	r5, r5, #1
 8006e56:	429d      	cmp	r5, r3
 8006e58:	bf38      	it	cc
 8006e5a:	461d      	movcc	r5, r3
 8006e5c:	0553      	lsls	r3, r2, #21
 8006e5e:	d531      	bpl.n	8006ec4 <__ssputs_r+0xa0>
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7ff ff6b 	bl	8006d3c <_malloc_r>
 8006e66:	4606      	mov	r6, r0
 8006e68:	b950      	cbnz	r0, 8006e80 <__ssputs_r+0x5c>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	f8ca 3000 	str.w	r3, [sl]
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e80:	6921      	ldr	r1, [r4, #16]
 8006e82:	464a      	mov	r2, r9
 8006e84:	f7ff fe5a 	bl	8006b3c <memcpy>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	6126      	str	r6, [r4, #16]
 8006e96:	6165      	str	r5, [r4, #20]
 8006e98:	444e      	add	r6, r9
 8006e9a:	eba5 0509 	sub.w	r5, r5, r9
 8006e9e:	6026      	str	r6, [r4, #0]
 8006ea0:	60a5      	str	r5, [r4, #8]
 8006ea2:	463e      	mov	r6, r7
 8006ea4:	42be      	cmp	r6, r7
 8006ea6:	d900      	bls.n	8006eaa <__ssputs_r+0x86>
 8006ea8:	463e      	mov	r6, r7
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	4632      	mov	r2, r6
 8006eae:	4641      	mov	r1, r8
 8006eb0:	f000 fab8 	bl	8007424 <memmove>
 8006eb4:	68a3      	ldr	r3, [r4, #8]
 8006eb6:	1b9b      	subs	r3, r3, r6
 8006eb8:	60a3      	str	r3, [r4, #8]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	4433      	add	r3, r6
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7db      	b.n	8006e7c <__ssputs_r+0x58>
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	f000 fb1f 	bl	8007508 <_realloc_r>
 8006eca:	4606      	mov	r6, r0
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d1e1      	bne.n	8006e94 <__ssputs_r+0x70>
 8006ed0:	6921      	ldr	r1, [r4, #16]
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	f000 facc 	bl	8007470 <_free_r>
 8006ed8:	e7c7      	b.n	8006e6a <__ssputs_r+0x46>
	...

08006edc <_svfiprintf_r>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4698      	mov	r8, r3
 8006ee2:	898b      	ldrh	r3, [r1, #12]
 8006ee4:	061b      	lsls	r3, r3, #24
 8006ee6:	b09d      	sub	sp, #116	; 0x74
 8006ee8:	4607      	mov	r7, r0
 8006eea:	460d      	mov	r5, r1
 8006eec:	4614      	mov	r4, r2
 8006eee:	d50e      	bpl.n	8006f0e <_svfiprintf_r+0x32>
 8006ef0:	690b      	ldr	r3, [r1, #16]
 8006ef2:	b963      	cbnz	r3, 8006f0e <_svfiprintf_r+0x32>
 8006ef4:	2140      	movs	r1, #64	; 0x40
 8006ef6:	f7ff ff21 	bl	8006d3c <_malloc_r>
 8006efa:	6028      	str	r0, [r5, #0]
 8006efc:	6128      	str	r0, [r5, #16]
 8006efe:	b920      	cbnz	r0, 8006f0a <_svfiprintf_r+0x2e>
 8006f00:	230c      	movs	r3, #12
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e0d1      	b.n	80070ae <_svfiprintf_r+0x1d2>
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	616b      	str	r3, [r5, #20]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9309      	str	r3, [sp, #36]	; 0x24
 8006f12:	2320      	movs	r3, #32
 8006f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f1c:	2330      	movs	r3, #48	; 0x30
 8006f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070c8 <_svfiprintf_r+0x1ec>
 8006f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f26:	f04f 0901 	mov.w	r9, #1
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	469a      	mov	sl, r3
 8006f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f32:	b10a      	cbz	r2, 8006f38 <_svfiprintf_r+0x5c>
 8006f34:	2a25      	cmp	r2, #37	; 0x25
 8006f36:	d1f9      	bne.n	8006f2c <_svfiprintf_r+0x50>
 8006f38:	ebba 0b04 	subs.w	fp, sl, r4
 8006f3c:	d00b      	beq.n	8006f56 <_svfiprintf_r+0x7a>
 8006f3e:	465b      	mov	r3, fp
 8006f40:	4622      	mov	r2, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ff6d 	bl	8006e24 <__ssputs_r>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f000 80aa 	beq.w	80070a4 <_svfiprintf_r+0x1c8>
 8006f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f52:	445a      	add	r2, fp
 8006f54:	9209      	str	r2, [sp, #36]	; 0x24
 8006f56:	f89a 3000 	ldrb.w	r3, [sl]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80a2 	beq.w	80070a4 <_svfiprintf_r+0x1c8>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295
 8006f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f6a:	f10a 0a01 	add.w	sl, sl, #1
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	9307      	str	r3, [sp, #28]
 8006f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f76:	931a      	str	r3, [sp, #104]	; 0x68
 8006f78:	4654      	mov	r4, sl
 8006f7a:	2205      	movs	r2, #5
 8006f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f80:	4851      	ldr	r0, [pc, #324]	; (80070c8 <_svfiprintf_r+0x1ec>)
 8006f82:	f7f9 f945 	bl	8000210 <memchr>
 8006f86:	9a04      	ldr	r2, [sp, #16]
 8006f88:	b9d8      	cbnz	r0, 8006fc2 <_svfiprintf_r+0xe6>
 8006f8a:	06d0      	lsls	r0, r2, #27
 8006f8c:	bf44      	itt	mi
 8006f8e:	2320      	movmi	r3, #32
 8006f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f94:	0711      	lsls	r1, r2, #28
 8006f96:	bf44      	itt	mi
 8006f98:	232b      	movmi	r3, #43	; 0x2b
 8006f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa4:	d015      	beq.n	8006fd2 <_svfiprintf_r+0xf6>
 8006fa6:	9a07      	ldr	r2, [sp, #28]
 8006fa8:	4654      	mov	r4, sl
 8006faa:	2000      	movs	r0, #0
 8006fac:	f04f 0c0a 	mov.w	ip, #10
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fb6:	3b30      	subs	r3, #48	; 0x30
 8006fb8:	2b09      	cmp	r3, #9
 8006fba:	d94e      	bls.n	800705a <_svfiprintf_r+0x17e>
 8006fbc:	b1b0      	cbz	r0, 8006fec <_svfiprintf_r+0x110>
 8006fbe:	9207      	str	r2, [sp, #28]
 8006fc0:	e014      	b.n	8006fec <_svfiprintf_r+0x110>
 8006fc2:	eba0 0308 	sub.w	r3, r0, r8
 8006fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	46a2      	mov	sl, r4
 8006fd0:	e7d2      	b.n	8006f78 <_svfiprintf_r+0x9c>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	9103      	str	r1, [sp, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbb      	ittet	lt
 8006fde:	425b      	neglt	r3, r3
 8006fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fe4:	9307      	strge	r3, [sp, #28]
 8006fe6:	9307      	strlt	r3, [sp, #28]
 8006fe8:	bfb8      	it	lt
 8006fea:	9204      	strlt	r2, [sp, #16]
 8006fec:	7823      	ldrb	r3, [r4, #0]
 8006fee:	2b2e      	cmp	r3, #46	; 0x2e
 8006ff0:	d10c      	bne.n	800700c <_svfiprintf_r+0x130>
 8006ff2:	7863      	ldrb	r3, [r4, #1]
 8006ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff6:	d135      	bne.n	8007064 <_svfiprintf_r+0x188>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	1d1a      	adds	r2, r3, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	9203      	str	r2, [sp, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfb8      	it	lt
 8007004:	f04f 33ff 	movlt.w	r3, #4294967295
 8007008:	3402      	adds	r4, #2
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070d8 <_svfiprintf_r+0x1fc>
 8007010:	7821      	ldrb	r1, [r4, #0]
 8007012:	2203      	movs	r2, #3
 8007014:	4650      	mov	r0, sl
 8007016:	f7f9 f8fb 	bl	8000210 <memchr>
 800701a:	b140      	cbz	r0, 800702e <_svfiprintf_r+0x152>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	eba0 000a 	sub.w	r0, r0, sl
 8007022:	fa03 f000 	lsl.w	r0, r3, r0
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	4303      	orrs	r3, r0
 800702a:	3401      	adds	r4, #1
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007032:	4826      	ldr	r0, [pc, #152]	; (80070cc <_svfiprintf_r+0x1f0>)
 8007034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007038:	2206      	movs	r2, #6
 800703a:	f7f9 f8e9 	bl	8000210 <memchr>
 800703e:	2800      	cmp	r0, #0
 8007040:	d038      	beq.n	80070b4 <_svfiprintf_r+0x1d8>
 8007042:	4b23      	ldr	r3, [pc, #140]	; (80070d0 <_svfiprintf_r+0x1f4>)
 8007044:	bb1b      	cbnz	r3, 800708e <_svfiprintf_r+0x1b2>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	3307      	adds	r3, #7
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	3308      	adds	r3, #8
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	4433      	add	r3, r6
 8007056:	9309      	str	r3, [sp, #36]	; 0x24
 8007058:	e767      	b.n	8006f2a <_svfiprintf_r+0x4e>
 800705a:	fb0c 3202 	mla	r2, ip, r2, r3
 800705e:	460c      	mov	r4, r1
 8007060:	2001      	movs	r0, #1
 8007062:	e7a5      	b.n	8006fb0 <_svfiprintf_r+0xd4>
 8007064:	2300      	movs	r3, #0
 8007066:	3401      	adds	r4, #1
 8007068:	9305      	str	r3, [sp, #20]
 800706a:	4619      	mov	r1, r3
 800706c:	f04f 0c0a 	mov.w	ip, #10
 8007070:	4620      	mov	r0, r4
 8007072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007076:	3a30      	subs	r2, #48	; 0x30
 8007078:	2a09      	cmp	r2, #9
 800707a:	d903      	bls.n	8007084 <_svfiprintf_r+0x1a8>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0c5      	beq.n	800700c <_svfiprintf_r+0x130>
 8007080:	9105      	str	r1, [sp, #20]
 8007082:	e7c3      	b.n	800700c <_svfiprintf_r+0x130>
 8007084:	fb0c 2101 	mla	r1, ip, r1, r2
 8007088:	4604      	mov	r4, r0
 800708a:	2301      	movs	r3, #1
 800708c:	e7f0      	b.n	8007070 <_svfiprintf_r+0x194>
 800708e:	ab03      	add	r3, sp, #12
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	462a      	mov	r2, r5
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <_svfiprintf_r+0x1f8>)
 8007096:	a904      	add	r1, sp, #16
 8007098:	4638      	mov	r0, r7
 800709a:	f3af 8000 	nop.w
 800709e:	1c42      	adds	r2, r0, #1
 80070a0:	4606      	mov	r6, r0
 80070a2:	d1d6      	bne.n	8007052 <_svfiprintf_r+0x176>
 80070a4:	89ab      	ldrh	r3, [r5, #12]
 80070a6:	065b      	lsls	r3, r3, #25
 80070a8:	f53f af2c 	bmi.w	8006f04 <_svfiprintf_r+0x28>
 80070ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ae:	b01d      	add	sp, #116	; 0x74
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	ab03      	add	r3, sp, #12
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	462a      	mov	r2, r5
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <_svfiprintf_r+0x1f8>)
 80070bc:	a904      	add	r1, sp, #16
 80070be:	4638      	mov	r0, r7
 80070c0:	f000 f87a 	bl	80071b8 <_printf_i>
 80070c4:	e7eb      	b.n	800709e <_svfiprintf_r+0x1c2>
 80070c6:	bf00      	nop
 80070c8:	0800784c 	.word	0x0800784c
 80070cc:	08007856 	.word	0x08007856
 80070d0:	00000000 	.word	0x00000000
 80070d4:	08006e25 	.word	0x08006e25
 80070d8:	08007852 	.word	0x08007852

080070dc <_printf_common>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	4616      	mov	r6, r2
 80070e2:	4699      	mov	r9, r3
 80070e4:	688a      	ldr	r2, [r1, #8]
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfb8      	it	lt
 80070f0:	4613      	movlt	r3, r2
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070f8:	4607      	mov	r7, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	b10a      	cbz	r2, 8007102 <_printf_common+0x26>
 80070fe:	3301      	adds	r3, #1
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	0699      	lsls	r1, r3, #26
 8007106:	bf42      	ittt	mi
 8007108:	6833      	ldrmi	r3, [r6, #0]
 800710a:	3302      	addmi	r3, #2
 800710c:	6033      	strmi	r3, [r6, #0]
 800710e:	6825      	ldr	r5, [r4, #0]
 8007110:	f015 0506 	ands.w	r5, r5, #6
 8007114:	d106      	bne.n	8007124 <_printf_common+0x48>
 8007116:	f104 0a19 	add.w	sl, r4, #25
 800711a:	68e3      	ldr	r3, [r4, #12]
 800711c:	6832      	ldr	r2, [r6, #0]
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	42ab      	cmp	r3, r5
 8007122:	dc26      	bgt.n	8007172 <_printf_common+0x96>
 8007124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007128:	1e13      	subs	r3, r2, #0
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	bf18      	it	ne
 800712e:	2301      	movne	r3, #1
 8007130:	0692      	lsls	r2, r2, #26
 8007132:	d42b      	bmi.n	800718c <_printf_common+0xb0>
 8007134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007138:	4649      	mov	r1, r9
 800713a:	4638      	mov	r0, r7
 800713c:	47c0      	blx	r8
 800713e:	3001      	adds	r0, #1
 8007140:	d01e      	beq.n	8007180 <_printf_common+0xa4>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	68e5      	ldr	r5, [r4, #12]
 8007146:	6832      	ldr	r2, [r6, #0]
 8007148:	f003 0306 	and.w	r3, r3, #6
 800714c:	2b04      	cmp	r3, #4
 800714e:	bf08      	it	eq
 8007150:	1aad      	subeq	r5, r5, r2
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	bf0c      	ite	eq
 8007158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800715c:	2500      	movne	r5, #0
 800715e:	4293      	cmp	r3, r2
 8007160:	bfc4      	itt	gt
 8007162:	1a9b      	subgt	r3, r3, r2
 8007164:	18ed      	addgt	r5, r5, r3
 8007166:	2600      	movs	r6, #0
 8007168:	341a      	adds	r4, #26
 800716a:	42b5      	cmp	r5, r6
 800716c:	d11a      	bne.n	80071a4 <_printf_common+0xc8>
 800716e:	2000      	movs	r0, #0
 8007170:	e008      	b.n	8007184 <_printf_common+0xa8>
 8007172:	2301      	movs	r3, #1
 8007174:	4652      	mov	r2, sl
 8007176:	4649      	mov	r1, r9
 8007178:	4638      	mov	r0, r7
 800717a:	47c0      	blx	r8
 800717c:	3001      	adds	r0, #1
 800717e:	d103      	bne.n	8007188 <_printf_common+0xac>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007188:	3501      	adds	r5, #1
 800718a:	e7c6      	b.n	800711a <_printf_common+0x3e>
 800718c:	18e1      	adds	r1, r4, r3
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	2030      	movs	r0, #48	; 0x30
 8007192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007196:	4422      	add	r2, r4
 8007198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800719c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a0:	3302      	adds	r3, #2
 80071a2:	e7c7      	b.n	8007134 <_printf_common+0x58>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4622      	mov	r2, r4
 80071a8:	4649      	mov	r1, r9
 80071aa:	4638      	mov	r0, r7
 80071ac:	47c0      	blx	r8
 80071ae:	3001      	adds	r0, #1
 80071b0:	d0e6      	beq.n	8007180 <_printf_common+0xa4>
 80071b2:	3601      	adds	r6, #1
 80071b4:	e7d9      	b.n	800716a <_printf_common+0x8e>
	...

080071b8 <_printf_i>:
 80071b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	7e0f      	ldrb	r7, [r1, #24]
 80071be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071c0:	2f78      	cmp	r7, #120	; 0x78
 80071c2:	4691      	mov	r9, r2
 80071c4:	4680      	mov	r8, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	469a      	mov	sl, r3
 80071ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ce:	d807      	bhi.n	80071e0 <_printf_i+0x28>
 80071d0:	2f62      	cmp	r7, #98	; 0x62
 80071d2:	d80a      	bhi.n	80071ea <_printf_i+0x32>
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	f000 80d8 	beq.w	800738a <_printf_i+0x1d2>
 80071da:	2f58      	cmp	r7, #88	; 0x58
 80071dc:	f000 80a3 	beq.w	8007326 <_printf_i+0x16e>
 80071e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071e8:	e03a      	b.n	8007260 <_printf_i+0xa8>
 80071ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ee:	2b15      	cmp	r3, #21
 80071f0:	d8f6      	bhi.n	80071e0 <_printf_i+0x28>
 80071f2:	a101      	add	r1, pc, #4	; (adr r1, 80071f8 <_printf_i+0x40>)
 80071f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007265 	.word	0x08007265
 8007200:	080071e1 	.word	0x080071e1
 8007204:	080071e1 	.word	0x080071e1
 8007208:	080071e1 	.word	0x080071e1
 800720c:	080071e1 	.word	0x080071e1
 8007210:	08007265 	.word	0x08007265
 8007214:	080071e1 	.word	0x080071e1
 8007218:	080071e1 	.word	0x080071e1
 800721c:	080071e1 	.word	0x080071e1
 8007220:	080071e1 	.word	0x080071e1
 8007224:	08007371 	.word	0x08007371
 8007228:	08007295 	.word	0x08007295
 800722c:	08007353 	.word	0x08007353
 8007230:	080071e1 	.word	0x080071e1
 8007234:	080071e1 	.word	0x080071e1
 8007238:	08007393 	.word	0x08007393
 800723c:	080071e1 	.word	0x080071e1
 8007240:	08007295 	.word	0x08007295
 8007244:	080071e1 	.word	0x080071e1
 8007248:	080071e1 	.word	0x080071e1
 800724c:	0800735b 	.word	0x0800735b
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	1d1a      	adds	r2, r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	602a      	str	r2, [r5, #0]
 8007258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007260:	2301      	movs	r3, #1
 8007262:	e0a3      	b.n	80073ac <_printf_i+0x1f4>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	6829      	ldr	r1, [r5, #0]
 8007268:	0606      	lsls	r6, r0, #24
 800726a:	f101 0304 	add.w	r3, r1, #4
 800726e:	d50a      	bpl.n	8007286 <_printf_i+0xce>
 8007270:	680e      	ldr	r6, [r1, #0]
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	2e00      	cmp	r6, #0
 8007276:	da03      	bge.n	8007280 <_printf_i+0xc8>
 8007278:	232d      	movs	r3, #45	; 0x2d
 800727a:	4276      	negs	r6, r6
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007280:	485e      	ldr	r0, [pc, #376]	; (80073fc <_printf_i+0x244>)
 8007282:	230a      	movs	r3, #10
 8007284:	e019      	b.n	80072ba <_printf_i+0x102>
 8007286:	680e      	ldr	r6, [r1, #0]
 8007288:	602b      	str	r3, [r5, #0]
 800728a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800728e:	bf18      	it	ne
 8007290:	b236      	sxthne	r6, r6
 8007292:	e7ef      	b.n	8007274 <_printf_i+0xbc>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6029      	str	r1, [r5, #0]
 800729c:	0601      	lsls	r1, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xec>
 80072a0:	681e      	ldr	r6, [r3, #0]
 80072a2:	e002      	b.n	80072aa <_printf_i+0xf2>
 80072a4:	0646      	lsls	r6, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xe8>
 80072a8:	881e      	ldrh	r6, [r3, #0]
 80072aa:	4854      	ldr	r0, [pc, #336]	; (80073fc <_printf_i+0x244>)
 80072ac:	2f6f      	cmp	r7, #111	; 0x6f
 80072ae:	bf0c      	ite	eq
 80072b0:	2308      	moveq	r3, #8
 80072b2:	230a      	movne	r3, #10
 80072b4:	2100      	movs	r1, #0
 80072b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ba:	6865      	ldr	r5, [r4, #4]
 80072bc:	60a5      	str	r5, [r4, #8]
 80072be:	2d00      	cmp	r5, #0
 80072c0:	bfa2      	ittt	ge
 80072c2:	6821      	ldrge	r1, [r4, #0]
 80072c4:	f021 0104 	bicge.w	r1, r1, #4
 80072c8:	6021      	strge	r1, [r4, #0]
 80072ca:	b90e      	cbnz	r6, 80072d0 <_printf_i+0x118>
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	d04d      	beq.n	800736c <_printf_i+0x1b4>
 80072d0:	4615      	mov	r5, r2
 80072d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072d6:	fb03 6711 	mls	r7, r3, r1, r6
 80072da:	5dc7      	ldrb	r7, [r0, r7]
 80072dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072e0:	4637      	mov	r7, r6
 80072e2:	42bb      	cmp	r3, r7
 80072e4:	460e      	mov	r6, r1
 80072e6:	d9f4      	bls.n	80072d2 <_printf_i+0x11a>
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d10b      	bne.n	8007304 <_printf_i+0x14c>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	07de      	lsls	r6, r3, #31
 80072f0:	d508      	bpl.n	8007304 <_printf_i+0x14c>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	6861      	ldr	r1, [r4, #4]
 80072f6:	4299      	cmp	r1, r3
 80072f8:	bfde      	ittt	le
 80072fa:	2330      	movle	r3, #48	; 0x30
 80072fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007304:	1b52      	subs	r2, r2, r5
 8007306:	6122      	str	r2, [r4, #16]
 8007308:	f8cd a000 	str.w	sl, [sp]
 800730c:	464b      	mov	r3, r9
 800730e:	aa03      	add	r2, sp, #12
 8007310:	4621      	mov	r1, r4
 8007312:	4640      	mov	r0, r8
 8007314:	f7ff fee2 	bl	80070dc <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	d14c      	bne.n	80073b6 <_printf_i+0x1fe>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	b004      	add	sp, #16
 8007322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007326:	4835      	ldr	r0, [pc, #212]	; (80073fc <_printf_i+0x244>)
 8007328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800732c:	6829      	ldr	r1, [r5, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	f851 6b04 	ldr.w	r6, [r1], #4
 8007334:	6029      	str	r1, [r5, #0]
 8007336:	061d      	lsls	r5, r3, #24
 8007338:	d514      	bpl.n	8007364 <_printf_i+0x1ac>
 800733a:	07df      	lsls	r7, r3, #31
 800733c:	bf44      	itt	mi
 800733e:	f043 0320 	orrmi.w	r3, r3, #32
 8007342:	6023      	strmi	r3, [r4, #0]
 8007344:	b91e      	cbnz	r6, 800734e <_printf_i+0x196>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	f023 0320 	bic.w	r3, r3, #32
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	2310      	movs	r3, #16
 8007350:	e7b0      	b.n	80072b4 <_printf_i+0xfc>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	2378      	movs	r3, #120	; 0x78
 800735c:	4828      	ldr	r0, [pc, #160]	; (8007400 <_printf_i+0x248>)
 800735e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007362:	e7e3      	b.n	800732c <_printf_i+0x174>
 8007364:	0659      	lsls	r1, r3, #25
 8007366:	bf48      	it	mi
 8007368:	b2b6      	uxthmi	r6, r6
 800736a:	e7e6      	b.n	800733a <_printf_i+0x182>
 800736c:	4615      	mov	r5, r2
 800736e:	e7bb      	b.n	80072e8 <_printf_i+0x130>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	6826      	ldr	r6, [r4, #0]
 8007374:	6961      	ldr	r1, [r4, #20]
 8007376:	1d18      	adds	r0, r3, #4
 8007378:	6028      	str	r0, [r5, #0]
 800737a:	0635      	lsls	r5, r6, #24
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	d501      	bpl.n	8007384 <_printf_i+0x1cc>
 8007380:	6019      	str	r1, [r3, #0]
 8007382:	e002      	b.n	800738a <_printf_i+0x1d2>
 8007384:	0670      	lsls	r0, r6, #25
 8007386:	d5fb      	bpl.n	8007380 <_printf_i+0x1c8>
 8007388:	8019      	strh	r1, [r3, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	4615      	mov	r5, r2
 8007390:	e7ba      	b.n	8007308 <_printf_i+0x150>
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	1d1a      	adds	r2, r3, #4
 8007396:	602a      	str	r2, [r5, #0]
 8007398:	681d      	ldr	r5, [r3, #0]
 800739a:	6862      	ldr	r2, [r4, #4]
 800739c:	2100      	movs	r1, #0
 800739e:	4628      	mov	r0, r5
 80073a0:	f7f8 ff36 	bl	8000210 <memchr>
 80073a4:	b108      	cbz	r0, 80073aa <_printf_i+0x1f2>
 80073a6:	1b40      	subs	r0, r0, r5
 80073a8:	6060      	str	r0, [r4, #4]
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	2300      	movs	r3, #0
 80073b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b4:	e7a8      	b.n	8007308 <_printf_i+0x150>
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	462a      	mov	r2, r5
 80073ba:	4649      	mov	r1, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	47d0      	blx	sl
 80073c0:	3001      	adds	r0, #1
 80073c2:	d0ab      	beq.n	800731c <_printf_i+0x164>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	079b      	lsls	r3, r3, #30
 80073c8:	d413      	bmi.n	80073f2 <_printf_i+0x23a>
 80073ca:	68e0      	ldr	r0, [r4, #12]
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	4298      	cmp	r0, r3
 80073d0:	bfb8      	it	lt
 80073d2:	4618      	movlt	r0, r3
 80073d4:	e7a4      	b.n	8007320 <_printf_i+0x168>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4632      	mov	r2, r6
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	47d0      	blx	sl
 80073e0:	3001      	adds	r0, #1
 80073e2:	d09b      	beq.n	800731c <_printf_i+0x164>
 80073e4:	3501      	adds	r5, #1
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	9903      	ldr	r1, [sp, #12]
 80073ea:	1a5b      	subs	r3, r3, r1
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dcf2      	bgt.n	80073d6 <_printf_i+0x21e>
 80073f0:	e7eb      	b.n	80073ca <_printf_i+0x212>
 80073f2:	2500      	movs	r5, #0
 80073f4:	f104 0619 	add.w	r6, r4, #25
 80073f8:	e7f5      	b.n	80073e6 <_printf_i+0x22e>
 80073fa:	bf00      	nop
 80073fc:	0800785d 	.word	0x0800785d
 8007400:	0800786e 	.word	0x0800786e

08007404 <_sbrk_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d06      	ldr	r5, [pc, #24]	; (8007420 <_sbrk_r+0x1c>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7f9 fbfc 	bl	8000c0c <_sbrk>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_sbrk_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_sbrk_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	200044fc 	.word	0x200044fc

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4402      	add	r2, r0
 8007446:	4601      	mov	r1, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <__malloc_lock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_lock+0x8>)
 800745a:	f7ff bc4d 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	200044f0 	.word	0x200044f0

08007464 <__malloc_unlock>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__malloc_unlock+0x8>)
 8007466:	f7ff bc48 	b.w	8006cfa <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	200044f0 	.word	0x200044f0

08007470 <_free_r>:
 8007470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007472:	2900      	cmp	r1, #0
 8007474:	d044      	beq.n	8007500 <_free_r+0x90>
 8007476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747a:	9001      	str	r0, [sp, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f1a1 0404 	sub.w	r4, r1, #4
 8007482:	bfb8      	it	lt
 8007484:	18e4      	addlt	r4, r4, r3
 8007486:	f7ff ffe7 	bl	8007458 <__malloc_lock>
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <_free_r+0x94>)
 800748c:	9801      	ldr	r0, [sp, #4]
 800748e:	6813      	ldr	r3, [r2, #0]
 8007490:	b933      	cbnz	r3, 80074a0 <_free_r+0x30>
 8007492:	6063      	str	r3, [r4, #4]
 8007494:	6014      	str	r4, [r2, #0]
 8007496:	b003      	add	sp, #12
 8007498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800749c:	f7ff bfe2 	b.w	8007464 <__malloc_unlock>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d908      	bls.n	80074b6 <_free_r+0x46>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	1961      	adds	r1, r4, r5
 80074a8:	428b      	cmp	r3, r1
 80074aa:	bf01      	itttt	eq
 80074ac:	6819      	ldreq	r1, [r3, #0]
 80074ae:	685b      	ldreq	r3, [r3, #4]
 80074b0:	1949      	addeq	r1, r1, r5
 80074b2:	6021      	streq	r1, [r4, #0]
 80074b4:	e7ed      	b.n	8007492 <_free_r+0x22>
 80074b6:	461a      	mov	r2, r3
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b10b      	cbz	r3, 80074c0 <_free_r+0x50>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d9fa      	bls.n	80074b6 <_free_r+0x46>
 80074c0:	6811      	ldr	r1, [r2, #0]
 80074c2:	1855      	adds	r5, r2, r1
 80074c4:	42a5      	cmp	r5, r4
 80074c6:	d10b      	bne.n	80074e0 <_free_r+0x70>
 80074c8:	6824      	ldr	r4, [r4, #0]
 80074ca:	4421      	add	r1, r4
 80074cc:	1854      	adds	r4, r2, r1
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	d1e0      	bne.n	8007496 <_free_r+0x26>
 80074d4:	681c      	ldr	r4, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	6053      	str	r3, [r2, #4]
 80074da:	4421      	add	r1, r4
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	e7da      	b.n	8007496 <_free_r+0x26>
 80074e0:	d902      	bls.n	80074e8 <_free_r+0x78>
 80074e2:	230c      	movs	r3, #12
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	e7d6      	b.n	8007496 <_free_r+0x26>
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1961      	adds	r1, r4, r5
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf04      	itt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	bf04      	itt	eq
 80074f8:	1949      	addeq	r1, r1, r5
 80074fa:	6021      	streq	r1, [r4, #0]
 80074fc:	6054      	str	r4, [r2, #4]
 80074fe:	e7ca      	b.n	8007496 <_free_r+0x26>
 8007500:	b003      	add	sp, #12
 8007502:	bd30      	pop	{r4, r5, pc}
 8007504:	200044f4 	.word	0x200044f4

08007508 <_realloc_r>:
 8007508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750c:	4680      	mov	r8, r0
 800750e:	4614      	mov	r4, r2
 8007510:	460e      	mov	r6, r1
 8007512:	b921      	cbnz	r1, 800751e <_realloc_r+0x16>
 8007514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007518:	4611      	mov	r1, r2
 800751a:	f7ff bc0f 	b.w	8006d3c <_malloc_r>
 800751e:	b92a      	cbnz	r2, 800752c <_realloc_r+0x24>
 8007520:	f7ff ffa6 	bl	8007470 <_free_r>
 8007524:	4625      	mov	r5, r4
 8007526:	4628      	mov	r0, r5
 8007528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800752c:	f000 f81b 	bl	8007566 <_malloc_usable_size_r>
 8007530:	4284      	cmp	r4, r0
 8007532:	4607      	mov	r7, r0
 8007534:	d802      	bhi.n	800753c <_realloc_r+0x34>
 8007536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800753a:	d812      	bhi.n	8007562 <_realloc_r+0x5a>
 800753c:	4621      	mov	r1, r4
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fbfc 	bl	8006d3c <_malloc_r>
 8007544:	4605      	mov	r5, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d0ed      	beq.n	8007526 <_realloc_r+0x1e>
 800754a:	42bc      	cmp	r4, r7
 800754c:	4622      	mov	r2, r4
 800754e:	4631      	mov	r1, r6
 8007550:	bf28      	it	cs
 8007552:	463a      	movcs	r2, r7
 8007554:	f7ff faf2 	bl	8006b3c <memcpy>
 8007558:	4631      	mov	r1, r6
 800755a:	4640      	mov	r0, r8
 800755c:	f7ff ff88 	bl	8007470 <_free_r>
 8007560:	e7e1      	b.n	8007526 <_realloc_r+0x1e>
 8007562:	4635      	mov	r5, r6
 8007564:	e7df      	b.n	8007526 <_realloc_r+0x1e>

08007566 <_malloc_usable_size_r>:
 8007566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756a:	1f18      	subs	r0, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfbc      	itt	lt
 8007570:	580b      	ldrlt	r3, [r1, r0]
 8007572:	18c0      	addlt	r0, r0, r3
 8007574:	4770      	bx	lr
	...

08007578 <_init>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr

08007584 <_fini>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	bf00      	nop
 8007588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758a:	bc08      	pop	{r3}
 800758c:	469e      	mov	lr, r3
 800758e:	4770      	bx	lr
