
rtos_td_shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800641c  0800641c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000440c  20000074  08006498  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004480  08006498  00024480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018611  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003870  00000000  00000000  000386b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b43  00000000  00000000  0003e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018838  00000000  00000000  00067083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f94ca  00000000  00000000  0007f8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  00178dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800628c 	.word	0x0800628c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800628c 	.word	0x0800628c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fc57 	bl	8003eb8 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	080062b0 	.word	0x080062b0
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 fc91 	bl	8003f50 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pin_led_GPIO_Port, pin_led_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006ac:	f000 fec0 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pin_led_Pin;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pin_led_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006c8:	f000 fd06 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80006cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006e4:	f000 fcf8 	bl	80010d8 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40022000 	.word	0x40022000

080006f8 <fonction>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <fonction+0x3c>)
 800070c:	2128      	movs	r1, #40	; 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f005 f948 	bl	80059a4 <sniprintf>
 8000714:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	b289      	uxth	r1, r1
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	080062cc 	.word	0x080062cc

08000738 <clignotement>:

void clignotement(periode)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	while(1)
	{
	HAL_GPIO_WritePin(pin_led_GPIO_Port, pin_led_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <clignotement+0x40>)
 8000746:	f000 fe73 	bl	8001430 <HAL_GPIO_WritePin>
	vTaskDelay(periode/2);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	da00      	bge.n	8000752 <clignotement+0x1a>
 8000750:	3301      	adds	r3, #1
 8000752:	105b      	asrs	r3, r3, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f003 ff29 	bl	80045ac <vTaskDelay>
	HAL_GPIO_WritePin(pin_led_GPIO_Port, pin_led_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2102      	movs	r1, #2
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <clignotement+0x40>)
 8000760:	f000 fe66 	bl	8001430 <HAL_GPIO_WritePin>
	vTaskDelay(periode/2);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	da00      	bge.n	800076c <clignotement+0x34>
 800076a:	3301      	adds	r3, #1
 800076c:	105b      	asrs	r3, r3, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ff1c 	bl	80045ac <vTaskDelay>
	HAL_GPIO_WritePin(pin_led_GPIO_Port, pin_led_Pin, SET);
 8000774:	e7e4      	b.n	8000740 <clignotement+0x8>
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <led>:
	}
}

int led(h_shell_t * h_shell, int argc, char ** argv)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	int duree = (int) argv;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	617b      	str	r3, [r7, #20]

	if(duree !=0)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d007      	beq.n	80007a2 <led+0x26>
	{
		clignotement(duree/2);
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b00      	cmp	r3, #0
 8000796:	da00      	bge.n	800079a <led+0x1e>
 8000798:	3301      	adds	r3, #1
 800079a:	105b      	asrs	r3, r3, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffcb 	bl	8000738 <clignotement>
	}
	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <shell>:

int shell(h_shell_t * h_shell, int argc, char ** argv)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	while(1)
	{


		shell_init(&h_shell);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 ff39 	bl	8005634 <shell_init>
		shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 80007c2:	f107 000c 	add.w	r0, r7, #12
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <shell+0x40>)
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <shell+0x44>)
 80007ca:	2166      	movs	r1, #102	; 0x66
 80007cc:	f004 ff74 	bl	80056b8 <shell_add>
		shell_add(&h_shell, 'l', led, "Clignotement d'une led");
 80007d0:	f107 000c 	add.w	r0, r7, #12
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <shell+0x48>)
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <shell+0x4c>)
 80007d8:	216c      	movs	r1, #108	; 0x6c
 80007da:	f004 ff6d 	bl	80056b8 <shell_add>
		shell_run(&h_shell);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 f814 	bl	8005810 <shell_run>
		shell_init(&h_shell);
 80007e8:	e7e6      	b.n	80007b8 <shell+0xc>
 80007ea:	bf00      	nop
 80007ec:	080062ec 	.word	0x080062ec
 80007f0:	080006f9 	.word	0x080006f9
 80007f4:	08006304 	.word	0x08006304
 80007f8:	0800077d 	.word	0x0800077d

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  BaseType_t xReturned;
  TaskHandle_t xHandle_clignotement = NULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  TaskHandle_t xHandle_shell = NULL;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fac4 	bl	8000d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f845 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff ff0d 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000816:	f000 f9db 	bl	8000bd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  h_shell.drv.receive = drv_uart1_receive;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <main+0x80>)
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <main+0x84>)
 800081e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
  h_shell.drv.transmit = drv_uart1_transmit;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <main+0x80>)
 8000824:	4a17      	ldr	r2, [pc, #92]	; (8000884 <main+0x88>)
 8000826:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354

  sem = xSemaphoreCreateBinary();
 800082a:	2203      	movs	r2, #3
 800082c:	2100      	movs	r1, #0
 800082e:	2001      	movs	r0, #1
 8000830:	f003 fcc0 	bl	80041b4 <xQueueGenericCreate>
 8000834:	4603      	mov	r3, r0
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <main+0x8c>)
 8000838:	6013      	str	r3, [r2, #0]
  xReturned = xTaskCreate(clignotement, "clignotement", STACK_SIZE, (void *) DELAY_CLIGNOTEMENT, TASK_CLIGNOTEMENT_PRIORITY, &xHandle_clignotement);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2302      	movs	r3, #2
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084a:	4910      	ldr	r1, [pc, #64]	; (800088c <main+0x90>)
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <main+0x94>)
 800084e:	f003 fd75 	bl	800433c <xTaskCreate>
 8000852:	60f8      	str	r0, [r7, #12]
  xReturned = xTaskCreate(shell, "shell", STACK_SIZE, (void *) DELAY_SHELL, TASK_SHELL_PRIORITY, &xHandle_shell);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000862:	490c      	ldr	r1, [pc, #48]	; (8000894 <main+0x98>)
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <main+0x9c>)
 8000866:	f003 fd69 	bl	800433c <xTaskCreate>
 800086a:	60f8      	str	r0, [r7, #12]

  vTaskStartScheduler();
 800086c:	f003 fed4 	bl	8004618 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000870:	f7ff feba 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000874:	f003 fb19 	bl	8003eaa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x7c>
 800087a:	bf00      	nop
 800087c:	200002e8 	.word	0x200002e8
 8000880:	08005565 	.word	0x08005565
 8000884:	0800558d 	.word	0x0800558d
 8000888:	20000644 	.word	0x20000644
 800088c:	0800631c 	.word	0x0800631c
 8000890:	08000739 	.word	0x08000739
 8000894:	0800632c 	.word	0x0800632c
 8000898:	080007ad 	.word	0x080007ad

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 f872 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <SystemClock_Config+0xd4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <SystemClock_Config+0xd4>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemClock_Config+0xd4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemClock_Config+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a25      	ldr	r2, [pc, #148]	; (8000974 <SystemClock_Config+0xd8>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <SystemClock_Config+0xd8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000904:	2319      	movs	r3, #25
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000908:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fdf2 	bl	8001504 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000926:	f000 f839 	bl	800099c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800092a:	f000 fd9b 	bl	8001464 <HAL_PWREx_EnableOverDrive>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000934:	f000 f832 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000944:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2107      	movs	r1, #7
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f878 	bl	8001a4c <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000962:	f000 f81b 	bl	800099c <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	; 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098a:	f000 fa11 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40001000 	.word	0x40001000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fabb 	bl	8000f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_InitTick+0xe0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <HAL_InitTick+0xe0>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_InitTick+0xe0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a20:	f107 0210 	add.w	r2, r7, #16
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f9f4 	bl	8001e18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3a:	f001 f9c5 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8000a3e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a40:	e004      	b.n	8000a4c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a42:	f001 f9c1 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8000a46:	4603      	mov	r3, r0
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_InitTick+0xe4>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	0c9b      	lsrs	r3, r3, #18
 8000a56:	3b01      	subs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a5c:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a82:	f001 fdeb 	bl	800265c <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d11b      	bne.n	8000acc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a96:	f001 fe43 	bl	8002720 <HAL_TIM_Base_Start_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d111      	bne.n	8000acc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa8:	2036      	movs	r0, #54	; 0x36
 8000aaa:	f000 fa75 	bl	8000f98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d808      	bhi.n	8000ac6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2036      	movs	r0, #54	; 0x36
 8000aba:	f000 fa51 	bl	8000f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_InitTick+0xf0>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	e002      	b.n	8000acc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20000648 	.word	0x20000648
 8000ae4:	40001000 	.word	0x40001000
 8000ae8:	20000004 	.word	0x20000004

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART1_IRQHandler+0x10>)
 8000b1e:	f002 fa13 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000698 	.word	0x20000698

08000b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM6_DAC_IRQHandler+0x10>)
 8000b32:	f001 fe6d 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000648 	.word	0x20000648

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f004 fed8 	bl	8005924 <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20050000 	.word	0x20050000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	20000694 	.word	0x20000694
 8000ba8:	20004480 	.word	0x20004480

08000bac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART1_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c14:	f002 f802 	bl	8002c1c <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f7ff febd 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000698 	.word	0x20000698
 8000c2c:	40011000 	.word	0x40011000

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0ac      	sub	sp, #176	; 0xb0
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	2284      	movs	r2, #132	; 0x84
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 fe9f 	bl	8005994 <memset>
  if(uartHandle->Instance==USART1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a36      	ldr	r2, [pc, #216]	; (8000d34 <HAL_UART_MspInit+0x104>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d164      	bne.n	8000d2a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c64:	2300      	movs	r3, #0
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 f905 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c78:	f7ff fe90 	bl	800099c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6453      	str	r3, [r2, #68]	; 0x44
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_UART_MspInit+0x108>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0x10c>)
 8000cea:	f000 f9f5 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <HAL_UART_MspInit+0x110>)
 8000d16:	f000 f9df 	bl	80010d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	2025      	movs	r0, #37	; 0x25
 8000d20:	f000 f91e 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d24:	2025      	movs	r0, #37	; 0x25
 8000d26:	f000 f937 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	37b0      	adds	r7, #176	; 0xb0
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020000 	.word	0x40020000

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ff1d 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f004 fddd 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fd41 	bl	80007fc <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d88:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 8000d8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d90:	20004480 	.word	0x20004480

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>

08000d96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 f8d5 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da0:	200f      	movs	r0, #15
 8000da2:	f7ff fe29 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da6:	f7ff fdff 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000720 	.word	0x20000720

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000720 	.word	0x20000720

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	05fa0000 	.word	0x05fa0000

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f72:	f7ff ff61 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff ffb1 	bl	8000ee4 <NVIC_EncodePriority>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff80 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff54 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fc2:	f7ff ff09 	bl	8000dd8 <HAL_GetTick>
 8000fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e052      	b.n	800108c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0216 	bic.w	r2, r2, #22
 8000ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <HAL_DMA_Abort+0x62>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0208 	bic.w	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001036:	e013      	b.n	8001060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001038:	f7ff fece 	bl	8000dd8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b05      	cmp	r3, #5
 8001044:	d90c      	bls.n	8001060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2220      	movs	r2, #32
 800104a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e015      	b.n	800108c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e4      	bne.n	8001038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001072:	223f      	movs	r2, #63	; 0x3f
 8001074:	409a      	lsls	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d004      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00c      	b.n	80010cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e175      	b.n	80013e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8164 	bne.w	80013de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x56>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80be 	beq.w	80013de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_GPIO_Init+0x324>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a65      	ldr	r2, [pc, #404]	; (80013fc <HAL_GPIO_Init+0x324>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_GPIO_Init+0x324>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800127a:	4a61      	ldr	r2, [pc, #388]	; (8001400 <HAL_GPIO_Init+0x328>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_GPIO_Init+0x32c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d037      	beq.n	8001316 <HAL_GPIO_Init+0x23e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x330>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d031      	beq.n	8001312 <HAL_GPIO_Init+0x23a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a56      	ldr	r2, [pc, #344]	; (800140c <HAL_GPIO_Init+0x334>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x236>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_GPIO_Init+0x338>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x232>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <HAL_GPIO_Init+0x33c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x22e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a53      	ldr	r2, [pc, #332]	; (8001418 <HAL_GPIO_Init+0x340>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x22a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a52      	ldr	r2, [pc, #328]	; (800141c <HAL_GPIO_Init+0x344>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a51      	ldr	r2, [pc, #324]	; (8001420 <HAL_GPIO_Init+0x348>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a50      	ldr	r2, [pc, #320]	; (8001424 <HAL_GPIO_Init+0x34c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x21e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_GPIO_Init+0x350>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x21a>
 80012ee:	2309      	movs	r3, #9
 80012f0:	e012      	b.n	8001318 <HAL_GPIO_Init+0x240>
 80012f2:	230a      	movs	r3, #10
 80012f4:	e010      	b.n	8001318 <HAL_GPIO_Init+0x240>
 80012f6:	2308      	movs	r3, #8
 80012f8:	e00e      	b.n	8001318 <HAL_GPIO_Init+0x240>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00c      	b.n	8001318 <HAL_GPIO_Init+0x240>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00a      	b.n	8001318 <HAL_GPIO_Init+0x240>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x240>
 8001306:	2304      	movs	r3, #4
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x240>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x240>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x240>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x240>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x328>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_GPIO_Init+0x354>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a34      	ldr	r2, [pc, #208]	; (800142c <HAL_GPIO_Init+0x354>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <HAL_GPIO_Init+0x354>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_GPIO_Init+0x354>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_GPIO_Init+0x354>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ae:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_GPIO_Init+0x354>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_GPIO_Init+0x354>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_GPIO_Init+0x354>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f ae86 	bls.w	80010f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40022000 	.word	0x40022000
 8001428:	40022400 	.word	0x40022400
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a22      	ldr	r2, [pc, #136]	; (80014fc <HAL_PWREx_EnableOverDrive+0x98>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_PWREx_EnableOverDrive+0x98>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff fca1 	bl	8000dd8 <HAL_GetTick>
 8001496:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001498:	e009      	b.n	80014ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800149a:	f7ff fc9d 	bl	8000dd8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a8:	d901      	bls.n	80014ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e022      	b.n	80014f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d1ee      	bne.n	800149a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff fc86 	bl	8000dd8 <HAL_GetTick>
 80014cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ce:	e009      	b.n	80014e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d0:	f7ff fc82 	bl	8000dd8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014de:	d901      	bls.n	80014e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e007      	b.n	80014f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014f0:	d1ee      	bne.n	80014d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e291      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b96      	ldr	r3, [pc, #600]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001534:	4b93      	ldr	r3, [pc, #588]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x62>
 8001540:	4b90      	ldr	r3, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b8d      	ldr	r3, [pc, #564]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x130>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e26b      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x7a>
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a83      	ldr	r2, [pc, #524]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x9c>
 8001586:	4b7f      	ldr	r3, [pc, #508]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7b      	ldr	r2, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xc0>
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a75      	ldr	r2, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a72      	ldr	r2, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd8>
 80015c4:	4b6f      	ldr	r3, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a6b      	ldr	r2, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fbf8 	bl	8000dd8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbf4 	bl	8000dd8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e21f      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b61      	ldr	r3, [pc, #388]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe8>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fbe4 	bl	8000dd8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fbe0 	bl	8000dd8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e20b      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x110>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d069      	beq.n	8001716 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x190>
 800165a:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x17a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1df      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	493d      	ldr	r1, [pc, #244]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e040      	b.n	8001716 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb96 	bl	8000dd8 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fb92 	bl	8000dd8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1bd      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4929      	ldr	r1, [pc, #164]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
 80016e2:	e018      	b.n	8001716 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a26      	ldr	r2, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb72 	bl	8000dd8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb6e 	bl	8000dd8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e199      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d038      	beq.n	8001794 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d019      	beq.n	800175e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fb4f 	bl	8000dd8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff fb4b 	bl	8000dd8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e176      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x23a>
 800175c:	e01a      	b.n	8001794 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_RCC_OscConfig+0x280>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fb35 	bl	8000dd8 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fb31 	bl	8000dd8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d903      	bls.n	8001788 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e15c      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
 8001784:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b91      	ldr	r3, [pc, #580]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a4 	beq.w	80018ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10d      	bne.n	80017ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a87      	ldr	r2, [pc, #540]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ca:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017d6:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7e      	ldr	r2, [pc, #504]	; (80019d4 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff faf9 	bl	8000dd8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff faf5 	bl	8000dd8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e120      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	4b75      	ldr	r3, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x31a>
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	e02d      	b.n	800187a <HAL_RCC_OscConfig+0x376>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x33c>
 8001826:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a69      	ldr	r2, [pc, #420]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a66      	ldr	r2, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	e01c      	b.n	800187a <HAL_RCC_OscConfig+0x376>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x35e>
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a60      	ldr	r2, [pc, #384]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0x376>
 8001862:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a57      	ldr	r2, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001882:	f7ff faa9 	bl	8000dd8 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff faa5 	bl	8000dd8 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0ce      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ee      	beq.n	800188a <HAL_RCC_OscConfig+0x386>
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa93 	bl	8000dd8 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff fa8f 	bl	8000dd8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80a4 	beq.w	8001a3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d06b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d149      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800190e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fa60 	bl	8000dd8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff fa5c 	bl	8000dd8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e087      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4313      	orrs	r3, r2
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001966:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fa30 	bl	8000dd8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa2c 	bl	8000dd8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e057      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x478>
 800199a:	e04f      	b.n	8001a3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80019a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fa16 	bl	8000dd8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fa12 	bl	8000dd8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e03d      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4ac>
 80019ce:	e035      	b.n	8001a3c <HAL_RCC_OscConfig+0x538>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x544>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d028      	beq.n	8001a38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d121      	bne.n	8001a38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d11a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d111      	bne.n	8001a38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	4965      	ldr	r1, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b40:	f7ff f94a 	bl	8000dd8 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f946 	bl	8000dd8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1cc>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1d0>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fefa 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080063c0 	.word	0x080063c0
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c28:	b090      	sub	sp, #64	; 0x40
 8001c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 80a1 	bhi.w	8001d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e09b      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c5c:	e09b      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c62:	e098      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d028      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	627a      	str	r2, [r7, #36]	; 0x24
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c90:	fb03 f201 	mul.w	r2, r3, r1
 8001c94:	2300      	movs	r3, #0
 8001c96:	fb00 f303 	mul.w	r3, r0, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a43      	ldr	r2, [pc, #268]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001caa:	4413      	add	r3, r2
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	61fa      	str	r2, [r7, #28]
 8001cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cbe:	f7fe faf7 	bl	80002b0 <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cca:	e053      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	617a      	str	r2, [r7, #20]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cde:	f04f 0b00 	mov.w	fp, #0
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	465b      	mov	r3, fp
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf4:	0150      	lsls	r0, r2, #5
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8001cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d16:	ebb2 0408 	subs.w	r4, r2, r8
 8001d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	00eb      	lsls	r3, r5, #3
 8001d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2c:	00e2      	lsls	r2, r4, #3
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	eb14 030a 	adds.w	r3, r4, sl
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	eb45 030b 	adc.w	r3, r5, fp
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	028b      	lsls	r3, r1, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d54:	4621      	mov	r1, r4
 8001d56:	028a      	lsls	r2, r1, #10
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d68:	f7fe faa2 	bl	80002b0 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3740      	adds	r7, #64	; 0x40
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	017d7840 	.word	0x017d7840

08001db0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0a9b      	lsrs	r3, r3, #10
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	080063d0 	.word	0x080063d0

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffdc 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0b5b      	lsrs	r3, r3, #13
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	080063d0 	.word	0x080063d0

08001e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	220f      	movs	r2, #15
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCC_GetClockConfig+0x60>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ea4:	4b69      	ldr	r3, [pc, #420]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eae:	6093      	str	r3, [r2, #8]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb8:	4964      	ldr	r1, [pc, #400]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d017      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	4959      	ldr	r1, [pc, #356]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ef4:	d101      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d017      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	494a      	ldr	r1, [pc, #296]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 808b 	beq.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f84:	f7fe ff28 	bl	8000dd8 <HAL_GetTick>
 8001f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe ff24 	bl	8000dd8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e357      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d035      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d02e      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d114      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe feec 	bl	8000dd8 <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fee8 	bl	8000dd8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e319      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002032:	d111      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002042:	400b      	ands	r3, r1
 8002044:	4901      	ldr	r1, [pc, #4]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
 800204a:	e00b      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000
 8002054:	0ffffcff 	.word	0x0ffffcff
 8002058:	4baa      	ldr	r3, [pc, #680]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4aa9      	ldr	r2, [pc, #676]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800205e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002062:	6093      	str	r3, [r2, #8]
 8002064:	4ba7      	ldr	r3, [pc, #668]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	49a4      	ldr	r1, [pc, #656]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002072:	4313      	orrs	r3, r2
 8002074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d010      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002082:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002088:	4a9e      	ldr	r2, [pc, #632]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002092:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	4999      	ldr	r1, [pc, #612]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b0:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020be:	4991      	ldr	r1, [pc, #580]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d2:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e0:	4988      	ldr	r1, [pc, #544]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f4:	4b83      	ldr	r3, [pc, #524]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	4980      	ldr	r1, [pc, #512]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002116:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4977      	ldr	r1, [pc, #476]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002138:	4b72      	ldr	r3, [pc, #456]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	496f      	ldr	r1, [pc, #444]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215a:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f023 020c 	bic.w	r2, r3, #12
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002168:	4966      	ldr	r1, [pc, #408]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217c:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	495e      	ldr	r1, [pc, #376]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800219e:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ac:	4955      	ldr	r1, [pc, #340]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4944      	ldr	r1, [pc, #272]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	493c      	ldr	r1, [pc, #240]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002234:	4933      	ldr	r1, [pc, #204]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002256:	492b      	ldr	r1, [pc, #172]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002278:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002288:	d101      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b8:	4912      	ldr	r1, [pc, #72]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022dc:	4909      	ldr	r1, [pc, #36]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d006      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80d9 	beq.w	80024aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a01      	ldr	r2, [pc, #4]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002302:	e001      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002304:	40023800 	.word	0x40023800
 8002308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230a:	f7fe fd65 	bl	8000dd8 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002312:	f7fe fd61 	bl	8000dd8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e194      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002324:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d021      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002352:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002358:	0e1b      	lsrs	r3, r3, #24
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	019a      	lsls	r2, r3, #6
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	071b      	lsls	r3, r3, #28
 8002378:	4957      	ldr	r1, [pc, #348]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02e      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023aa:	d129      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0f1b      	lsrs	r3, r3, #28
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	019a      	lsls	r2, r3, #6
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	493d      	ldr	r1, [pc, #244]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ee:	f023 021f 	bic.w	r2, r3, #31
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01d      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	0e1b      	lsrs	r3, r3, #24
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002420:	0f1b      	lsrs	r3, r3, #28
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	019a      	lsls	r2, r3, #6
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	071b      	lsls	r3, r3, #28
 8002440:	4925      	ldr	r1, [pc, #148]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d011      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	019a      	lsls	r2, r3, #6
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	4919      	ldr	r1, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800247e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fca8 	bl	8000dd8 <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800248c:	f7fe fca4 	bl	8000dd8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0d7      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f040 80cd 	bne.w	800264c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024be:	f7fe fc8b 	bl	8000dd8 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024c6:	f7fe fc87 	bl	8000dd8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d903      	bls.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0ba      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024dc:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e8:	d0ed      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02e      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d12a      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	0f1b      	lsrs	r3, r3, #28
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	019a      	lsls	r2, r3, #6
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	071b      	lsls	r3, r3, #28
 8002546:	4944      	ldr	r1, [pc, #272]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002554:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	493d      	ldr	r1, [pc, #244]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d022      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257c:	d11d      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	0e1b      	lsrs	r3, r3, #24
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	0f1b      	lsrs	r3, r3, #28
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	019a      	lsls	r2, r3, #6
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	071b      	lsls	r3, r3, #28
 80025b2:	4929      	ldr	r1, [pc, #164]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d028      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	0e1b      	lsrs	r3, r3, #24
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	431a      	orrs	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4917      	ldr	r1, [pc, #92]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	4911      	ldr	r1, [pc, #68]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fbd8 	bl	8000dd8 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800262c:	f7fe fbd4 	bl	8000dd8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e007      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264a:	d1ef      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e049      	b.n	8002702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f841 	bl	800270a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 fa00 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e054      	b.n	80027e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d01d      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_TIM_Base_Start_IT+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_TIM_Base_Start_IT+0xe0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_TIM_Base_Start_IT+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_TIM_Base_Start_IT+0xe8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d115      	bne.n	80027cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_TIM_Base_Start_IT+0xec>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d015      	beq.n	80027de <HAL_TIM_Base_Start_IT+0xbe>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d011      	beq.n	80027de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	e008      	b.n	80027de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e000      	b.n	80027e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40010400 	.word	0x40010400
 8002804:	40014000 	.word	0x40014000
 8002808:	40001800 	.word	0x40001800
 800280c:	00010007 	.word	0x00010007

08002810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0202 	mvn.w	r2, #2
 800283c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f905 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8f7 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f908 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0204 	mvn.w	r2, #4
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8db 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8cd 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8de 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0208 	mvn.w	r2, #8
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2204      	movs	r2, #4
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8b1 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8a3 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f8b4 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0210 	mvn.w	r2, #16
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2208      	movs	r2, #8
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f887 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f879 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f88a 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0201 	mvn.w	r2, #1
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fff2 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b80      	cmp	r3, #128	; 0x80
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f91a 	bl	8002bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d10e      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f90d 	bl	8002c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f838 	bl	8002a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0220 	mvn.w	r2, #32
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8cd 	bl	8002be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a40      	ldr	r2, [pc, #256]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d00f      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3d      	ldr	r2, [pc, #244]	; (8002bb8 <TIM_Base_SetConfig+0x118>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <TIM_Base_SetConfig+0x11c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <TIM_Base_SetConfig+0x120>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d027      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <TIM_Base_SetConfig+0x118>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d023      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <TIM_Base_SetConfig+0x11c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <TIM_Base_SetConfig+0x120>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d017      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <TIM_Base_SetConfig+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <TIM_Base_SetConfig+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00f      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <TIM_Base_SetConfig+0x130>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <TIM_Base_SetConfig+0x134>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <TIM_Base_SetConfig+0x138>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <TIM_Base_SetConfig+0x13c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d108      	bne.n	8002b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0xf8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40010400 	.word	0x40010400
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	40001800 	.word	0x40001800
 8002bd8:	40001c00 	.word	0x40001c00
 8002bdc:	40002000 	.word	0x40002000

08002be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e040      	b.n	8002cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fff6 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fc66 	bl	800352c <UART_SetConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e022      	b.n	8002cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 febe 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 ff45 	bl	8003b38 <UART_CheckIdleState>
 8002cae:	4603      	mov	r3, r0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d171      	bne.n	8002db4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x24>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e06a      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2221      	movs	r2, #33	; 0x21
 8002cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cee:	f7fe f873 	bl	8000dd8 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0c:	d108      	bne.n	8002d20 <HAL_UART_Transmit+0x68>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e003      	b.n	8002d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d28:	e02c      	b.n	8002d84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 ff36 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e038      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e007      	b.n	8002d72 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1cc      	bne.n	8002d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2140      	movs	r1, #64	; 0x40
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 ff03 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e005      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	; 0x28
 8002dc2:	af02      	add	r7, sp, #8
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	f040 80b1 	bne.w	8002f3c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_Receive+0x28>
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0a9      	b.n	8002f3e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2222      	movs	r2, #34	; 0x22
 8002df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e00:	f7fd ffea 	bl	8000dd8 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d10e      	bne.n	8002e3e <HAL_UART_Receive+0x80>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_UART_Receive+0x76>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e32:	e02d      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	22ff      	movs	r2, #255	; 0xff
 8002e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e3c:	e028      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_UART_Receive+0xa4>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Receive+0x9a>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e56:	e01b      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	227f      	movs	r2, #127	; 0x7f
 8002e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e60:	e016      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6a:	d10d      	bne.n	8002e88 <HAL_UART_Receive+0xca>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <HAL_UART_Receive+0xc0>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	227f      	movs	r2, #127	; 0x7f
 8002e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e7c:	e008      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	223f      	movs	r2, #63	; 0x3f
 8002e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Receive+0xd2>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Receive+0xf6>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ebc:	e032      	b.n	8002f24 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fe6c 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e032      	b.n	8002f3e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	8a7b      	ldrh	r3, [r7, #18]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e00c      	b.n	8002f12 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	8a7b      	ldrh	r3, [r7, #18]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4013      	ands	r3, r2
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1c6      	bne.n	8002ebe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ba      	sub	sp, #232	; 0xe8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f76:	4013      	ands	r3, r2
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8297 	beq.w	80034d4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
      }
      return;
 8002fae:	e291      	b.n	80034d4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8117 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fca:	4b85      	ldr	r3, [pc, #532]	; (80031e0 <HAL_UART_IRQHandler+0x298>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 810a 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d011      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
 8003040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800307c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 81fd 	beq.w	80034d8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800311e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003122:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04f      	beq.n	80031ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fe01 	bl	8003d32 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d141      	bne.n	80031c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800316a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1d9      	bne.n	800313e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <HAL_UART_IRQHandler+0x29c>)
 8003198:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd ff78 	bl	8001094 <HAL_DMA_Abort_IT>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d017      	beq.n	80031da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	e00f      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9a0 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00b      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f99c 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e007      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f998 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80031d8:	e17e      	b.n	80034d8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031da:	bf00      	nop
    return;
 80031dc:	e17c      	b.n	80034d8 <HAL_UART_IRQHandler+0x590>
 80031de:	bf00      	nop
 80031e0:	04000120 	.word	0x04000120
 80031e4:	08003dfb 	.word	0x08003dfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 814c 	bne.w	800348a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8145 	beq.w	800348a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 813e 	beq.w	800348a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	f040 80b6 	bne.w	8003392 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003232:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8150 	beq.w	80034dc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003246:	429a      	cmp	r2, r3
 8003248:	f080 8148 	bcs.w	80034dc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	f000 8086 	beq.w	8003370 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800328e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003292:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800329a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1da      	bne.n	8003264 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e1      	bne.n	80032ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800330e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800331c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e3      	bne.n	80032ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003340:	f023 0310 	bic.w	r3, r3, #16
 8003344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003352:	65bb      	str	r3, [r7, #88]	; 0x58
 8003354:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e4      	bne.n	8003330 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fe22 	bl	8000fb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003382:	b29b      	uxth	r3, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8c2 	bl	8003514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003390:	e0a4      	b.n	80034dc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8096 	beq.w	80034e0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80033b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8091 	beq.w	80034e0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
 80033e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e4      	bne.n	80033be <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	623b      	str	r3, [r7, #32]
   return(result);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003418:	633a      	str	r2, [r7, #48]	; 0x30
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800341e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e3      	bne.n	80033f4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	60fb      	str	r3, [r7, #12]
   return(result);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f023 0310 	bic.w	r3, r3, #16
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	617b      	str	r3, [r7, #20]
   return(result);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e4      	bne.n	8003440 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f846 	bl	8003514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003488:	e02a      	b.n	80034e0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01c      	beq.n	80034e4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    }
    return;
 80034b2:	e017      	b.n	80034e4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_UART_IRQHandler+0x59e>
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fcaa 	bl	8003e26 <UART_EndTransmit_IT>
    return;
 80034d2:	e008      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034d4:	bf00      	nop
 80034d6:	e006      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80034d8:	bf00      	nop
 80034da:	e004      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80034e4:	bf00      	nop
  }

}
 80034e6:	37e8      	adds	r7, #232	; 0xe8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <UART_SetConfig+0x2c4>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	430b      	orrs	r3, r1
 8003562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a94      	ldr	r2, [pc, #592]	; (80037f4 <UART_SetConfig+0x2c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0xbe>
 80035a8:	4b93      	ldr	r3, [pc, #588]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d816      	bhi.n	80035e4 <UART_SetConfig+0xb8>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x90>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035d3 	.word	0x080035d3
 80035c8:	080035df 	.word	0x080035df
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e150      	b.n	8003874 <UART_SetConfig+0x348>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e14d      	b.n	8003874 <UART_SetConfig+0x348>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e14a      	b.n	8003874 <UART_SetConfig+0x348>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e147      	b.n	8003874 <UART_SetConfig+0x348>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e144      	b.n	8003874 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a83      	ldr	r2, [pc, #524]	; (80037fc <UART_SetConfig+0x2d0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d132      	bne.n	800365a <UART_SetConfig+0x12e>
 80035f4:	4b80      	ldr	r3, [pc, #512]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d828      	bhi.n	8003654 <UART_SetConfig+0x128>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0xdc>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003655 	.word	0x08003655
 8003610:	08003655 	.word	0x08003655
 8003614:	08003655 	.word	0x08003655
 8003618:	08003649 	.word	0x08003649
 800361c:	08003655 	.word	0x08003655
 8003620:	08003655 	.word	0x08003655
 8003624:	08003655 	.word	0x08003655
 8003628:	08003643 	.word	0x08003643
 800362c:	08003655 	.word	0x08003655
 8003630:	08003655 	.word	0x08003655
 8003634:	08003655 	.word	0x08003655
 8003638:	0800364f 	.word	0x0800364f
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e118      	b.n	8003874 <UART_SetConfig+0x348>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e115      	b.n	8003874 <UART_SetConfig+0x348>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e112      	b.n	8003874 <UART_SetConfig+0x348>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e10f      	b.n	8003874 <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e10c      	b.n	8003874 <UART_SetConfig+0x348>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a68      	ldr	r2, [pc, #416]	; (8003800 <UART_SetConfig+0x2d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0x17a>
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800366e:	2b30      	cmp	r3, #48	; 0x30
 8003670:	d013      	beq.n	800369a <UART_SetConfig+0x16e>
 8003672:	2b30      	cmp	r3, #48	; 0x30
 8003674:	d814      	bhi.n	80036a0 <UART_SetConfig+0x174>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x162>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d810      	bhi.n	80036a0 <UART_SetConfig+0x174>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <UART_SetConfig+0x15c>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d006      	beq.n	8003694 <UART_SetConfig+0x168>
 8003686:	e00b      	b.n	80036a0 <UART_SetConfig+0x174>
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e0f2      	b.n	8003874 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e0ef      	b.n	8003874 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e0ec      	b.n	8003874 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0e9      	b.n	8003874 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0e6      	b.n	8003874 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a56      	ldr	r2, [pc, #344]	; (8003804 <UART_SetConfig+0x2d8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d120      	bne.n	80036f2 <UART_SetConfig+0x1c6>
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ba:	2bc0      	cmp	r3, #192	; 0xc0
 80036bc:	d013      	beq.n	80036e6 <UART_SetConfig+0x1ba>
 80036be:	2bc0      	cmp	r3, #192	; 0xc0
 80036c0:	d814      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d009      	beq.n	80036da <UART_SetConfig+0x1ae>
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d810      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1a8>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d006      	beq.n	80036e0 <UART_SetConfig+0x1b4>
 80036d2:	e00b      	b.n	80036ec <UART_SetConfig+0x1c0>
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e0cc      	b.n	8003874 <UART_SetConfig+0x348>
 80036da:	2302      	movs	r3, #2
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e0c9      	b.n	8003874 <UART_SetConfig+0x348>
 80036e0:	2304      	movs	r3, #4
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0c6      	b.n	8003874 <UART_SetConfig+0x348>
 80036e6:	2308      	movs	r3, #8
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0c3      	b.n	8003874 <UART_SetConfig+0x348>
 80036ec:	2310      	movs	r3, #16
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0c0      	b.n	8003874 <UART_SetConfig+0x348>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	; (8003808 <UART_SetConfig+0x2dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d125      	bne.n	8003748 <UART_SetConfig+0x21c>
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370a:	d017      	beq.n	800373c <UART_SetConfig+0x210>
 800370c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003710:	d817      	bhi.n	8003742 <UART_SetConfig+0x216>
 8003712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003716:	d00b      	beq.n	8003730 <UART_SetConfig+0x204>
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d811      	bhi.n	8003742 <UART_SetConfig+0x216>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <UART_SetConfig+0x1fe>
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d006      	beq.n	8003736 <UART_SetConfig+0x20a>
 8003728:	e00b      	b.n	8003742 <UART_SetConfig+0x216>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e0a1      	b.n	8003874 <UART_SetConfig+0x348>
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e09e      	b.n	8003874 <UART_SetConfig+0x348>
 8003736:	2304      	movs	r3, #4
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e09b      	b.n	8003874 <UART_SetConfig+0x348>
 800373c:	2308      	movs	r3, #8
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e098      	b.n	8003874 <UART_SetConfig+0x348>
 8003742:	2310      	movs	r3, #16
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e095      	b.n	8003874 <UART_SetConfig+0x348>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <UART_SetConfig+0x2e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d125      	bne.n	800379e <UART_SetConfig+0x272>
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003760:	d017      	beq.n	8003792 <UART_SetConfig+0x266>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376c:	d00b      	beq.n	8003786 <UART_SetConfig+0x25a>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d811      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x254>
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x260>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x26c>
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e076      	b.n	8003874 <UART_SetConfig+0x348>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e073      	b.n	8003874 <UART_SetConfig+0x348>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e070      	b.n	8003874 <UART_SetConfig+0x348>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e06d      	b.n	8003874 <UART_SetConfig+0x348>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e06a      	b.n	8003874 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <UART_SetConfig+0x2e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d138      	bne.n	800381a <UART_SetConfig+0x2ee>
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b6:	d017      	beq.n	80037e8 <UART_SetConfig+0x2bc>
 80037b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037bc:	d82a      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d00b      	beq.n	80037dc <UART_SetConfig+0x2b0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d824      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <UART_SetConfig+0x2aa>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d006      	beq.n	80037e2 <UART_SetConfig+0x2b6>
 80037d4:	e01e      	b.n	8003814 <UART_SetConfig+0x2e8>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e04b      	b.n	8003874 <UART_SetConfig+0x348>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e048      	b.n	8003874 <UART_SetConfig+0x348>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e045      	b.n	8003874 <UART_SetConfig+0x348>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e042      	b.n	8003874 <UART_SetConfig+0x348>
 80037ee:	bf00      	nop
 80037f0:	efff69f3 	.word	0xefff69f3
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	40011400 	.word	0x40011400
 8003810:	40007800 	.word	0x40007800
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e02c      	b.n	8003874 <UART_SetConfig+0x348>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <UART_SetConfig+0x4bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d125      	bne.n	8003870 <UART_SetConfig+0x344>
 8003824:	4b71      	ldr	r3, [pc, #452]	; (80039ec <UART_SetConfig+0x4c0>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003832:	d017      	beq.n	8003864 <UART_SetConfig+0x338>
 8003834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003838:	d817      	bhi.n	800386a <UART_SetConfig+0x33e>
 800383a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383e:	d00b      	beq.n	8003858 <UART_SetConfig+0x32c>
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d811      	bhi.n	800386a <UART_SetConfig+0x33e>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <UART_SetConfig+0x326>
 800384a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384e:	d006      	beq.n	800385e <UART_SetConfig+0x332>
 8003850:	e00b      	b.n	800386a <UART_SetConfig+0x33e>
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e00d      	b.n	8003874 <UART_SetConfig+0x348>
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e00a      	b.n	8003874 <UART_SetConfig+0x348>
 800385e:	2304      	movs	r3, #4
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e007      	b.n	8003874 <UART_SetConfig+0x348>
 8003864:	2308      	movs	r3, #8
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x348>
 800386a:	2310      	movs	r3, #16
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e001      	b.n	8003874 <UART_SetConfig+0x348>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d15b      	bne.n	8003936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x3aa>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x360>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fa8a 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fa9a 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe f9ad 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d074      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d916      	bls.n	8003930 <UART_SetConfig+0x404>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d212      	bcs.n	8003930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	4313      	orrs	r3, r2
 8003924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	89fa      	ldrh	r2, [r7, #14]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e04f      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	77bb      	strb	r3, [r7, #30]
 8003934:	e04c      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x462>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x418>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fa2e 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7fe fa3e 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <UART_SetConfig+0x4c4>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe f951 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d909      	bls.n	80039cc <UART_SetConfig+0x4a0>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d205      	bcs.n	80039cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40007c00 	.word	0x40007c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b48:	f7fd f946 	bl	8000dd8 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10e      	bne.n	8003b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f81b 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e011      	b.n	8003b9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b09c      	sub	sp, #112	; 0x70
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	e0a7      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	f000 80a3 	beq.w	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd f909 	bl	8000dd8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13f      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e068      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d050      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d148      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e6      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cd2:	623a      	str	r2, [r7, #32]
 8003cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	69f9      	ldr	r1, [r7, #28]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e010      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f43f af48 	beq.w	8003bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3770      	adds	r7, #112	; 0x70
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b095      	sub	sp, #84	; 0x54
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e6      	bne.n	8003d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d118      	bne.n	8003dda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6979      	ldr	r1, [r7, #20]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dee:	bf00      	nop
 8003df0:	3754      	adds	r7, #84	; 0x54
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fb71 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6979      	ldr	r1, [r7, #20]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e6      	bne.n	8003e2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fb3d 	bl	80034ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8c:	2b84      	cmp	r3, #132	; 0x84
 8003e8e:	d005      	beq.n	8003e9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	3303      	adds	r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003eae:	f000 fbb3 	bl	8004618 <vTaskStartScheduler>
  
  return osOK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af04      	add	r7, sp, #16
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <osThreadCreate+0x54>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01c      	beq.n	8003f0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685c      	ldr	r4, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681d      	ldr	r5, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691e      	ldr	r6, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ffc8 	bl	8003e7a <makeFreeRtosPriority>
 8003eea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	9100      	str	r1, [sp, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	4632      	mov	r2, r6
 8003efe:	4629      	mov	r1, r5
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 f9b8 	bl	8004276 <xTaskCreateStatic>
 8003f06:	4603      	mov	r3, r0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e01c      	b.n	8003f46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685c      	ldr	r4, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f18:	b29e      	uxth	r6, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ffaa 	bl	8003e7a <makeFreeRtosPriority>
 8003f26:	4602      	mov	r2, r0
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	9200      	str	r2, [sp, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4632      	mov	r2, r6
 8003f34:	4629      	mov	r1, r5
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 fa00 	bl	800433c <xTaskCreate>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d001      	beq.n	8003f46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <osDelay+0x16>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	e000      	b.n	8003f68 <osDelay+0x18>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fb1f 	bl	80045ac <vTaskDelay>
  
  return osOK;
 8003f6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0208 	add.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f103 0208 	add.w	r2, r3, #8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f103 0208 	add.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d103      	bne.n	800403a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e00c      	b.n	8004054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3308      	adds	r3, #8
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e002      	b.n	8004048 <vListInsert+0x2e>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	d2f6      	bcs.n	8004042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6852      	ldr	r2, [r2, #4]
 80040ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d103      	bne.n	80040c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10c      	bne.n	800410e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	b672      	cpsid	i
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	b662      	cpsie	i
 8004108:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800410e:	f000 ff5d 	bl	8004fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	3b01      	subs	r3, #1
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	441a      	add	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	22ff      	movs	r2, #255	; 0xff
 8004152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d114      	bne.n	800418e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01a      	beq.n	80041a2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3310      	adds	r3, #16
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fc79 	bl	8004a68 <xTaskRemoveFromEventList>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <xQueueGenericReset+0xd0>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	e009      	b.n	80041a2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3310      	adds	r3, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fef0 	bl	8003f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3324      	adds	r3, #36	; 0x24
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff feeb 	bl	8003f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041a2:	f000 ff47 	bl	8005034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041a6:	2301      	movs	r3, #1
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10c      	bne.n	80041e2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	b672      	cpsid	i
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	b662      	cpsie	i
 80041dc:	613b      	str	r3, [r7, #16]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e004      	b.n	80041f8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3348      	adds	r3, #72	; 0x48
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 ffcd 	bl	800519c <pvPortMalloc>
 8004202:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d011      	beq.n	800422e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3348      	adds	r3, #72	; 0x48
 8004212:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800421c:	79fa      	ldrb	r2, [r7, #7]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f805 	bl	8004238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800422e:	69bb      	ldr	r3, [r7, #24]
	}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e002      	b.n	800425a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004266:	2101      	movs	r1, #1
 8004268:	69b8      	ldr	r0, [r7, #24]
 800426a:	f7ff ff39 	bl	80040e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004276:	b580      	push	{r7, lr}
 8004278:	b08e      	sub	sp, #56	; 0x38
 800427a:	af04      	add	r7, sp, #16
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10c      	bne.n	80042a4 <xTaskCreateStatic+0x2e>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	b672      	cpsid	i
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	b662      	cpsie	i
 800429e:	623b      	str	r3, [r7, #32]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <xTaskCreateStatic+0x4e>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	b672      	cpsid	i
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	b662      	cpsie	i
 80042be:	61fb      	str	r3, [r7, #28]
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042c4:	2354      	movs	r3, #84	; 0x54
 80042c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b54      	cmp	r3, #84	; 0x54
 80042cc:	d00c      	beq.n	80042e8 <xTaskCreateStatic+0x72>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	b672      	cpsid	i
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	b662      	cpsie	i
 80042e2:	61bb      	str	r3, [r7, #24]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01e      	beq.n	800432e <xTaskCreateStatic+0xb8>
 80042f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01b      	beq.n	800432e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004308:	2300      	movs	r3, #0
 800430a:	9303      	str	r3, [sp, #12]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	9302      	str	r3, [sp, #8]
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f850 	bl	80043c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004328:	f000 f8d6 	bl	80044d8 <prvAddNewTaskToReadyList>
 800432c:	e001      	b.n	8004332 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004332:	697b      	ldr	r3, [r7, #20]
	}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af04      	add	r7, sp, #16
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ff23 	bl	800519c <pvPortMalloc>
 8004356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800435e:	2054      	movs	r0, #84	; 0x54
 8004360:	f000 ff1c 	bl	800519c <pvPortMalloc>
 8004364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
 8004372:	e005      	b.n	8004380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004374:	6978      	ldr	r0, [r7, #20]
 8004376:	f000 ffdb 	bl	8005330 <vPortFree>
 800437a:	e001      	b.n	8004380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	2300      	movs	r3, #0
 8004392:	9303      	str	r3, [sp, #12]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	9302      	str	r3, [sp, #8]
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f80e 	bl	80043c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043aa:	69f8      	ldr	r0, [r7, #28]
 80043ac:	f000 f894 	bl	80044d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e002      	b.n	80043bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043bc:	69bb      	ldr	r3, [r7, #24]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b088      	sub	sp, #32
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80043de:	440b      	add	r3, r1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f023 0307 	bic.w	r3, r3, #7
 80043ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00c      	beq.n	8004412 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	b672      	cpsid	i
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	b662      	cpsie	i
 800440c:	617b      	str	r3, [r7, #20]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01f      	beq.n	8004458 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e012      	b.n	8004444 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	7819      	ldrb	r1, [r3, #0]
 8004426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	3334      	adds	r3, #52	; 0x34
 800442e:	460a      	mov	r2, r1
 8004430:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	d9e9      	bls.n	800441e <prvInitialiseNewTask+0x58>
 800444a:	e000      	b.n	800444e <prvInitialiseNewTask+0x88>
			{
				break;
 800444c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004456:	e003      	b.n	8004460 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	2b06      	cmp	r3, #6
 8004464:	d901      	bls.n	800446a <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004466:	2306      	movs	r3, #6
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fd99 	bl	8003fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	3318      	adds	r3, #24
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fd94 	bl	8003fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004494:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	f1c3 0207 	rsb	r2, r3, #7
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2200      	movs	r2, #0
 80044aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	69b8      	ldr	r0, [r7, #24]
 80044ba:	f000 fc77 	bl	8004dac <pxPortInitialiseStack>
 80044be:	4602      	mov	r2, r0
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044d0:	bf00      	nop
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044e0:	f000 fd74 	bl	8004fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <prvAddNewTaskToReadyList+0xb8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4a29      	ldr	r2, [pc, #164]	; (8004590 <prvAddNewTaskToReadyList+0xb8>)
 80044ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <prvAddNewTaskToReadyList+0xbc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044f6:	4a27      	ldr	r2, [pc, #156]	; (8004594 <prvAddNewTaskToReadyList+0xbc>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <prvAddNewTaskToReadyList+0xb8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d110      	bne.n	8004526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004504:	f000 fb2c 	bl	8004b60 <prvInitialiseTaskLists>
 8004508:	e00d      	b.n	8004526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <prvAddNewTaskToReadyList+0xc0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <prvAddNewTaskToReadyList+0xbc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d802      	bhi.n	8004526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004520:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <prvAddNewTaskToReadyList+0xbc>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <prvAddNewTaskToReadyList+0xc4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <prvAddNewTaskToReadyList+0xc4>)
 800452e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	2201      	movs	r2, #1
 8004536:	409a      	lsls	r2, r3
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <prvAddNewTaskToReadyList+0xc8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4313      	orrs	r3, r2
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <prvAddNewTaskToReadyList+0xc8>)
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <prvAddNewTaskToReadyList+0xcc>)
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7ff fd3a 	bl	8003fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800455e:	f000 fd69 	bl	8005034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <prvAddNewTaskToReadyList+0xc0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <prvAddNewTaskToReadyList+0xbc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	429a      	cmp	r2, r3
 8004576:	d207      	bcs.n	8004588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <prvAddNewTaskToReadyList+0xd0>)
 800457a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000824 	.word	0x20000824
 8004594:	20000724 	.word	0x20000724
 8004598:	20000830 	.word	0x20000830
 800459c:	20000840 	.word	0x20000840
 80045a0:	2000082c 	.word	0x2000082c
 80045a4:	20000728 	.word	0x20000728
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <vTaskDelay+0x64>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <vTaskDelay+0x34>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	b672      	cpsid	i
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	b662      	cpsie	i
 80045da:	60bb      	str	r3, [r7, #8]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80045e0:	f000 f87e 	bl	80046e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045e4:	2100      	movs	r1, #0
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb7a 	bl	8004ce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045ec:	f000 f886 	bl	80046fc <xTaskResumeAll>
 80045f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <vTaskDelay+0x68>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	2000084c 	.word	0x2000084c
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004626:	463a      	mov	r2, r7
 8004628:	1d39      	adds	r1, r7, #4
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4618      	mov	r0, r3
 8004630:	f7fb ffc0 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	9202      	str	r2, [sp, #8]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	460a      	mov	r2, r1
 8004646:	4920      	ldr	r1, [pc, #128]	; (80046c8 <vTaskStartScheduler+0xb0>)
 8004648:	4820      	ldr	r0, [pc, #128]	; (80046cc <vTaskStartScheduler+0xb4>)
 800464a:	f7ff fe14 	bl	8004276 <xTaskCreateStatic>
 800464e:	4603      	mov	r3, r0
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <vTaskStartScheduler+0xb8>)
 8004652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004654:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <vTaskStartScheduler+0xb8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800465c:	2301      	movs	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e001      	b.n	8004666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d118      	bne.n	800469e <vTaskStartScheduler+0x86>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004684:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <vTaskStartScheduler+0xbc>)
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <vTaskStartScheduler+0xc0>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <vTaskStartScheduler+0xc4>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004698:	f000 fc1a 	bl	8004ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800469c:	e010      	b.n	80046c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d10c      	bne.n	80046c0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	b672      	cpsid	i
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	b662      	cpsie	i
 80046ba:	60fb      	str	r3, [r7, #12]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <vTaskStartScheduler+0xa6>
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08006334 	.word	0x08006334
 80046cc:	08004b31 	.word	0x08004b31
 80046d0:	20000848 	.word	0x20000848
 80046d4:	20000844 	.word	0x20000844
 80046d8:	20000830 	.word	0x20000830
 80046dc:	20000828 	.word	0x20000828

080046e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	2000084c 	.word	0x2000084c

080046fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800470a:	4b42      	ldr	r3, [pc, #264]	; (8004814 <xTaskResumeAll+0x118>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10c      	bne.n	800472c <xTaskResumeAll+0x30>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	b672      	cpsid	i
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	b662      	cpsie	i
 8004726:	603b      	str	r3, [r7, #0]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800472c:	f000 fc4e 	bl	8004fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004730:	4b38      	ldr	r3, [pc, #224]	; (8004814 <xTaskResumeAll+0x118>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a37      	ldr	r2, [pc, #220]	; (8004814 <xTaskResumeAll+0x118>)
 8004738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <xTaskResumeAll+0x118>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d161      	bne.n	8004806 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004742:	4b35      	ldr	r3, [pc, #212]	; (8004818 <xTaskResumeAll+0x11c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d05d      	beq.n	8004806 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800474a:	e02e      	b.n	80047aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474c:	4b33      	ldr	r3, [pc, #204]	; (800481c <xTaskResumeAll+0x120>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3318      	adds	r3, #24
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fc97 	bl	800408c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fc92 	bl	800408c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	2201      	movs	r2, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <xTaskResumeAll+0x124>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <xTaskResumeAll+0x124>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4a27      	ldr	r2, [pc, #156]	; (8004824 <xTaskResumeAll+0x128>)
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7ff fc1e 	bl	8003fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <xTaskResumeAll+0x12c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <xTaskResumeAll+0x130>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <xTaskResumeAll+0x120>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1cc      	bne.n	800474c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b8:	f000 fa72 	bl	8004ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047bc:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <xTaskResumeAll+0x134>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c8:	f000 f836 	bl	8004838 <xTaskIncrementTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <xTaskResumeAll+0x130>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f1      	bne.n	80047c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <xTaskResumeAll+0x134>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <xTaskResumeAll+0x130>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <xTaskResumeAll+0x138>)
 80047f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004806:	f000 fc15 	bl	8005034 <vPortExitCritical>

	return xAlreadyYielded;
 800480a:	68bb      	ldr	r3, [r7, #8]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	2000084c 	.word	0x2000084c
 8004818:	20000824 	.word	0x20000824
 800481c:	200007e4 	.word	0x200007e4
 8004820:	2000082c 	.word	0x2000082c
 8004824:	20000728 	.word	0x20000728
 8004828:	20000724 	.word	0x20000724
 800482c:	20000838 	.word	0x20000838
 8004830:	20000834 	.word	0x20000834
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <xTaskIncrementTick+0x148>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 808a 	bne.w	8004960 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800484c:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <xTaskIncrementTick+0x14c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004854:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <xTaskIncrementTick+0x14c>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d122      	bne.n	80048a6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <xTaskIncrementTick+0x150>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <xTaskIncrementTick+0x4c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	b672      	cpsid	i
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	b662      	cpsie	i
 800487e:	603b      	str	r3, [r7, #0]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <xTaskIncrementTick+0x4a>
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <xTaskIncrementTick+0x150>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b40      	ldr	r3, [pc, #256]	; (800498c <xTaskIncrementTick+0x154>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3e      	ldr	r2, [pc, #248]	; (8004988 <xTaskIncrementTick+0x150>)
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4a3e      	ldr	r2, [pc, #248]	; (800498c <xTaskIncrementTick+0x154>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <xTaskIncrementTick+0x158>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <xTaskIncrementTick+0x158>)
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	f000 f9fd 	bl	8004ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d348      	bcc.n	8004942 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b0:	4b35      	ldr	r3, [pc, #212]	; (8004988 <xTaskIncrementTick+0x150>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
 80048c0:	601a      	str	r2, [r3, #0]
					break;
 80048c2:	e03e      	b.n	8004942 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c4:	4b30      	ldr	r3, [pc, #192]	; (8004988 <xTaskIncrementTick+0x150>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d203      	bcs.n	80048e4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <xTaskIncrementTick+0x15c>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048e2:	e02e      	b.n	8004942 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fbcf 	bl	800408c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3318      	adds	r3, #24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fbc6 	bl	800408c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <xTaskIncrementTick+0x160>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	4a22      	ldr	r2, [pc, #136]	; (8004998 <xTaskIncrementTick+0x160>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4a1f      	ldr	r2, [pc, #124]	; (800499c <xTaskIncrementTick+0x164>)
 8004920:	441a      	add	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7ff fb52 	bl	8003fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <xTaskIncrementTick+0x168>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d3b9      	bcc.n	80048b0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004940:	e7b6      	b.n	80048b0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <xTaskIncrementTick+0x168>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	4914      	ldr	r1, [pc, #80]	; (800499c <xTaskIncrementTick+0x164>)
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d907      	bls.n	800496a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e004      	b.n	800496a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004960:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <xTaskIncrementTick+0x16c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <xTaskIncrementTick+0x16c>)
 8004968:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <xTaskIncrementTick+0x170>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004972:	2301      	movs	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004976:	697b      	ldr	r3, [r7, #20]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2000084c 	.word	0x2000084c
 8004984:	20000828 	.word	0x20000828
 8004988:	200007dc 	.word	0x200007dc
 800498c:	200007e0 	.word	0x200007e0
 8004990:	2000083c 	.word	0x2000083c
 8004994:	20000844 	.word	0x20000844
 8004998:	2000082c 	.word	0x2000082c
 800499c:	20000728 	.word	0x20000728
 80049a0:	20000724 	.word	0x20000724
 80049a4:	20000834 	.word	0x20000834
 80049a8:	20000838 	.word	0x20000838

080049ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049b2:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <vTaskSwitchContext+0xa8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <vTaskSwitchContext+0xac>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c0:	e041      	b.n	8004a46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049c2:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <vTaskSwitchContext+0xac>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <vTaskSwitchContext+0xb0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	f1c3 031f 	rsb	r3, r3, #31
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	4920      	ldr	r1, [pc, #128]	; (8004a60 <vTaskSwitchContext+0xb4>)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <vTaskSwitchContext+0x60>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	b672      	cpsid	i
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	b662      	cpsie	i
 8004a06:	607b      	str	r3, [r7, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <vTaskSwitchContext+0x5e>
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <vTaskSwitchContext+0xb4>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d104      	bne.n	8004a3c <vTaskSwitchContext+0x90>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <vTaskSwitchContext+0xb8>)
 8004a44:	6013      	str	r3, [r2, #0]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000084c 	.word	0x2000084c
 8004a58:	20000838 	.word	0x20000838
 8004a5c:	2000082c 	.word	0x2000082c
 8004a60:	20000728 	.word	0x20000728
 8004a64:	20000724 	.word	0x20000724

08004a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	b672      	cpsid	i
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	b662      	cpsie	i
 8004a92:	60fb      	str	r3, [r7, #12]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff faf5 	bl	800408c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <xTaskRemoveFromEventList+0xb0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11c      	bne.n	8004ae4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff faec 	bl	800408c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <xTaskRemoveFromEventList+0xb4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <xTaskRemoveFromEventList+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <xTaskRemoveFromEventList+0xb8>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7ff fa78 	bl	8003fd2 <vListInsertEnd>
 8004ae2:	e005      	b.n	8004af0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	480e      	ldr	r0, [pc, #56]	; (8004b24 <xTaskRemoveFromEventList+0xbc>)
 8004aec:	f7ff fa71 	bl	8003fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xTaskRemoveFromEventList+0xc0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d905      	bls.n	8004b0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <xTaskRemoveFromEventList+0xc4>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e001      	b.n	8004b0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000084c 	.word	0x2000084c
 8004b1c:	2000082c 	.word	0x2000082c
 8004b20:	20000728 	.word	0x20000728
 8004b24:	200007e4 	.word	0x200007e4
 8004b28:	20000724 	.word	0x20000724
 8004b2c:	20000838 	.word	0x20000838

08004b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b38:	f000 f852 	bl	8004be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <prvIdleTask+0x28>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d9f9      	bls.n	8004b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <prvIdleTask+0x2c>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b54:	e7f0      	b.n	8004b38 <prvIdleTask+0x8>
 8004b56:	bf00      	nop
 8004b58:	20000728 	.word	0x20000728
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e00c      	b.n	8004b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <prvInitialiseTaskLists+0x60>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff f9fc 	bl	8003f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d9ef      	bls.n	8004b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	f7ff f9f3 	bl	8003f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004b94:	f7ff f9f0 	bl	8003f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b98:	480c      	ldr	r0, [pc, #48]	; (8004bcc <prvInitialiseTaskLists+0x6c>)
 8004b9a:	f7ff f9ed 	bl	8003f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b9e:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <prvInitialiseTaskLists+0x70>)
 8004ba0:	f7ff f9ea 	bl	8003f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ba4:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <prvInitialiseTaskLists+0x74>)
 8004ba6:	f7ff f9e7 	bl	8003f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <prvInitialiseTaskLists+0x78>)
 8004bac:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <prvInitialiseTaskLists+0x7c>)
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000728 	.word	0x20000728
 8004bc4:	200007b4 	.word	0x200007b4
 8004bc8:	200007c8 	.word	0x200007c8
 8004bcc:	200007e4 	.word	0x200007e4
 8004bd0:	200007f8 	.word	0x200007f8
 8004bd4:	20000810 	.word	0x20000810
 8004bd8:	200007dc 	.word	0x200007dc
 8004bdc:	200007e0 	.word	0x200007e0

08004be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be6:	e019      	b.n	8004c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be8:	f000 f9f0 	bl	8004fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <prvCheckTasksWaitingTermination+0x50>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fa47 	bl	800408c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c12:	f000 fa0f 	bl	8005034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f810 	bl	8004c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e1      	bne.n	8004be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200007f8 	.word	0x200007f8
 8004c34:	20000824 	.word	0x20000824
 8004c38:	2000080c 	.word	0x2000080c

08004c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb6c 	bl	8005330 <vPortFree>
				vPortFree( pxTCB );
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb69 	bl	8005330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c5e:	e01a      	b.n	8004c96 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d103      	bne.n	8004c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb60 	bl	8005330 <vPortFree>
	}
 8004c70:	e011      	b.n	8004c96 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d00c      	beq.n	8004c96 <prvDeleteTCB+0x5a>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <prvDeleteTCB+0x58>
	}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb8:	e008      	b.n	8004ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	200007dc 	.word	0x200007dc
 8004cdc:	20000844 	.word	0x20000844

08004ce0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cea:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cf0:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff f9c8 	bl	800408c <uxListRemove>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2201      	movs	r2, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4013      	ands	r3, r2
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d10a      	bne.n	8004d38 <prvAddCurrentTaskToDelayedList+0x58>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	481a      	ldr	r0, [pc, #104]	; (8004d9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d32:	f7ff f94e 	bl	8003fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d36:	e026      	b.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d209      	bcs.n	8004d64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7ff f95c 	bl	800401a <vListInsert>
}
 8004d62:	e010      	b.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7ff f952 	bl	800401a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d202      	bcs.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6013      	str	r3, [r2, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000828 	.word	0x20000828
 8004d94:	20000724 	.word	0x20000724
 8004d98:	2000082c 	.word	0x2000082c
 8004d9c:	20000810 	.word	0x20000810
 8004da0:	200007e0 	.word	0x200007e0
 8004da4:	200007dc 	.word	0x200007dc
 8004da8:	20000844 	.word	0x20000844

08004dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ddc:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <pxPortInitialiseStack+0x64>)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b14      	subs	r3, #20
 8004de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b04      	subs	r3, #4
 8004df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f06f 0202 	mvn.w	r2, #2
 8004dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b20      	subs	r3, #32
 8004e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	08004e15 	.word	0x08004e15

08004e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <prvTaskExitError+0x5c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d00c      	beq.n	8004e42 <prvTaskExitError+0x2e>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <prvTaskExitError+0x2c>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	b672      	cpsid	i
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	b662      	cpsie	i
 8004e56:	60bb      	str	r3, [r7, #8]
}
 8004e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e5a:	bf00      	nop
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0fc      	beq.n	8004e5c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	2000000c 	.word	0x2000000c
	...

08004e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <pxCurrentTCBConst2>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	6808      	ldr	r0, [r1, #0]
 8004e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	f380 8809 	msr	PSP, r0
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	4770      	bx	lr
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst2>:
 8004ea0:	20000724 	.word	0x20000724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ea8:	4808      	ldr	r0, [pc, #32]	; (8004ecc <prvPortStartFirstTask+0x24>)
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f380 8808 	msr	MSP, r0
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8814 	msr	CONTROL, r0
 8004eba:	b662      	cpsie	i
 8004ebc:	b661      	cpsie	f
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	df00      	svc	0
 8004ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eca:	bf00      	nop
 8004ecc:	e000ed08 	.word	0xe000ed08

08004ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <xPortStartScheduler+0xe4>)
 8004ed8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <xPortStartScheduler+0xe8>)
 8004efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f04:	e009      	b.n	8004f1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d0ef      	beq.n	8004f06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f26:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00c      	beq.n	8004f4c <xPortStartScheduler+0x7c>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	60bb      	str	r3, [r7, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <xPortStartScheduler+0xec>)
 8004f60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <xPortStartScheduler+0xf0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <xPortStartScheduler+0xf0>)
 8004f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <xPortStartScheduler+0xf0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a11      	ldr	r2, [pc, #68]	; (8004fc0 <xPortStartScheduler+0xf0>)
 8004f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f82:	f000 f8dd 	bl	8005140 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <xPortStartScheduler+0xf4>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f8c:	f000 f8fc 	bl	8005188 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <xPortStartScheduler+0xf8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <xPortStartScheduler+0xf8>)
 8004f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f9c:	f7ff ff84 	bl	8004ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa0:	f7ff fd04 	bl	80049ac <vTaskSwitchContext>
	prvTaskExitError();
 8004fa4:	f7ff ff36 	bl	8004e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	e000e400 	.word	0xe000e400
 8004fb8:	20000850 	.word	0x20000850
 8004fbc:	20000854 	.word	0x20000854
 8004fc0:	e000ed20 	.word	0xe000ed20
 8004fc4:	2000000c 	.word	0x2000000c
 8004fc8:	e000ef34 	.word	0xe000ef34

08004fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	b672      	cpsid	i
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	b662      	cpsie	i
 8004fe6:	607b      	str	r3, [r7, #4]
}
 8004fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <vPortEnterCritical+0x60>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	; (800502c <vPortEnterCritical+0x60>)
 8004ff2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	; (800502c <vPortEnterCritical+0x60>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d111      	bne.n	8005020 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <vPortEnterCritical+0x64>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00c      	beq.n	8005020 <vPortEnterCritical+0x54>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	b672      	cpsid	i
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	b662      	cpsie	i
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <vPortEnterCritical+0x52>
	}
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	2000000c 	.word	0x2000000c
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <vPortExitCritical+0x54>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <vPortExitCritical+0x28>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	b672      	cpsid	i
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	b662      	cpsie	i
 8005056:	607b      	str	r3, [r7, #4]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <vPortExitCritical+0x54>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <vPortExitCritical+0x54>)
 8005064:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <vPortExitCritical+0x54>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <vPortExitCritical+0x46>
 800506e:	2300      	movs	r3, #0
 8005070:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005078:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c
 800508c:	00000000 	.word	0x00000000

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f01e 0f10 	tst.w	lr, #16
 80050a0:	bf08      	it	eq
 80050a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050b4:	b672      	cpsid	i
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	b662      	cpsie	i
 80050c4:	f7ff fc72 	bl	80049ac <vTaskSwitchContext>
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f380 8811 	msr	BASEPRI, r0
 80050d0:	bc09      	pop	{r0, r3}
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f01e 0f10 	tst.w	lr, #16
 80050de:	bf08      	it	eq
 80050e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050e4:	f380 8809 	msr	PSP, r0
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <pxCurrentTCBConst>:
 80050f0:	20000724 	.word	0x20000724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	b672      	cpsid	i
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	b662      	cpsie	i
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005116:	f7ff fb8f 	bl	8004838 <xTaskIncrementTick>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <SysTick_Handler+0x44>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	2300      	movs	r3, #0
 800512a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f383 8811 	msr	BASEPRI, r3
}
 8005132:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <vPortSetupTimerInterrupt+0x34>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <vPortSetupTimerInterrupt+0x38>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <vPortSetupTimerInterrupt+0x3c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <vPortSetupTimerInterrupt+0x40>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	4a09      	ldr	r2, [pc, #36]	; (8005184 <vPortSetupTimerInterrupt+0x44>)
 800515e:	3b01      	subs	r3, #1
 8005160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005162:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vPortSetupTimerInterrupt+0x34>)
 8005164:	2207      	movs	r2, #7
 8005166:	601a      	str	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e010 	.word	0xe000e010
 8005178:	e000e018 	.word	0xe000e018
 800517c:	20000000 	.word	0x20000000
 8005180:	10624dd3 	.word	0x10624dd3
 8005184:	e000e014 	.word	0xe000e014

08005188 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005188:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005198 <vPortEnableVFP+0x10>
 800518c:	6801      	ldr	r1, [r0, #0]
 800518e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005192:	6001      	str	r1, [r0, #0]
 8005194:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005196:	bf00      	nop
 8005198:	e000ed88 	.word	0xe000ed88

0800519c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051a8:	f7ff fa9a 	bl	80046e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051ac:	4b5b      	ldr	r3, [pc, #364]	; (800531c <pvPortMalloc+0x180>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b4:	f000 f91a 	bl	80053ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <pvPortMalloc+0x184>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 8092 	bne.w	80052ea <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01f      	beq.n	800520c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80051cc:	2208      	movs	r2, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d016      	beq.n	800520c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f023 0307 	bic.w	r3, r3, #7
 80051e4:	3308      	adds	r3, #8
 80051e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <pvPortMalloc+0x70>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	b672      	cpsid	i
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	b662      	cpsie	i
 8005206:	617b      	str	r3, [r7, #20]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d06b      	beq.n	80052ea <pvPortMalloc+0x14e>
 8005212:	4b44      	ldr	r3, [pc, #272]	; (8005324 <pvPortMalloc+0x188>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d866      	bhi.n	80052ea <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800521c:	4b42      	ldr	r3, [pc, #264]	; (8005328 <pvPortMalloc+0x18c>)
 800521e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <pvPortMalloc+0x18c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005226:	e004      	b.n	8005232 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <pvPortMalloc+0xa8>
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f1      	bne.n	8005228 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005244:	4b35      	ldr	r3, [pc, #212]	; (800531c <pvPortMalloc+0x180>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	429a      	cmp	r2, r3
 800524c:	d04d      	beq.n	80052ea <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2208      	movs	r2, #8
 8005254:	4413      	add	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	2308      	movs	r3, #8
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	429a      	cmp	r2, r3
 800526e:	d921      	bls.n	80052b4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <pvPortMalloc+0x100>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	613b      	str	r3, [r7, #16]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ae:	69b8      	ldr	r0, [r7, #24]
 80052b0:	f000 f8fe 	bl	80054b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052b4:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <pvPortMalloc+0x188>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <pvPortMalloc+0x188>)
 80052c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052c2:	4b18      	ldr	r3, [pc, #96]	; (8005324 <pvPortMalloc+0x188>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <pvPortMalloc+0x190>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d203      	bcs.n	80052d6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052ce:	4b15      	ldr	r3, [pc, #84]	; (8005324 <pvPortMalloc+0x188>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <pvPortMalloc+0x190>)
 80052d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <pvPortMalloc+0x184>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	431a      	orrs	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052ea:	f7ff fa07 	bl	80046fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <pvPortMalloc+0x176>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <pvPortMalloc+0x174>
	return pvReturn;
 8005312:	69fb      	ldr	r3, [r7, #28]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	; 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20004460 	.word	0x20004460
 8005320:	2000446c 	.word	0x2000446c
 8005324:	20004464 	.word	0x20004464
 8005328:	20004458 	.word	0x20004458
 800532c:	20004468 	.word	0x20004468

08005330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04c      	beq.n	80053dc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005342:	2308      	movs	r3, #8
 8005344:	425b      	negs	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <vPortFree+0xb4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <vPortFree+0x48>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	b672      	cpsid	i
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	b662      	cpsie	i
 8005372:	60fb      	str	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00c      	beq.n	800539a <vPortFree+0x6a>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	b672      	cpsid	i
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	b662      	cpsie	i
 8005394:	60bb      	str	r3, [r7, #8]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <vPortFree+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d115      	bne.n	80053dc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <vPortFree+0xb4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053c0:	f7ff f98e 	bl	80046e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <vPortFree+0xb8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4413      	add	r3, r2
 80053ce:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <vPortFree+0xb8>)
 80053d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f000 f86c 	bl	80054b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053d8:	f7ff f990 	bl	80046fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	2000446c 	.word	0x2000446c
 80053e8:	20004464 	.word	0x20004464

080053ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <prvHeapInit+0xac>)
 80053fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3307      	adds	r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <prvHeapInit+0xac>)
 800541c:	4413      	add	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005424:	4a1d      	ldr	r2, [pc, #116]	; (800549c <prvHeapInit+0xb0>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800542a:	4b1c      	ldr	r3, [pc, #112]	; (800549c <prvHeapInit+0xb0>)
 800542c:	2200      	movs	r2, #0
 800542e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4413      	add	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005438:	2208      	movs	r2, #8
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <prvHeapInit+0xb4>)
 800544c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <prvHeapInit+0xb4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <prvHeapInit+0xb4>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <prvHeapInit+0xb8>)
 800547a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <prvHeapInit+0xbc>)
 8005482:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <prvHeapInit+0xc0>)
 8005486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800548a:	601a      	str	r2, [r3, #0]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	20000858 	.word	0x20000858
 800549c:	20004458 	.word	0x20004458
 80054a0:	20004460 	.word	0x20004460
 80054a4:	20004468 	.word	0x20004468
 80054a8:	20004464 	.word	0x20004464
 80054ac:	2000446c 	.word	0x2000446c

080054b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b8:	4b28      	ldr	r3, [pc, #160]	; (800555c <prvInsertBlockIntoFreeList+0xac>)
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e002      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x14>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d8f7      	bhi.n	80054be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d108      	bne.n	80054f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	441a      	add	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d118      	bne.n	8005538 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <prvInsertBlockIntoFreeList+0xb0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d00d      	beq.n	800552e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e008      	b.n	8005540 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <prvInsertBlockIntoFreeList+0xb0>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e003      	b.n	8005540 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d002      	beq.n	800554e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20004458 	.word	0x20004458
 8005560:	20004460 	.word	0x20004460

08005564 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4803      	ldr	r0, [pc, #12]	; (8005588 <drv_uart1_receive+0x24>)
 800557a:	f7fd fc20 	bl	8002dbe <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000698 	.word	0x20000698

0800558c <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8005598:	887a      	ldrh	r2, [r7, #2]
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4803      	ldr	r0, [pc, #12]	; (80055b0 <drv_uart1_transmit+0x24>)
 80055a2:	f7fd fb89 	bl	8002cb8 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000698 	.word	0x20000698

080055b4 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b089      	sub	sp, #36	; 0x24
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e029      	b.n	800561a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 7041 	add.w	r0, r3, #772	; 0x304
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	3304      	adds	r3, #4
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461c      	mov	r4, r3
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4613      	mov	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	330c      	adds	r3, #12
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4623      	mov	r3, r4
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <sh_help+0x7c>)
 80055f8:	2128      	movs	r1, #40	; 0x28
 80055fa:	f000 f9d3 	bl	80059a4 <sniprintf>
 80055fe:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800560c:	6939      	ldr	r1, [r7, #16]
 800560e:	b289      	uxth	r1, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	dbd0      	blt.n	80055c6 <sh_help+0x12>
	}

	return 0;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	bf00      	nop
 8005630:	0800633c 	.word	0x0800633c

08005634 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <shell_init+0x74>)
 800564e:	2128      	movs	r1, #40	; 0x28
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f9a7 	bl	80059a4 <sniprintf>
 8005656:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	b289      	uxth	r1, r1
 8005668:	4610      	mov	r0, r2
 800566a:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8005672:	4a0e      	ldr	r2, [pc, #56]	; (80056ac <shell_init+0x78>)
 8005674:	2128      	movs	r1, #40	; 0x28
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f994 	bl	80059a4 <sniprintf>
 800567c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	b289      	uxth	r1, r1
 800568e:	4610      	mov	r0, r2
 8005690:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <shell_init+0x7c>)
 8005694:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <shell_init+0x80>)
 8005696:	2168      	movs	r1, #104	; 0x68
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f80d 	bl	80056b8 <shell_add>
}
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08006348 	.word	0x08006348
 80056ac:	08006370 	.word	0x08006370
 80056b0:	08006394 	.word	0x08006394
 80056b4:	080055b5 	.word	0x080055b5

080056b8 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	460b      	mov	r3, r1
 80056c6:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b3f      	cmp	r3, #63	; 0x3f
 80056ce:	dc27      	bgt.n	8005720 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	4613      	mov	r3, r2
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	3304      	adds	r3, #4
 80056e2:	7afa      	ldrb	r2, [r7, #11]
 80056e4:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3308      	adds	r3, #8
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68f9      	ldr	r1, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	330c      	adds	r3, #12
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]
		return 0;
 800571c:	2300      	movs	r3, #0
 800571e:	e001      	b.n	8005724 <shell_add+0x6c>
	}

	return -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8005730:	b580      	push	{r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005746:	e041      	b.n	80057cc <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3304      	adds	r3, #4
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800575e:	429a      	cmp	r2, r3
 8005760:	d131      	bne.n	80057c6 <shell_exec+0x96>
			argc = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	e013      	b.n	8005798 <shell_exec+0x68>
				if(*p == ' ') {
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b20      	cmp	r3, #32
 8005776:	d10c      	bne.n	8005792 <shell_exec+0x62>
					*p = '\0';
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	63ba      	str	r2, [r7, #56]	; 0x38
 8005784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005786:	3201      	adds	r2, #1
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	3340      	adds	r3, #64	; 0x40
 800578c:	443b      	add	r3, r7
 800578e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	3301      	adds	r3, #1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <shell_exec+0x76>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2b07      	cmp	r3, #7
 80057a4:	dde4      	ble.n	8005770 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3308      	adds	r3, #8
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f107 020c 	add.w	r2, r7, #12
 80057bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	e01d      	b.n	8005802 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c8:	3301      	adds	r3, #1
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	dbb8      	blt.n	8005748 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f503 7041 	add.w	r0, r3, #772	; 0x304
 80057dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <shell_exec+0xdc>)
 80057e2:	2128      	movs	r1, #40	; 0x28
 80057e4:	f000 f8de 	bl	80059a4 <sniprintf>
 80057e8:	62f8      	str	r0, [r7, #44]	; 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80057f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f8:	b289      	uxth	r1, r1
 80057fa:	4610      	mov	r0, r2
 80057fc:	4798      	blx	r3
	return -1;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005802:	4618      	mov	r0, r3
 8005804:	3740      	adds	r7, #64	; 0x40
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	0800639c 	.word	0x0800639c

08005810 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8005826:	2102      	movs	r1, #2
 8005828:	483a      	ldr	r0, [pc, #232]	; (8005914 <shell_run+0x104>)
 800582a:	4798      	blx	r3
		reading = 1;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]

		while(reading) {
 8005830:	e064      	b.n	80058fc <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8005838:	f107 020b 	add.w	r2, r7, #11
 800583c:	2101      	movs	r1, #1
 800583e:	4610      	mov	r0, r2
 8005840:	4798      	blx	r3
			int size;

			switch (c) {
 8005842:	7afb      	ldrb	r3, [r7, #11]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d036      	beq.n	80058b6 <shell_run+0xa6>
 8005848:	2b0d      	cmp	r3, #13
 800584a:	d141      	bne.n	80058d0 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8005852:	4a31      	ldr	r2, [pc, #196]	; (8005918 <shell_run+0x108>)
 8005854:	2128      	movs	r1, #40	; 0x28
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f8a4 	bl	80059a4 <sniprintf>
 800585c:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	b289      	uxth	r1, r1
 800586e:	4610      	mov	r0, r2
 8005870:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	613a      	str	r2, [r7, #16]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4413      	add	r3, r2
 800587c:	2200      	movs	r2, #0
 800587e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800588e:	4a23      	ldr	r2, [pc, #140]	; (800591c <shell_run+0x10c>)
 8005890:	2128      	movs	r1, #40	; 0x28
 8005892:	f000 f887 	bl	80059a4 <sniprintf>
 8005896:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	b289      	uxth	r1, r1
 80058a8:	4610      	mov	r0, r2
 80058aa:	4798      	blx	r3
				reading = 0;        //exit read loop
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
				break;
 80058b4:	e022      	b.n	80058fc <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd1e      	ble.n	80058fa <shell_run+0xea>
					pos--;          //remove it in buffer
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	3b01      	subs	r3, #1
 80058c0:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80058c8:	2103      	movs	r1, #3
 80058ca:	4815      	ldr	r0, [pc, #84]	; (8005920 <shell_run+0x110>)
 80058cc:	4798      	blx	r3
				}
				break;
 80058ce:	e014      	b.n	80058fa <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b27      	cmp	r3, #39	; 0x27
 80058d4:	dc12      	bgt.n	80058fc <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80058dc:	f107 020b 	add.w	r2, r7, #11
 80058e0:	2101      	movs	r1, #1
 80058e2:	4610      	mov	r0, r2
 80058e4:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	613a      	str	r2, [r7, #16]
 80058ec:	7af9      	ldrb	r1, [r7, #11]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	460a      	mov	r2, r1
 80058f4:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 80058f8:	e000      	b.n	80058fc <shell_run+0xec>
				break;
 80058fa:	bf00      	nop
		while(reading) {
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d197      	bne.n	8005832 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff ff10 	bl	8005730 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8005910:	e786      	b.n	8005820 <shell_run+0x10>
 8005912:	bf00      	nop
 8005914:	080063dc 	.word	0x080063dc
 8005918:	080063b4 	.word	0x080063b4
 800591c:	080063b8 	.word	0x080063b8
 8005920:	080063d8 	.word	0x080063d8

08005924 <__errno>:
 8005924:	4b01      	ldr	r3, [pc, #4]	; (800592c <__errno+0x8>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4d0d      	ldr	r5, [pc, #52]	; (8005968 <__libc_init_array+0x38>)
 8005934:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005936:	1b64      	subs	r4, r4, r5
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	2600      	movs	r6, #0
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	4d0b      	ldr	r5, [pc, #44]	; (8005970 <__libc_init_array+0x40>)
 8005942:	4c0c      	ldr	r4, [pc, #48]	; (8005974 <__libc_init_array+0x44>)
 8005944:	f000 fca2 	bl	800628c <_init>
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	2600      	movs	r6, #0
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	0800641c 	.word	0x0800641c
 800596c:	0800641c 	.word	0x0800641c
 8005970:	0800641c 	.word	0x0800641c
 8005974:	08006420 	.word	0x08006420

08005978 <memcpy>:
 8005978:	440a      	add	r2, r1
 800597a:	4291      	cmp	r1, r2
 800597c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005980:	d100      	bne.n	8005984 <memcpy+0xc>
 8005982:	4770      	bx	lr
 8005984:	b510      	push	{r4, lr}
 8005986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800598a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598e:	4291      	cmp	r1, r2
 8005990:	d1f9      	bne.n	8005986 <memcpy+0xe>
 8005992:	bd10      	pop	{r4, pc}

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <sniprintf>:
 80059a4:	b40c      	push	{r2, r3}
 80059a6:	b530      	push	{r4, r5, lr}
 80059a8:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <sniprintf+0x64>)
 80059aa:	1e0c      	subs	r4, r1, #0
 80059ac:	681d      	ldr	r5, [r3, #0]
 80059ae:	b09d      	sub	sp, #116	; 0x74
 80059b0:	da08      	bge.n	80059c4 <sniprintf+0x20>
 80059b2:	238b      	movs	r3, #139	; 0x8b
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ba:	b01d      	add	sp, #116	; 0x74
 80059bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c0:	b002      	add	sp, #8
 80059c2:	4770      	bx	lr
 80059c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059cc:	bf14      	ite	ne
 80059ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059d2:	4623      	moveq	r3, r4
 80059d4:	9304      	str	r3, [sp, #16]
 80059d6:	9307      	str	r3, [sp, #28]
 80059d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059dc:	9002      	str	r0, [sp, #8]
 80059de:	9006      	str	r0, [sp, #24]
 80059e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059e6:	ab21      	add	r3, sp, #132	; 0x84
 80059e8:	a902      	add	r1, sp, #8
 80059ea:	4628      	mov	r0, r5
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	f000 f869 	bl	8005ac4 <_svfiprintf_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	bfbc      	itt	lt
 80059f6:	238b      	movlt	r3, #139	; 0x8b
 80059f8:	602b      	strlt	r3, [r5, #0]
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	d0dd      	beq.n	80059ba <sniprintf+0x16>
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e7d9      	b.n	80059ba <sniprintf+0x16>
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <__ssputs_r>:
 8005a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a10:	688e      	ldr	r6, [r1, #8]
 8005a12:	429e      	cmp	r6, r3
 8005a14:	4682      	mov	sl, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	4690      	mov	r8, r2
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	d838      	bhi.n	8005a90 <__ssputs_r+0x84>
 8005a1e:	898a      	ldrh	r2, [r1, #12]
 8005a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a24:	d032      	beq.n	8005a8c <__ssputs_r+0x80>
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	6909      	ldr	r1, [r1, #16]
 8005a2a:	eba5 0901 	sub.w	r9, r5, r1
 8005a2e:	6965      	ldr	r5, [r4, #20]
 8005a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a38:	3301      	adds	r3, #1
 8005a3a:	444b      	add	r3, r9
 8005a3c:	106d      	asrs	r5, r5, #1
 8005a3e:	429d      	cmp	r5, r3
 8005a40:	bf38      	it	cc
 8005a42:	461d      	movcc	r5, r3
 8005a44:	0553      	lsls	r3, r2, #21
 8005a46:	d531      	bpl.n	8005aac <__ssputs_r+0xa0>
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f000 fb55 	bl	80060f8 <_malloc_r>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	b950      	cbnz	r0, 8005a68 <__ssputs_r+0x5c>
 8005a52:	230c      	movs	r3, #12
 8005a54:	f8ca 3000 	str.w	r3, [sl]
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	6921      	ldr	r1, [r4, #16]
 8005a6a:	464a      	mov	r2, r9
 8005a6c:	f7ff ff84 	bl	8005978 <memcpy>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	6126      	str	r6, [r4, #16]
 8005a7e:	6165      	str	r5, [r4, #20]
 8005a80:	444e      	add	r6, r9
 8005a82:	eba5 0509 	sub.w	r5, r5, r9
 8005a86:	6026      	str	r6, [r4, #0]
 8005a88:	60a5      	str	r5, [r4, #8]
 8005a8a:	463e      	mov	r6, r7
 8005a8c:	42be      	cmp	r6, r7
 8005a8e:	d900      	bls.n	8005a92 <__ssputs_r+0x86>
 8005a90:	463e      	mov	r6, r7
 8005a92:	6820      	ldr	r0, [r4, #0]
 8005a94:	4632      	mov	r2, r6
 8005a96:	4641      	mov	r1, r8
 8005a98:	f000 faa8 	bl	8005fec <memmove>
 8005a9c:	68a3      	ldr	r3, [r4, #8]
 8005a9e:	1b9b      	subs	r3, r3, r6
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	4433      	add	r3, r6
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e7db      	b.n	8005a64 <__ssputs_r+0x58>
 8005aac:	462a      	mov	r2, r5
 8005aae:	f000 fb97 	bl	80061e0 <_realloc_r>
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1e1      	bne.n	8005a7c <__ssputs_r+0x70>
 8005ab8:	6921      	ldr	r1, [r4, #16]
 8005aba:	4650      	mov	r0, sl
 8005abc:	f000 fab0 	bl	8006020 <_free_r>
 8005ac0:	e7c7      	b.n	8005a52 <__ssputs_r+0x46>
	...

08005ac4 <_svfiprintf_r>:
 8005ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	4698      	mov	r8, r3
 8005aca:	898b      	ldrh	r3, [r1, #12]
 8005acc:	061b      	lsls	r3, r3, #24
 8005ace:	b09d      	sub	sp, #116	; 0x74
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460d      	mov	r5, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	d50e      	bpl.n	8005af6 <_svfiprintf_r+0x32>
 8005ad8:	690b      	ldr	r3, [r1, #16]
 8005ada:	b963      	cbnz	r3, 8005af6 <_svfiprintf_r+0x32>
 8005adc:	2140      	movs	r1, #64	; 0x40
 8005ade:	f000 fb0b 	bl	80060f8 <_malloc_r>
 8005ae2:	6028      	str	r0, [r5, #0]
 8005ae4:	6128      	str	r0, [r5, #16]
 8005ae6:	b920      	cbnz	r0, 8005af2 <_svfiprintf_r+0x2e>
 8005ae8:	230c      	movs	r3, #12
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	e0d1      	b.n	8005c96 <_svfiprintf_r+0x1d2>
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	616b      	str	r3, [r5, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	2320      	movs	r3, #32
 8005afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b04:	2330      	movs	r3, #48	; 0x30
 8005b06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cb0 <_svfiprintf_r+0x1ec>
 8005b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b0e:	f04f 0901 	mov.w	r9, #1
 8005b12:	4623      	mov	r3, r4
 8005b14:	469a      	mov	sl, r3
 8005b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1a:	b10a      	cbz	r2, 8005b20 <_svfiprintf_r+0x5c>
 8005b1c:	2a25      	cmp	r2, #37	; 0x25
 8005b1e:	d1f9      	bne.n	8005b14 <_svfiprintf_r+0x50>
 8005b20:	ebba 0b04 	subs.w	fp, sl, r4
 8005b24:	d00b      	beq.n	8005b3e <_svfiprintf_r+0x7a>
 8005b26:	465b      	mov	r3, fp
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f7ff ff6d 	bl	8005a0c <__ssputs_r>
 8005b32:	3001      	adds	r0, #1
 8005b34:	f000 80aa 	beq.w	8005c8c <_svfiprintf_r+0x1c8>
 8005b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3a:	445a      	add	r2, fp
 8005b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a2 	beq.w	8005c8c <_svfiprintf_r+0x1c8>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b52:	f10a 0a01 	add.w	sl, sl, #1
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005b60:	4654      	mov	r4, sl
 8005b62:	2205      	movs	r2, #5
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	4851      	ldr	r0, [pc, #324]	; (8005cb0 <_svfiprintf_r+0x1ec>)
 8005b6a:	f7fa fb51 	bl	8000210 <memchr>
 8005b6e:	9a04      	ldr	r2, [sp, #16]
 8005b70:	b9d8      	cbnz	r0, 8005baa <_svfiprintf_r+0xe6>
 8005b72:	06d0      	lsls	r0, r2, #27
 8005b74:	bf44      	itt	mi
 8005b76:	2320      	movmi	r3, #32
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7c:	0711      	lsls	r1, r2, #28
 8005b7e:	bf44      	itt	mi
 8005b80:	232b      	movmi	r3, #43	; 0x2b
 8005b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b86:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d015      	beq.n	8005bba <_svfiprintf_r+0xf6>
 8005b8e:	9a07      	ldr	r2, [sp, #28]
 8005b90:	4654      	mov	r4, sl
 8005b92:	2000      	movs	r0, #0
 8005b94:	f04f 0c0a 	mov.w	ip, #10
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9e:	3b30      	subs	r3, #48	; 0x30
 8005ba0:	2b09      	cmp	r3, #9
 8005ba2:	d94e      	bls.n	8005c42 <_svfiprintf_r+0x17e>
 8005ba4:	b1b0      	cbz	r0, 8005bd4 <_svfiprintf_r+0x110>
 8005ba6:	9207      	str	r2, [sp, #28]
 8005ba8:	e014      	b.n	8005bd4 <_svfiprintf_r+0x110>
 8005baa:	eba0 0308 	sub.w	r3, r0, r8
 8005bae:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	46a2      	mov	sl, r4
 8005bb8:	e7d2      	b.n	8005b60 <_svfiprintf_r+0x9c>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	9103      	str	r1, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfbb      	ittet	lt
 8005bc6:	425b      	neglt	r3, r3
 8005bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bcc:	9307      	strge	r3, [sp, #28]
 8005bce:	9307      	strlt	r3, [sp, #28]
 8005bd0:	bfb8      	it	lt
 8005bd2:	9204      	strlt	r2, [sp, #16]
 8005bd4:	7823      	ldrb	r3, [r4, #0]
 8005bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd8:	d10c      	bne.n	8005bf4 <_svfiprintf_r+0x130>
 8005bda:	7863      	ldrb	r3, [r4, #1]
 8005bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bde:	d135      	bne.n	8005c4c <_svfiprintf_r+0x188>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	9203      	str	r2, [sp, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfb8      	it	lt
 8005bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bf0:	3402      	adds	r4, #2
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cc0 <_svfiprintf_r+0x1fc>
 8005bf8:	7821      	ldrb	r1, [r4, #0]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4650      	mov	r0, sl
 8005bfe:	f7fa fb07 	bl	8000210 <memchr>
 8005c02:	b140      	cbz	r0, 8005c16 <_svfiprintf_r+0x152>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	eba0 000a 	sub.w	r0, r0, sl
 8005c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c0e:	9b04      	ldr	r3, [sp, #16]
 8005c10:	4303      	orrs	r3, r0
 8005c12:	3401      	adds	r4, #1
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1a:	4826      	ldr	r0, [pc, #152]	; (8005cb4 <_svfiprintf_r+0x1f0>)
 8005c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c20:	2206      	movs	r2, #6
 8005c22:	f7fa faf5 	bl	8000210 <memchr>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d038      	beq.n	8005c9c <_svfiprintf_r+0x1d8>
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <_svfiprintf_r+0x1f4>)
 8005c2c:	bb1b      	cbnz	r3, 8005c76 <_svfiprintf_r+0x1b2>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	3307      	adds	r3, #7
 8005c32:	f023 0307 	bic.w	r3, r3, #7
 8005c36:	3308      	adds	r3, #8
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3c:	4433      	add	r3, r6
 8005c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c40:	e767      	b.n	8005b12 <_svfiprintf_r+0x4e>
 8005c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c46:	460c      	mov	r4, r1
 8005c48:	2001      	movs	r0, #1
 8005c4a:	e7a5      	b.n	8005b98 <_svfiprintf_r+0xd4>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	3401      	adds	r4, #1
 8005c50:	9305      	str	r3, [sp, #20]
 8005c52:	4619      	mov	r1, r3
 8005c54:	f04f 0c0a 	mov.w	ip, #10
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c5e:	3a30      	subs	r2, #48	; 0x30
 8005c60:	2a09      	cmp	r2, #9
 8005c62:	d903      	bls.n	8005c6c <_svfiprintf_r+0x1a8>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0c5      	beq.n	8005bf4 <_svfiprintf_r+0x130>
 8005c68:	9105      	str	r1, [sp, #20]
 8005c6a:	e7c3      	b.n	8005bf4 <_svfiprintf_r+0x130>
 8005c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c70:	4604      	mov	r4, r0
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7f0      	b.n	8005c58 <_svfiprintf_r+0x194>
 8005c76:	ab03      	add	r3, sp, #12
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <_svfiprintf_r+0x1f8>)
 8005c7e:	a904      	add	r1, sp, #16
 8005c80:	4638      	mov	r0, r7
 8005c82:	f3af 8000 	nop.w
 8005c86:	1c42      	adds	r2, r0, #1
 8005c88:	4606      	mov	r6, r0
 8005c8a:	d1d6      	bne.n	8005c3a <_svfiprintf_r+0x176>
 8005c8c:	89ab      	ldrh	r3, [r5, #12]
 8005c8e:	065b      	lsls	r3, r3, #25
 8005c90:	f53f af2c 	bmi.w	8005aec <_svfiprintf_r+0x28>
 8005c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c96:	b01d      	add	sp, #116	; 0x74
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9c:	ab03      	add	r3, sp, #12
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <_svfiprintf_r+0x1f8>)
 8005ca4:	a904      	add	r1, sp, #16
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f000 f87a 	bl	8005da0 <_printf_i>
 8005cac:	e7eb      	b.n	8005c86 <_svfiprintf_r+0x1c2>
 8005cae:	bf00      	nop
 8005cb0:	080063df 	.word	0x080063df
 8005cb4:	080063e9 	.word	0x080063e9
 8005cb8:	00000000 	.word	0x00000000
 8005cbc:	08005a0d 	.word	0x08005a0d
 8005cc0:	080063e5 	.word	0x080063e5

08005cc4 <_printf_common>:
 8005cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	4616      	mov	r6, r2
 8005cca:	4699      	mov	r9, r3
 8005ccc:	688a      	ldr	r2, [r1, #8]
 8005cce:	690b      	ldr	r3, [r1, #16]
 8005cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	bfb8      	it	lt
 8005cd8:	4613      	movlt	r3, r2
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	b10a      	cbz	r2, 8005cea <_printf_common+0x26>
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	6033      	str	r3, [r6, #0]
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	0699      	lsls	r1, r3, #26
 8005cee:	bf42      	ittt	mi
 8005cf0:	6833      	ldrmi	r3, [r6, #0]
 8005cf2:	3302      	addmi	r3, #2
 8005cf4:	6033      	strmi	r3, [r6, #0]
 8005cf6:	6825      	ldr	r5, [r4, #0]
 8005cf8:	f015 0506 	ands.w	r5, r5, #6
 8005cfc:	d106      	bne.n	8005d0c <_printf_common+0x48>
 8005cfe:	f104 0a19 	add.w	sl, r4, #25
 8005d02:	68e3      	ldr	r3, [r4, #12]
 8005d04:	6832      	ldr	r2, [r6, #0]
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	42ab      	cmp	r3, r5
 8005d0a:	dc26      	bgt.n	8005d5a <_printf_common+0x96>
 8005d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d10:	1e13      	subs	r3, r2, #0
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	bf18      	it	ne
 8005d16:	2301      	movne	r3, #1
 8005d18:	0692      	lsls	r2, r2, #26
 8005d1a:	d42b      	bmi.n	8005d74 <_printf_common+0xb0>
 8005d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d20:	4649      	mov	r1, r9
 8005d22:	4638      	mov	r0, r7
 8005d24:	47c0      	blx	r8
 8005d26:	3001      	adds	r0, #1
 8005d28:	d01e      	beq.n	8005d68 <_printf_common+0xa4>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	68e5      	ldr	r5, [r4, #12]
 8005d2e:	6832      	ldr	r2, [r6, #0]
 8005d30:	f003 0306 	and.w	r3, r3, #6
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	bf08      	it	eq
 8005d38:	1aad      	subeq	r5, r5, r2
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	6922      	ldr	r2, [r4, #16]
 8005d3e:	bf0c      	ite	eq
 8005d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d44:	2500      	movne	r5, #0
 8005d46:	4293      	cmp	r3, r2
 8005d48:	bfc4      	itt	gt
 8005d4a:	1a9b      	subgt	r3, r3, r2
 8005d4c:	18ed      	addgt	r5, r5, r3
 8005d4e:	2600      	movs	r6, #0
 8005d50:	341a      	adds	r4, #26
 8005d52:	42b5      	cmp	r5, r6
 8005d54:	d11a      	bne.n	8005d8c <_printf_common+0xc8>
 8005d56:	2000      	movs	r0, #0
 8005d58:	e008      	b.n	8005d6c <_printf_common+0xa8>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4652      	mov	r2, sl
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4638      	mov	r0, r7
 8005d62:	47c0      	blx	r8
 8005d64:	3001      	adds	r0, #1
 8005d66:	d103      	bne.n	8005d70 <_printf_common+0xac>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d70:	3501      	adds	r5, #1
 8005d72:	e7c6      	b.n	8005d02 <_printf_common+0x3e>
 8005d74:	18e1      	adds	r1, r4, r3
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	2030      	movs	r0, #48	; 0x30
 8005d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d7e:	4422      	add	r2, r4
 8005d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d88:	3302      	adds	r3, #2
 8005d8a:	e7c7      	b.n	8005d1c <_printf_common+0x58>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4622      	mov	r2, r4
 8005d90:	4649      	mov	r1, r9
 8005d92:	4638      	mov	r0, r7
 8005d94:	47c0      	blx	r8
 8005d96:	3001      	adds	r0, #1
 8005d98:	d0e6      	beq.n	8005d68 <_printf_common+0xa4>
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	e7d9      	b.n	8005d52 <_printf_common+0x8e>
	...

08005da0 <_printf_i>:
 8005da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	7e0f      	ldrb	r7, [r1, #24]
 8005da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005da8:	2f78      	cmp	r7, #120	; 0x78
 8005daa:	4691      	mov	r9, r2
 8005dac:	4680      	mov	r8, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	469a      	mov	sl, r3
 8005db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005db6:	d807      	bhi.n	8005dc8 <_printf_i+0x28>
 8005db8:	2f62      	cmp	r7, #98	; 0x62
 8005dba:	d80a      	bhi.n	8005dd2 <_printf_i+0x32>
 8005dbc:	2f00      	cmp	r7, #0
 8005dbe:	f000 80d8 	beq.w	8005f72 <_printf_i+0x1d2>
 8005dc2:	2f58      	cmp	r7, #88	; 0x58
 8005dc4:	f000 80a3 	beq.w	8005f0e <_printf_i+0x16e>
 8005dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dd0:	e03a      	b.n	8005e48 <_printf_i+0xa8>
 8005dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dd6:	2b15      	cmp	r3, #21
 8005dd8:	d8f6      	bhi.n	8005dc8 <_printf_i+0x28>
 8005dda:	a101      	add	r1, pc, #4	; (adr r1, 8005de0 <_printf_i+0x40>)
 8005ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005de0:	08005e39 	.word	0x08005e39
 8005de4:	08005e4d 	.word	0x08005e4d
 8005de8:	08005dc9 	.word	0x08005dc9
 8005dec:	08005dc9 	.word	0x08005dc9
 8005df0:	08005dc9 	.word	0x08005dc9
 8005df4:	08005dc9 	.word	0x08005dc9
 8005df8:	08005e4d 	.word	0x08005e4d
 8005dfc:	08005dc9 	.word	0x08005dc9
 8005e00:	08005dc9 	.word	0x08005dc9
 8005e04:	08005dc9 	.word	0x08005dc9
 8005e08:	08005dc9 	.word	0x08005dc9
 8005e0c:	08005f59 	.word	0x08005f59
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005f3b 	.word	0x08005f3b
 8005e18:	08005dc9 	.word	0x08005dc9
 8005e1c:	08005dc9 	.word	0x08005dc9
 8005e20:	08005f7b 	.word	0x08005f7b
 8005e24:	08005dc9 	.word	0x08005dc9
 8005e28:	08005e7d 	.word	0x08005e7d
 8005e2c:	08005dc9 	.word	0x08005dc9
 8005e30:	08005dc9 	.word	0x08005dc9
 8005e34:	08005f43 	.word	0x08005f43
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	1d1a      	adds	r2, r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	602a      	str	r2, [r5, #0]
 8005e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0a3      	b.n	8005f94 <_printf_i+0x1f4>
 8005e4c:	6820      	ldr	r0, [r4, #0]
 8005e4e:	6829      	ldr	r1, [r5, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	f101 0304 	add.w	r3, r1, #4
 8005e56:	d50a      	bpl.n	8005e6e <_printf_i+0xce>
 8005e58:	680e      	ldr	r6, [r1, #0]
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	2e00      	cmp	r6, #0
 8005e5e:	da03      	bge.n	8005e68 <_printf_i+0xc8>
 8005e60:	232d      	movs	r3, #45	; 0x2d
 8005e62:	4276      	negs	r6, r6
 8005e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e68:	485e      	ldr	r0, [pc, #376]	; (8005fe4 <_printf_i+0x244>)
 8005e6a:	230a      	movs	r3, #10
 8005e6c:	e019      	b.n	8005ea2 <_printf_i+0x102>
 8005e6e:	680e      	ldr	r6, [r1, #0]
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e76:	bf18      	it	ne
 8005e78:	b236      	sxthne	r6, r6
 8005e7a:	e7ef      	b.n	8005e5c <_printf_i+0xbc>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	1d19      	adds	r1, r3, #4
 8005e82:	6029      	str	r1, [r5, #0]
 8005e84:	0601      	lsls	r1, r0, #24
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0xec>
 8005e88:	681e      	ldr	r6, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <_printf_i+0xf2>
 8005e8c:	0646      	lsls	r6, r0, #25
 8005e8e:	d5fb      	bpl.n	8005e88 <_printf_i+0xe8>
 8005e90:	881e      	ldrh	r6, [r3, #0]
 8005e92:	4854      	ldr	r0, [pc, #336]	; (8005fe4 <_printf_i+0x244>)
 8005e94:	2f6f      	cmp	r7, #111	; 0x6f
 8005e96:	bf0c      	ite	eq
 8005e98:	2308      	moveq	r3, #8
 8005e9a:	230a      	movne	r3, #10
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ea2:	6865      	ldr	r5, [r4, #4]
 8005ea4:	60a5      	str	r5, [r4, #8]
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	bfa2      	ittt	ge
 8005eaa:	6821      	ldrge	r1, [r4, #0]
 8005eac:	f021 0104 	bicge.w	r1, r1, #4
 8005eb0:	6021      	strge	r1, [r4, #0]
 8005eb2:	b90e      	cbnz	r6, 8005eb8 <_printf_i+0x118>
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	d04d      	beq.n	8005f54 <_printf_i+0x1b4>
 8005eb8:	4615      	mov	r5, r2
 8005eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8005ec2:	5dc7      	ldrb	r7, [r0, r7]
 8005ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ec8:	4637      	mov	r7, r6
 8005eca:	42bb      	cmp	r3, r7
 8005ecc:	460e      	mov	r6, r1
 8005ece:	d9f4      	bls.n	8005eba <_printf_i+0x11a>
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d10b      	bne.n	8005eec <_printf_i+0x14c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	07de      	lsls	r6, r3, #31
 8005ed8:	d508      	bpl.n	8005eec <_printf_i+0x14c>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	6861      	ldr	r1, [r4, #4]
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	bfde      	ittt	le
 8005ee2:	2330      	movle	r3, #48	; 0x30
 8005ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eec:	1b52      	subs	r2, r2, r5
 8005eee:	6122      	str	r2, [r4, #16]
 8005ef0:	f8cd a000 	str.w	sl, [sp]
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	aa03      	add	r2, sp, #12
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4640      	mov	r0, r8
 8005efc:	f7ff fee2 	bl	8005cc4 <_printf_common>
 8005f00:	3001      	adds	r0, #1
 8005f02:	d14c      	bne.n	8005f9e <_printf_i+0x1fe>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	b004      	add	sp, #16
 8005f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0e:	4835      	ldr	r0, [pc, #212]	; (8005fe4 <_printf_i+0x244>)
 8005f10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f14:	6829      	ldr	r1, [r5, #0]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f1c:	6029      	str	r1, [r5, #0]
 8005f1e:	061d      	lsls	r5, r3, #24
 8005f20:	d514      	bpl.n	8005f4c <_printf_i+0x1ac>
 8005f22:	07df      	lsls	r7, r3, #31
 8005f24:	bf44      	itt	mi
 8005f26:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2a:	6023      	strmi	r3, [r4, #0]
 8005f2c:	b91e      	cbnz	r6, 8005f36 <_printf_i+0x196>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	f023 0320 	bic.w	r3, r3, #32
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	2310      	movs	r3, #16
 8005f38:	e7b0      	b.n	8005e9c <_printf_i+0xfc>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f043 0320 	orr.w	r3, r3, #32
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	2378      	movs	r3, #120	; 0x78
 8005f44:	4828      	ldr	r0, [pc, #160]	; (8005fe8 <_printf_i+0x248>)
 8005f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f4a:	e7e3      	b.n	8005f14 <_printf_i+0x174>
 8005f4c:	0659      	lsls	r1, r3, #25
 8005f4e:	bf48      	it	mi
 8005f50:	b2b6      	uxthmi	r6, r6
 8005f52:	e7e6      	b.n	8005f22 <_printf_i+0x182>
 8005f54:	4615      	mov	r5, r2
 8005f56:	e7bb      	b.n	8005ed0 <_printf_i+0x130>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	6826      	ldr	r6, [r4, #0]
 8005f5c:	6961      	ldr	r1, [r4, #20]
 8005f5e:	1d18      	adds	r0, r3, #4
 8005f60:	6028      	str	r0, [r5, #0]
 8005f62:	0635      	lsls	r5, r6, #24
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	d501      	bpl.n	8005f6c <_printf_i+0x1cc>
 8005f68:	6019      	str	r1, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <_printf_i+0x1d2>
 8005f6c:	0670      	lsls	r0, r6, #25
 8005f6e:	d5fb      	bpl.n	8005f68 <_printf_i+0x1c8>
 8005f70:	8019      	strh	r1, [r3, #0]
 8005f72:	2300      	movs	r3, #0
 8005f74:	6123      	str	r3, [r4, #16]
 8005f76:	4615      	mov	r5, r2
 8005f78:	e7ba      	b.n	8005ef0 <_printf_i+0x150>
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	1d1a      	adds	r2, r3, #4
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	2100      	movs	r1, #0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f7fa f942 	bl	8000210 <memchr>
 8005f8c:	b108      	cbz	r0, 8005f92 <_printf_i+0x1f2>
 8005f8e:	1b40      	subs	r0, r0, r5
 8005f90:	6060      	str	r0, [r4, #4]
 8005f92:	6863      	ldr	r3, [r4, #4]
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	2300      	movs	r3, #0
 8005f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9c:	e7a8      	b.n	8005ef0 <_printf_i+0x150>
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	47d0      	blx	sl
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d0ab      	beq.n	8005f04 <_printf_i+0x164>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	079b      	lsls	r3, r3, #30
 8005fb0:	d413      	bmi.n	8005fda <_printf_i+0x23a>
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	4298      	cmp	r0, r3
 8005fb8:	bfb8      	it	lt
 8005fba:	4618      	movlt	r0, r3
 8005fbc:	e7a4      	b.n	8005f08 <_printf_i+0x168>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	47d0      	blx	sl
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d09b      	beq.n	8005f04 <_printf_i+0x164>
 8005fcc:	3501      	adds	r5, #1
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	9903      	ldr	r1, [sp, #12]
 8005fd2:	1a5b      	subs	r3, r3, r1
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	dcf2      	bgt.n	8005fbe <_printf_i+0x21e>
 8005fd8:	e7eb      	b.n	8005fb2 <_printf_i+0x212>
 8005fda:	2500      	movs	r5, #0
 8005fdc:	f104 0619 	add.w	r6, r4, #25
 8005fe0:	e7f5      	b.n	8005fce <_printf_i+0x22e>
 8005fe2:	bf00      	nop
 8005fe4:	080063f0 	.word	0x080063f0
 8005fe8:	08006401 	.word	0x08006401

08005fec <memmove>:
 8005fec:	4288      	cmp	r0, r1
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	eb01 0402 	add.w	r4, r1, r2
 8005ff4:	d902      	bls.n	8005ffc <memmove+0x10>
 8005ff6:	4284      	cmp	r4, r0
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	d807      	bhi.n	800600c <memmove+0x20>
 8005ffc:	1e43      	subs	r3, r0, #1
 8005ffe:	42a1      	cmp	r1, r4
 8006000:	d008      	beq.n	8006014 <memmove+0x28>
 8006002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800600a:	e7f8      	b.n	8005ffe <memmove+0x12>
 800600c:	4402      	add	r2, r0
 800600e:	4601      	mov	r1, r0
 8006010:	428a      	cmp	r2, r1
 8006012:	d100      	bne.n	8006016 <memmove+0x2a>
 8006014:	bd10      	pop	{r4, pc}
 8006016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800601a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800601e:	e7f7      	b.n	8006010 <memmove+0x24>

08006020 <_free_r>:
 8006020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006022:	2900      	cmp	r1, #0
 8006024:	d044      	beq.n	80060b0 <_free_r+0x90>
 8006026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602a:	9001      	str	r0, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f1a1 0404 	sub.w	r4, r1, #4
 8006032:	bfb8      	it	lt
 8006034:	18e4      	addlt	r4, r4, r3
 8006036:	f000 f913 	bl	8006260 <__malloc_lock>
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <_free_r+0x94>)
 800603c:	9801      	ldr	r0, [sp, #4]
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	b933      	cbnz	r3, 8006050 <_free_r+0x30>
 8006042:	6063      	str	r3, [r4, #4]
 8006044:	6014      	str	r4, [r2, #0]
 8006046:	b003      	add	sp, #12
 8006048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604c:	f000 b90e 	b.w	800626c <__malloc_unlock>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d908      	bls.n	8006066 <_free_r+0x46>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf01      	itttt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	1949      	addeq	r1, r1, r5
 8006062:	6021      	streq	r1, [r4, #0]
 8006064:	e7ed      	b.n	8006042 <_free_r+0x22>
 8006066:	461a      	mov	r2, r3
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	b10b      	cbz	r3, 8006070 <_free_r+0x50>
 800606c:	42a3      	cmp	r3, r4
 800606e:	d9fa      	bls.n	8006066 <_free_r+0x46>
 8006070:	6811      	ldr	r1, [r2, #0]
 8006072:	1855      	adds	r5, r2, r1
 8006074:	42a5      	cmp	r5, r4
 8006076:	d10b      	bne.n	8006090 <_free_r+0x70>
 8006078:	6824      	ldr	r4, [r4, #0]
 800607a:	4421      	add	r1, r4
 800607c:	1854      	adds	r4, r2, r1
 800607e:	42a3      	cmp	r3, r4
 8006080:	6011      	str	r1, [r2, #0]
 8006082:	d1e0      	bne.n	8006046 <_free_r+0x26>
 8006084:	681c      	ldr	r4, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	6053      	str	r3, [r2, #4]
 800608a:	4421      	add	r1, r4
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	e7da      	b.n	8006046 <_free_r+0x26>
 8006090:	d902      	bls.n	8006098 <_free_r+0x78>
 8006092:	230c      	movs	r3, #12
 8006094:	6003      	str	r3, [r0, #0]
 8006096:	e7d6      	b.n	8006046 <_free_r+0x26>
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	1961      	adds	r1, r4, r5
 800609c:	428b      	cmp	r3, r1
 800609e:	bf04      	itt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	bf04      	itt	eq
 80060a8:	1949      	addeq	r1, r1, r5
 80060aa:	6021      	streq	r1, [r4, #0]
 80060ac:	6054      	str	r4, [r2, #4]
 80060ae:	e7ca      	b.n	8006046 <_free_r+0x26>
 80060b0:	b003      	add	sp, #12
 80060b2:	bd30      	pop	{r4, r5, pc}
 80060b4:	20004470 	.word	0x20004470

080060b8 <sbrk_aligned>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4e0e      	ldr	r6, [pc, #56]	; (80060f4 <sbrk_aligned+0x3c>)
 80060bc:	460c      	mov	r4, r1
 80060be:	6831      	ldr	r1, [r6, #0]
 80060c0:	4605      	mov	r5, r0
 80060c2:	b911      	cbnz	r1, 80060ca <sbrk_aligned+0x12>
 80060c4:	f000 f8bc 	bl	8006240 <_sbrk_r>
 80060c8:	6030      	str	r0, [r6, #0]
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f8b7 	bl	8006240 <_sbrk_r>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	d00a      	beq.n	80060ec <sbrk_aligned+0x34>
 80060d6:	1cc4      	adds	r4, r0, #3
 80060d8:	f024 0403 	bic.w	r4, r4, #3
 80060dc:	42a0      	cmp	r0, r4
 80060de:	d007      	beq.n	80060f0 <sbrk_aligned+0x38>
 80060e0:	1a21      	subs	r1, r4, r0
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 f8ac 	bl	8006240 <_sbrk_r>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d101      	bne.n	80060f0 <sbrk_aligned+0x38>
 80060ec:	f04f 34ff 	mov.w	r4, #4294967295
 80060f0:	4620      	mov	r0, r4
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	20004474 	.word	0x20004474

080060f8 <_malloc_r>:
 80060f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fc:	1ccd      	adds	r5, r1, #3
 80060fe:	f025 0503 	bic.w	r5, r5, #3
 8006102:	3508      	adds	r5, #8
 8006104:	2d0c      	cmp	r5, #12
 8006106:	bf38      	it	cc
 8006108:	250c      	movcc	r5, #12
 800610a:	2d00      	cmp	r5, #0
 800610c:	4607      	mov	r7, r0
 800610e:	db01      	blt.n	8006114 <_malloc_r+0x1c>
 8006110:	42a9      	cmp	r1, r5
 8006112:	d905      	bls.n	8006120 <_malloc_r+0x28>
 8006114:	230c      	movs	r3, #12
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	2600      	movs	r6, #0
 800611a:	4630      	mov	r0, r6
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	4e2e      	ldr	r6, [pc, #184]	; (80061dc <_malloc_r+0xe4>)
 8006122:	f000 f89d 	bl	8006260 <__malloc_lock>
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	461c      	mov	r4, r3
 800612a:	bb34      	cbnz	r4, 800617a <_malloc_r+0x82>
 800612c:	4629      	mov	r1, r5
 800612e:	4638      	mov	r0, r7
 8006130:	f7ff ffc2 	bl	80060b8 <sbrk_aligned>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	4604      	mov	r4, r0
 8006138:	d14d      	bne.n	80061d6 <_malloc_r+0xde>
 800613a:	6834      	ldr	r4, [r6, #0]
 800613c:	4626      	mov	r6, r4
 800613e:	2e00      	cmp	r6, #0
 8006140:	d140      	bne.n	80061c4 <_malloc_r+0xcc>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	4631      	mov	r1, r6
 8006146:	4638      	mov	r0, r7
 8006148:	eb04 0803 	add.w	r8, r4, r3
 800614c:	f000 f878 	bl	8006240 <_sbrk_r>
 8006150:	4580      	cmp	r8, r0
 8006152:	d13a      	bne.n	80061ca <_malloc_r+0xd2>
 8006154:	6821      	ldr	r1, [r4, #0]
 8006156:	3503      	adds	r5, #3
 8006158:	1a6d      	subs	r5, r5, r1
 800615a:	f025 0503 	bic.w	r5, r5, #3
 800615e:	3508      	adds	r5, #8
 8006160:	2d0c      	cmp	r5, #12
 8006162:	bf38      	it	cc
 8006164:	250c      	movcc	r5, #12
 8006166:	4629      	mov	r1, r5
 8006168:	4638      	mov	r0, r7
 800616a:	f7ff ffa5 	bl	80060b8 <sbrk_aligned>
 800616e:	3001      	adds	r0, #1
 8006170:	d02b      	beq.n	80061ca <_malloc_r+0xd2>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	442b      	add	r3, r5
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	e00e      	b.n	8006198 <_malloc_r+0xa0>
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	1b52      	subs	r2, r2, r5
 800617e:	d41e      	bmi.n	80061be <_malloc_r+0xc6>
 8006180:	2a0b      	cmp	r2, #11
 8006182:	d916      	bls.n	80061b2 <_malloc_r+0xba>
 8006184:	1961      	adds	r1, r4, r5
 8006186:	42a3      	cmp	r3, r4
 8006188:	6025      	str	r5, [r4, #0]
 800618a:	bf18      	it	ne
 800618c:	6059      	strne	r1, [r3, #4]
 800618e:	6863      	ldr	r3, [r4, #4]
 8006190:	bf08      	it	eq
 8006192:	6031      	streq	r1, [r6, #0]
 8006194:	5162      	str	r2, [r4, r5]
 8006196:	604b      	str	r3, [r1, #4]
 8006198:	4638      	mov	r0, r7
 800619a:	f104 060b 	add.w	r6, r4, #11
 800619e:	f000 f865 	bl	800626c <__malloc_unlock>
 80061a2:	f026 0607 	bic.w	r6, r6, #7
 80061a6:	1d23      	adds	r3, r4, #4
 80061a8:	1af2      	subs	r2, r6, r3
 80061aa:	d0b6      	beq.n	800611a <_malloc_r+0x22>
 80061ac:	1b9b      	subs	r3, r3, r6
 80061ae:	50a3      	str	r3, [r4, r2]
 80061b0:	e7b3      	b.n	800611a <_malloc_r+0x22>
 80061b2:	6862      	ldr	r2, [r4, #4]
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	bf0c      	ite	eq
 80061b8:	6032      	streq	r2, [r6, #0]
 80061ba:	605a      	strne	r2, [r3, #4]
 80061bc:	e7ec      	b.n	8006198 <_malloc_r+0xa0>
 80061be:	4623      	mov	r3, r4
 80061c0:	6864      	ldr	r4, [r4, #4]
 80061c2:	e7b2      	b.n	800612a <_malloc_r+0x32>
 80061c4:	4634      	mov	r4, r6
 80061c6:	6876      	ldr	r6, [r6, #4]
 80061c8:	e7b9      	b.n	800613e <_malloc_r+0x46>
 80061ca:	230c      	movs	r3, #12
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	4638      	mov	r0, r7
 80061d0:	f000 f84c 	bl	800626c <__malloc_unlock>
 80061d4:	e7a1      	b.n	800611a <_malloc_r+0x22>
 80061d6:	6025      	str	r5, [r4, #0]
 80061d8:	e7de      	b.n	8006198 <_malloc_r+0xa0>
 80061da:	bf00      	nop
 80061dc:	20004470 	.word	0x20004470

080061e0 <_realloc_r>:
 80061e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	4680      	mov	r8, r0
 80061e6:	4614      	mov	r4, r2
 80061e8:	460e      	mov	r6, r1
 80061ea:	b921      	cbnz	r1, 80061f6 <_realloc_r+0x16>
 80061ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061f0:	4611      	mov	r1, r2
 80061f2:	f7ff bf81 	b.w	80060f8 <_malloc_r>
 80061f6:	b92a      	cbnz	r2, 8006204 <_realloc_r+0x24>
 80061f8:	f7ff ff12 	bl	8006020 <_free_r>
 80061fc:	4625      	mov	r5, r4
 80061fe:	4628      	mov	r0, r5
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	f000 f838 	bl	8006278 <_malloc_usable_size_r>
 8006208:	4284      	cmp	r4, r0
 800620a:	4607      	mov	r7, r0
 800620c:	d802      	bhi.n	8006214 <_realloc_r+0x34>
 800620e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006212:	d812      	bhi.n	800623a <_realloc_r+0x5a>
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f7ff ff6e 	bl	80060f8 <_malloc_r>
 800621c:	4605      	mov	r5, r0
 800621e:	2800      	cmp	r0, #0
 8006220:	d0ed      	beq.n	80061fe <_realloc_r+0x1e>
 8006222:	42bc      	cmp	r4, r7
 8006224:	4622      	mov	r2, r4
 8006226:	4631      	mov	r1, r6
 8006228:	bf28      	it	cs
 800622a:	463a      	movcs	r2, r7
 800622c:	f7ff fba4 	bl	8005978 <memcpy>
 8006230:	4631      	mov	r1, r6
 8006232:	4640      	mov	r0, r8
 8006234:	f7ff fef4 	bl	8006020 <_free_r>
 8006238:	e7e1      	b.n	80061fe <_realloc_r+0x1e>
 800623a:	4635      	mov	r5, r6
 800623c:	e7df      	b.n	80061fe <_realloc_r+0x1e>
	...

08006240 <_sbrk_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	; (800625c <_sbrk_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa fc78 	bl	8000b40 <_sbrk>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_sbrk_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_sbrk_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20004478 	.word	0x20004478

08006260 <__malloc_lock>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__malloc_lock+0x8>)
 8006262:	f000 b811 	b.w	8006288 <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	2000447c 	.word	0x2000447c

0800626c <__malloc_unlock>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__malloc_unlock+0x8>)
 800626e:	f000 b80c 	b.w	800628a <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	2000447c 	.word	0x2000447c

08006278 <_malloc_usable_size_r>:
 8006278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627c:	1f18      	subs	r0, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfbc      	itt	lt
 8006282:	580b      	ldrlt	r3, [r1, r0]
 8006284:	18c0      	addlt	r0, r0, r3
 8006286:	4770      	bx	lr

08006288 <__retarget_lock_acquire_recursive>:
 8006288:	4770      	bx	lr

0800628a <__retarget_lock_release_recursive>:
 800628a:	4770      	bx	lr

0800628c <_init>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr

08006298 <_fini>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr
